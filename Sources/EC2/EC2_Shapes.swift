// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension EC2 {
    //MARK: Enums

    public enum AccountAttributeName: String, CustomStringConvertible, Codable {
        case supportedPlatforms = "supported-platforms"
        case defaultVpc = "default-vpc"
        public var description: String { return self.rawValue }
    }

    public enum ActivityStatus: String, CustomStringConvertible, Codable {
        case error = "error"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        case fulfilled = "fulfilled"
        public var description: String { return self.rawValue }
    }

    public enum Affinity: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum AllocationState: String, CustomStringConvertible, Codable {
        case available = "available"
        case underAssessment = "under-assessment"
        case permanentFailure = "permanent-failure"
        case released = "released"
        case releasedPermanentFailure = "released-permanent-failure"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum AllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case diversified = "diversified"
        case capacityoptimized = "capacityOptimized"
        public var description: String { return self.rawValue }
    }

    public enum AllowsMultipleInstanceTypes: String, CustomStringConvertible, Codable {
        case on = "on"
        case off = "off"
        public var description: String { return self.rawValue }
    }

    public enum ArchitectureType: String, CustomStringConvertible, Codable {
        case i386 = "i386"
        case x8664 = "x86_64"
        case arm64 = "arm64"
        public var description: String { return self.rawValue }
    }

    public enum ArchitectureValues: String, CustomStringConvertible, Codable {
        case i386 = "i386"
        case x8664 = "x86_64"
        case arm64 = "arm64"
        public var description: String { return self.rawValue }
    }

    public enum AssociationStatusCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case associationFailed = "association-failed"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum AttachmentStatus: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public enum AutoAcceptSharedAttachmentsValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum AutoPlacement: String, CustomStringConvertible, Codable {
        case on = "on"
        case off = "off"
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable {
        case optInNotRequired = "opt-in-not-required"
        case optedIn = "opted-in"
        case notOptedIn = "not-opted-in"
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneState: String, CustomStringConvertible, Codable {
        case available = "available"
        case information = "information"
        case impaired = "impaired"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum BatchState: String, CustomStringConvertible, Codable {
        case submitted = "submitted"
        case active = "active"
        case cancelled = "cancelled"
        case failed = "failed"
        case cancelledRunning = "cancelled_running"
        case cancelledTerminating = "cancelled_terminating"
        case modifying = "modifying"
        public var description: String { return self.rawValue }
    }

    public enum BundleTaskState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case waitingForShutdown = "waiting-for-shutdown"
        case bundling = "bundling"
        case storing = "storing"
        case cancelling = "cancelling"
        case complete = "complete"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum ByoipCidrState: String, CustomStringConvertible, Codable {
        case advertised = "advertised"
        case deprovisioned = "deprovisioned"
        case failedDeprovision = "failed-deprovision"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingProvision = "pending-provision"
        case provisioned = "provisioned"
        case provisionedNotPubliclyAdvertisable = "provisioned-not-publicly-advertisable"
        public var description: String { return self.rawValue }
    }

    public enum CancelBatchErrorCode: String, CustomStringConvertible, Codable {
        case fleetrequestiddoesnotexist = "fleetRequestIdDoesNotExist"
        case fleetrequestidmalformed = "fleetRequestIdMalformed"
        case fleetrequestnotincancellablestate = "fleetRequestNotInCancellableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum CancelSpotInstanceRequestState: String, CustomStringConvertible, Codable {
        case active = "active"
        case open = "open"
        case closed = "closed"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationInstancePlatform: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case redHatEnterpriseLinux = "Red Hat Enterprise Linux"
        case suseLinux = "SUSE Linux"
        case windows = "Windows"
        case windowsWithSqlServer = "Windows with SQL Server"
        case windowsWithSqlServerEnterprise = "Windows with SQL Server Enterprise"
        case windowsWithSqlServerStandard = "Windows with SQL Server Standard"
        case windowsWithSqlServerWeb = "Windows with SQL Server Web"
        case linuxWithSqlServerStandard = "Linux with SQL Server Standard"
        case linuxWithSqlServerWeb = "Linux with SQL Server Web"
        case linuxWithSqlServerEnterprise = "Linux with SQL Server Enterprise"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationPreference: String, CustomStringConvertible, Codable {
        case open = "open"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationState: String, CustomStringConvertible, Codable {
        case active = "active"
        case expired = "expired"
        case cancelled = "cancelled"
        case pending = "pending"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationTenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case dedicated = "dedicated"
        public var description: String { return self.rawValue }
    }

    public enum CarrierGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum ClientCertificateRevocationListStatusCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case active = "active"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthenticationType: String, CustomStringConvertible, Codable {
        case certificateAuthentication = "certificate-authentication"
        case directoryServiceAuthentication = "directory-service-authentication"
        case federatedAuthentication = "federated-authentication"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthorizationRuleStatusCode: String, CustomStringConvertible, Codable {
        case authorizing = "authorizing"
        case active = "active"
        case failed = "failed"
        case revoking = "revoking"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnConnectionStatusCode: String, CustomStringConvertible, Codable {
        case active = "active"
        case failedToTerminate = "failed-to-terminate"
        case terminating = "terminating"
        case terminated = "terminated"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnEndpointStatusCode: String, CustomStringConvertible, Codable {
        case pendingAssociate = "pending-associate"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnRouteStatusCode: String, CustomStringConvertible, Codable {
        case creating = "creating"
        case active = "active"
        case failed = "failed"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationState: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationType: String, CustomStringConvertible, Codable {
        case topic = "Topic"
        public var description: String { return self.rawValue }
    }

    public enum ContainerFormat: String, CustomStringConvertible, Codable {
        case ova = "ova"
        public var description: String { return self.rawValue }
    }

    public enum ConversionTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum CopyTagsFromSource: String, CustomStringConvertible, Codable {
        case volume = "volume"
        public var description: String { return self.rawValue }
    }

    public enum CurrencyCodeValues: String, CustomStringConvertible, Codable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum DatafeedSubscriptionState: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTableAssociationValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTablePropagationValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum DefaultTargetCapacityType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case onDemand = "on-demand"
        public var description: String { return self.rawValue }
    }

    public enum DeleteFleetErrorCode: String, CustomStringConvertible, Codable {
        case fleetiddoesnotexist = "fleetIdDoesNotExist"
        case fleetidmalformed = "fleetIdMalformed"
        case fleetnotindeletablestate = "fleetNotInDeletableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum DeleteQueuedReservedInstancesErrorCode: String, CustomStringConvertible, Codable {
        case reservedInstancesIdInvalid = "reserved-instances-id-invalid"
        case reservedInstancesNotInQueuedState = "reserved-instances-not-in-queued-state"
        case unexpectedError = "unexpected-error"
        public var description: String { return self.rawValue }
    }

    public enum DeviceType: String, CustomStringConvertible, Codable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum DiskImageFormat: String, CustomStringConvertible, Codable {
        case vmdk = "VMDK"
        case raw = "RAW"
        case vhd = "VHD"
        public var description: String { return self.rawValue }
    }

    public enum DiskType: String, CustomStringConvertible, Codable {
        case hdd = "hdd"
        case ssd = "ssd"
        public var description: String { return self.rawValue }
    }

    public enum DnsNameState: String, CustomStringConvertible, Codable {
        case pendingverification = "pendingVerification"
        case verified = "verified"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum DnsSupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum DomainType: String, CustomStringConvertible, Codable {
        case vpc = "vpc"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public enum EbsEncryptionSupport: String, CustomStringConvertible, Codable {
        case unsupported = "unsupported"
        case supported = "supported"
        public var description: String { return self.rawValue }
    }

    public enum EbsNvmeSupport: String, CustomStringConvertible, Codable {
        case unsupported = "unsupported"
        case supported = "supported"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum EbsOptimizedSupport: String, CustomStringConvertible, Codable {
        case unsupported = "unsupported"
        case supported = "supported"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuState: String, CustomStringConvertible, Codable {
        case attached = "ATTACHED"
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuStatus: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case impaired = "IMPAIRED"
        public var description: String { return self.rawValue }
    }

    public enum EnaSupport: String, CustomStringConvertible, Codable {
        case unsupported = "unsupported"
        case supported = "supported"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum EndDateType: String, CustomStringConvertible, Codable {
        case unlimited = "unlimited"
        case limited = "limited"
        public var description: String { return self.rawValue }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case instanceReboot = "instance-reboot"
        case systemReboot = "system-reboot"
        case systemMaintenance = "system-maintenance"
        case instanceRetirement = "instance-retirement"
        case instanceStop = "instance-stop"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case instancechange = "instanceChange"
        case fleetrequestchange = "fleetRequestChange"
        case error = "error"
        case information = "information"
        public var description: String { return self.rawValue }
    }

    public enum ExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case notermination = "noTermination"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum ExportEnvironment: String, CustomStringConvertible, Codable {
        case citrix = "citrix"
        case vmware = "vmware"
        case microsoft = "microsoft"
        public var description: String { return self.rawValue }
    }

    public enum ExportTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum FastSnapshotRestoreStateCode: String, CustomStringConvertible, Codable {
        case enabling = "enabling"
        case optimizing = "optimizing"
        case enabled = "enabled"
        case disabling = "disabling"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public enum FleetActivityStatus: String, CustomStringConvertible, Codable {
        case error = "error"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        case fulfilled = "fulfilled"
        public var description: String { return self.rawValue }
    }

    public enum FleetCapacityReservationUsageStrategy: String, CustomStringConvertible, Codable {
        case useCapacityReservationsFirst = "use-capacity-reservations-first"
        public var description: String { return self.rawValue }
    }

    public enum FleetEventType: String, CustomStringConvertible, Codable {
        case instanceChange = "instance-change"
        case fleetChange = "fleet-change"
        case serviceError = "service-error"
        public var description: String { return self.rawValue }
    }

    public enum FleetExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case noTermination = "no-termination"
        case termination = "termination"
        public var description: String { return self.rawValue }
    }

    public enum FleetOnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public enum FleetStateCode: String, CustomStringConvertible, Codable {
        case submitted = "submitted"
        case active = "active"
        case deleted = "deleted"
        case failed = "failed"
        case deletedRunning = "deleted_running"
        case deletedTerminating = "deleted_terminating"
        case modifying = "modifying"
        public var description: String { return self.rawValue }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case request = "request"
        case maintain = "maintain"
        case instant = "instant"
        public var description: String { return self.rawValue }
    }

    public enum FlowLogsResourceType: String, CustomStringConvertible, Codable {
        case vpc = "VPC"
        case subnet = "Subnet"
        case networkinterface = "NetworkInterface"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case description = "description"
        case name = "name"
        case loadpermission = "loadPermission"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageStateCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable {
        case ipsec1 = "ipsec.1"
        public var description: String { return self.rawValue }
    }

    public enum HostRecovery: String, CustomStringConvertible, Codable {
        case on = "on"
        case off = "off"
        public var description: String { return self.rawValue }
    }

    public enum HostTenancy: String, CustomStringConvertible, Codable {
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum HttpTokensState: String, CustomStringConvertible, Codable {
        case optional = "optional"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum HypervisorType: String, CustomStringConvertible, Codable {
        case ovm = "ovm"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public enum IamInstanceProfileAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum ImageAttributeName: String, CustomStringConvertible, Codable {
        case description = "description"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case launchpermission = "launchPermission"
        case productcodes = "productCodes"
        case blockdevicemapping = "blockDeviceMapping"
        case sriovnetsupport = "sriovNetSupport"
        public var description: String { return self.rawValue }
    }

    public enum ImageState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case invalid = "invalid"
        case deregistered = "deregistered"
        case transient = "transient"
        case failed = "failed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum ImageTypeValues: String, CustomStringConvertible, Codable {
        case machine = "machine"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAttributeName: String, CustomStringConvertible, Codable {
        case instancetype = "instanceType"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case userdata = "userData"
        case disableapitermination = "disableApiTermination"
        case instanceinitiatedshutdownbehavior = "instanceInitiatedShutdownBehavior"
        case rootdevicename = "rootDeviceName"
        case blockdevicemapping = "blockDeviceMapping"
        case productcodes = "productCodes"
        case sourcedestcheck = "sourceDestCheck"
        case groupset = "groupSet"
        case ebsoptimized = "ebsOptimized"
        case sriovnetsupport = "sriovNetSupport"
        case enasupport = "enaSupport"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        public var description: String { return self.rawValue }
    }

    public enum InstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycle: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case onDemand = "on-demand"
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycleType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case scheduled = "scheduled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMatchCriteria: String, CustomStringConvertible, Codable {
        case open = "open"
        case targeted = "targeted"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataEndpointState: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataOptionsState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case applied = "applied"
        public var description: String { return self.rawValue }
    }

    public enum InstanceStateName: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case running = "running"
        case shuttingDown = "shutting-down"
        case terminated = "terminated"
        case stopping = "stopping"
        case stopped = "stopped"
        public var description: String { return self.rawValue }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case t1Micro = "t1.micro"
        case t2Nano = "t2.nano"
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        case t2Medium = "t2.medium"
        case t2Large = "t2.large"
        case t2Xlarge = "t2.xlarge"
        case t22Xlarge = "t2.2xlarge"
        case t3Nano = "t3.nano"
        case t3Micro = "t3.micro"
        case t3Small = "t3.small"
        case t3Medium = "t3.medium"
        case t3Large = "t3.large"
        case t3Xlarge = "t3.xlarge"
        case t32Xlarge = "t3.2xlarge"
        case t3aNano = "t3a.nano"
        case t3aMicro = "t3a.micro"
        case t3aSmall = "t3a.small"
        case t3aMedium = "t3a.medium"
        case t3aLarge = "t3a.large"
        case t3aXlarge = "t3a.xlarge"
        case t3a2Xlarge = "t3a.2xlarge"
        case m1Small = "m1.small"
        case m1Medium = "m1.medium"
        case m1Large = "m1.large"
        case m1Xlarge = "m1.xlarge"
        case m3Medium = "m3.medium"
        case m3Large = "m3.large"
        case m3Xlarge = "m3.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m410Xlarge = "m4.10xlarge"
        case m416Xlarge = "m4.16xlarge"
        case m2Xlarge = "m2.xlarge"
        case m22Xlarge = "m2.2xlarge"
        case m24Xlarge = "m2.4xlarge"
        case cr18Xlarge = "cr1.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r416Xlarge = "r4.16xlarge"
        case r5Large = "r5.large"
        case r5Xlarge = "r5.xlarge"
        case r52Xlarge = "r5.2xlarge"
        case r54Xlarge = "r5.4xlarge"
        case r58Xlarge = "r5.8xlarge"
        case r512Xlarge = "r5.12xlarge"
        case r516Xlarge = "r5.16xlarge"
        case r524Xlarge = "r5.24xlarge"
        case r5Metal = "r5.metal"
        case r5aLarge = "r5a.large"
        case r5aXlarge = "r5a.xlarge"
        case r5a2Xlarge = "r5a.2xlarge"
        case r5a4Xlarge = "r5a.4xlarge"
        case r5a8Xlarge = "r5a.8xlarge"
        case r5a12Xlarge = "r5a.12xlarge"
        case r5a16Xlarge = "r5a.16xlarge"
        case r5a24Xlarge = "r5a.24xlarge"
        case r5dLarge = "r5d.large"
        case r5dXlarge = "r5d.xlarge"
        case r5d2Xlarge = "r5d.2xlarge"
        case r5d4Xlarge = "r5d.4xlarge"
        case r5d8Xlarge = "r5d.8xlarge"
        case r5d12Xlarge = "r5d.12xlarge"
        case r5d16Xlarge = "r5d.16xlarge"
        case r5d24Xlarge = "r5d.24xlarge"
        case r5dMetal = "r5d.metal"
        case r5adLarge = "r5ad.large"
        case r5adXlarge = "r5ad.xlarge"
        case r5ad2Xlarge = "r5ad.2xlarge"
        case r5ad4Xlarge = "r5ad.4xlarge"
        case r5ad8Xlarge = "r5ad.8xlarge"
        case r5ad12Xlarge = "r5ad.12xlarge"
        case r5ad16Xlarge = "r5ad.16xlarge"
        case r5ad24Xlarge = "r5ad.24xlarge"
        case r6gMetal = "r6g.metal"
        case r6gMedium = "r6g.medium"
        case r6gLarge = "r6g.large"
        case r6gXlarge = "r6g.xlarge"
        case r6g2Xlarge = "r6g.2xlarge"
        case r6g4Xlarge = "r6g.4xlarge"
        case r6g8Xlarge = "r6g.8xlarge"
        case r6g12Xlarge = "r6g.12xlarge"
        case r6g16Xlarge = "r6g.16xlarge"
        case r6gdMetal = "r6gd.metal"
        case r6gdMedium = "r6gd.medium"
        case r6gdLarge = "r6gd.large"
        case r6gdXlarge = "r6gd.xlarge"
        case r6gd2Xlarge = "r6gd.2xlarge"
        case r6gd4Xlarge = "r6gd.4xlarge"
        case r6gd8Xlarge = "r6gd.8xlarge"
        case r6gd12Xlarge = "r6gd.12xlarge"
        case r6gd16Xlarge = "r6gd.16xlarge"
        case x116Xlarge = "x1.16xlarge"
        case x132Xlarge = "x1.32xlarge"
        case x1eXlarge = "x1e.xlarge"
        case x1e2Xlarge = "x1e.2xlarge"
        case x1e4Xlarge = "x1e.4xlarge"
        case x1e8Xlarge = "x1e.8xlarge"
        case x1e16Xlarge = "x1e.16xlarge"
        case x1e32Xlarge = "x1e.32xlarge"
        case i2Xlarge = "i2.xlarge"
        case i22Xlarge = "i2.2xlarge"
        case i24Xlarge = "i2.4xlarge"
        case i28Xlarge = "i2.8xlarge"
        case i3Large = "i3.large"
        case i3Xlarge = "i3.xlarge"
        case i32Xlarge = "i3.2xlarge"
        case i34Xlarge = "i3.4xlarge"
        case i38Xlarge = "i3.8xlarge"
        case i316Xlarge = "i3.16xlarge"
        case i3Metal = "i3.metal"
        case i3enLarge = "i3en.large"
        case i3enXlarge = "i3en.xlarge"
        case i3en2Xlarge = "i3en.2xlarge"
        case i3en3Xlarge = "i3en.3xlarge"
        case i3en6Xlarge = "i3en.6xlarge"
        case i3en12Xlarge = "i3en.12xlarge"
        case i3en24Xlarge = "i3en.24xlarge"
        case i3enMetal = "i3en.metal"
        case hi14Xlarge = "hi1.4xlarge"
        case hs18Xlarge = "hs1.8xlarge"
        case c1Medium = "c1.medium"
        case c1Xlarge = "c1.xlarge"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case c5Large = "c5.large"
        case c5Xlarge = "c5.xlarge"
        case c52Xlarge = "c5.2xlarge"
        case c54Xlarge = "c5.4xlarge"
        case c59Xlarge = "c5.9xlarge"
        case c512Xlarge = "c5.12xlarge"
        case c518Xlarge = "c5.18xlarge"
        case c524Xlarge = "c5.24xlarge"
        case c5Metal = "c5.metal"
        case c5aLarge = "c5a.large"
        case c5aXlarge = "c5a.xlarge"
        case c5a2Xlarge = "c5a.2xlarge"
        case c5a4Xlarge = "c5a.4xlarge"
        case c5a8Xlarge = "c5a.8xlarge"
        case c5a12Xlarge = "c5a.12xlarge"
        case c5a16Xlarge = "c5a.16xlarge"
        case c5a24Xlarge = "c5a.24xlarge"
        case c5adLarge = "c5ad.large"
        case c5adXlarge = "c5ad.xlarge"
        case c5ad2Xlarge = "c5ad.2xlarge"
        case c5ad4Xlarge = "c5ad.4xlarge"
        case c5ad8Xlarge = "c5ad.8xlarge"
        case c5ad12Xlarge = "c5ad.12xlarge"
        case c5ad16Xlarge = "c5ad.16xlarge"
        case c5ad24Xlarge = "c5ad.24xlarge"
        case c5dLarge = "c5d.large"
        case c5dXlarge = "c5d.xlarge"
        case c5d2Xlarge = "c5d.2xlarge"
        case c5d4Xlarge = "c5d.4xlarge"
        case c5d9Xlarge = "c5d.9xlarge"
        case c5d12Xlarge = "c5d.12xlarge"
        case c5d18Xlarge = "c5d.18xlarge"
        case c5d24Xlarge = "c5d.24xlarge"
        case c5dMetal = "c5d.metal"
        case c5nLarge = "c5n.large"
        case c5nXlarge = "c5n.xlarge"
        case c5n2Xlarge = "c5n.2xlarge"
        case c5n4Xlarge = "c5n.4xlarge"
        case c5n9Xlarge = "c5n.9xlarge"
        case c5n18Xlarge = "c5n.18xlarge"
        case c6gMetal = "c6g.metal"
        case c6gMedium = "c6g.medium"
        case c6gLarge = "c6g.large"
        case c6gXlarge = "c6g.xlarge"
        case c6g2Xlarge = "c6g.2xlarge"
        case c6g4Xlarge = "c6g.4xlarge"
        case c6g8Xlarge = "c6g.8xlarge"
        case c6g12Xlarge = "c6g.12xlarge"
        case c6g16Xlarge = "c6g.16xlarge"
        case c6gdMetal = "c6gd.metal"
        case c6gdMedium = "c6gd.medium"
        case c6gdLarge = "c6gd.large"
        case c6gdXlarge = "c6gd.xlarge"
        case c6gd2Xlarge = "c6gd.2xlarge"
        case c6gd4Xlarge = "c6gd.4xlarge"
        case c6gd8Xlarge = "c6gd.8xlarge"
        case c6gd12Xlarge = "c6gd.12xlarge"
        case c6gd16Xlarge = "c6gd.16xlarge"
        case cc14Xlarge = "cc1.4xlarge"
        case cc28Xlarge = "cc2.8xlarge"
        case g22Xlarge = "g2.2xlarge"
        case g28Xlarge = "g2.8xlarge"
        case g34Xlarge = "g3.4xlarge"
        case g38Xlarge = "g3.8xlarge"
        case g316Xlarge = "g3.16xlarge"
        case g3sXlarge = "g3s.xlarge"
        case g4dnXlarge = "g4dn.xlarge"
        case g4dn2Xlarge = "g4dn.2xlarge"
        case g4dn4Xlarge = "g4dn.4xlarge"
        case g4dn8Xlarge = "g4dn.8xlarge"
        case g4dn12Xlarge = "g4dn.12xlarge"
        case g4dn16Xlarge = "g4dn.16xlarge"
        case g4dnMetal = "g4dn.metal"
        case cg14Xlarge = "cg1.4xlarge"
        case p2Xlarge = "p2.xlarge"
        case p28Xlarge = "p2.8xlarge"
        case p216Xlarge = "p2.16xlarge"
        case p32Xlarge = "p3.2xlarge"
        case p38Xlarge = "p3.8xlarge"
        case p316Xlarge = "p3.16xlarge"
        case p3dn24Xlarge = "p3dn.24xlarge"
        case d2Xlarge = "d2.xlarge"
        case d22Xlarge = "d2.2xlarge"
        case d24Xlarge = "d2.4xlarge"
        case d28Xlarge = "d2.8xlarge"
        case f12Xlarge = "f1.2xlarge"
        case f14Xlarge = "f1.4xlarge"
        case f116Xlarge = "f1.16xlarge"
        case m5Large = "m5.large"
        case m5Xlarge = "m5.xlarge"
        case m52Xlarge = "m5.2xlarge"
        case m54Xlarge = "m5.4xlarge"
        case m58Xlarge = "m5.8xlarge"
        case m512Xlarge = "m5.12xlarge"
        case m516Xlarge = "m5.16xlarge"
        case m524Xlarge = "m5.24xlarge"
        case m5Metal = "m5.metal"
        case m5aLarge = "m5a.large"
        case m5aXlarge = "m5a.xlarge"
        case m5a2Xlarge = "m5a.2xlarge"
        case m5a4Xlarge = "m5a.4xlarge"
        case m5a8Xlarge = "m5a.8xlarge"
        case m5a12Xlarge = "m5a.12xlarge"
        case m5a16Xlarge = "m5a.16xlarge"
        case m5a24Xlarge = "m5a.24xlarge"
        case m5dLarge = "m5d.large"
        case m5dXlarge = "m5d.xlarge"
        case m5d2Xlarge = "m5d.2xlarge"
        case m5d4Xlarge = "m5d.4xlarge"
        case m5d8Xlarge = "m5d.8xlarge"
        case m5d12Xlarge = "m5d.12xlarge"
        case m5d16Xlarge = "m5d.16xlarge"
        case m5d24Xlarge = "m5d.24xlarge"
        case m5dMetal = "m5d.metal"
        case m5adLarge = "m5ad.large"
        case m5adXlarge = "m5ad.xlarge"
        case m5ad2Xlarge = "m5ad.2xlarge"
        case m5ad4Xlarge = "m5ad.4xlarge"
        case m5ad8Xlarge = "m5ad.8xlarge"
        case m5ad12Xlarge = "m5ad.12xlarge"
        case m5ad16Xlarge = "m5ad.16xlarge"
        case m5ad24Xlarge = "m5ad.24xlarge"
        case h12Xlarge = "h1.2xlarge"
        case h14Xlarge = "h1.4xlarge"
        case h18Xlarge = "h1.8xlarge"
        case h116Xlarge = "h1.16xlarge"
        case z1dLarge = "z1d.large"
        case z1dXlarge = "z1d.xlarge"
        case z1d2Xlarge = "z1d.2xlarge"
        case z1d3Xlarge = "z1d.3xlarge"
        case z1d6Xlarge = "z1d.6xlarge"
        case z1d12Xlarge = "z1d.12xlarge"
        case z1dMetal = "z1d.metal"
        case u6Tb1Metal = "u-6tb1.metal"
        case u9Tb1Metal = "u-9tb1.metal"
        case u12Tb1Metal = "u-12tb1.metal"
        case u18Tb1Metal = "u-18tb1.metal"
        case u24Tb1Metal = "u-24tb1.metal"
        case a1Medium = "a1.medium"
        case a1Large = "a1.large"
        case a1Xlarge = "a1.xlarge"
        case a12Xlarge = "a1.2xlarge"
        case a14Xlarge = "a1.4xlarge"
        case a1Metal = "a1.metal"
        case m5dnLarge = "m5dn.large"
        case m5dnXlarge = "m5dn.xlarge"
        case m5dn2Xlarge = "m5dn.2xlarge"
        case m5dn4Xlarge = "m5dn.4xlarge"
        case m5dn8Xlarge = "m5dn.8xlarge"
        case m5dn12Xlarge = "m5dn.12xlarge"
        case m5dn16Xlarge = "m5dn.16xlarge"
        case m5dn24Xlarge = "m5dn.24xlarge"
        case m5nLarge = "m5n.large"
        case m5nXlarge = "m5n.xlarge"
        case m5n2Xlarge = "m5n.2xlarge"
        case m5n4Xlarge = "m5n.4xlarge"
        case m5n8Xlarge = "m5n.8xlarge"
        case m5n12Xlarge = "m5n.12xlarge"
        case m5n16Xlarge = "m5n.16xlarge"
        case m5n24Xlarge = "m5n.24xlarge"
        case r5dnLarge = "r5dn.large"
        case r5dnXlarge = "r5dn.xlarge"
        case r5dn2Xlarge = "r5dn.2xlarge"
        case r5dn4Xlarge = "r5dn.4xlarge"
        case r5dn8Xlarge = "r5dn.8xlarge"
        case r5dn12Xlarge = "r5dn.12xlarge"
        case r5dn16Xlarge = "r5dn.16xlarge"
        case r5dn24Xlarge = "r5dn.24xlarge"
        case r5nLarge = "r5n.large"
        case r5nXlarge = "r5n.xlarge"
        case r5n2Xlarge = "r5n.2xlarge"
        case r5n4Xlarge = "r5n.4xlarge"
        case r5n8Xlarge = "r5n.8xlarge"
        case r5n12Xlarge = "r5n.12xlarge"
        case r5n16Xlarge = "r5n.16xlarge"
        case r5n24Xlarge = "r5n.24xlarge"
        case inf1Xlarge = "inf1.xlarge"
        case inf12Xlarge = "inf1.2xlarge"
        case inf16Xlarge = "inf1.6xlarge"
        case inf124Xlarge = "inf1.24xlarge"
        case m6gMetal = "m6g.metal"
        case m6gMedium = "m6g.medium"
        case m6gLarge = "m6g.large"
        case m6gXlarge = "m6g.xlarge"
        case m6g2Xlarge = "m6g.2xlarge"
        case m6g4Xlarge = "m6g.4xlarge"
        case m6g8Xlarge = "m6g.8xlarge"
        case m6g12Xlarge = "m6g.12xlarge"
        case m6g16Xlarge = "m6g.16xlarge"
        case m6gdMetal = "m6gd.metal"
        case m6gdMedium = "m6gd.medium"
        case m6gdLarge = "m6gd.large"
        case m6gdXlarge = "m6gd.xlarge"
        case m6gd2Xlarge = "m6gd.2xlarge"
        case m6gd4Xlarge = "m6gd.4xlarge"
        case m6gd8Xlarge = "m6gd.8xlarge"
        case m6gd12Xlarge = "m6gd.12xlarge"
        case m6gd16Xlarge = "m6gd.16xlarge"
        public var description: String { return self.rawValue }
    }

    public enum InstanceTypeHypervisor: String, CustomStringConvertible, Codable {
        case nitro = "nitro"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public enum InterfacePermissionType: String, CustomStringConvertible, Codable {
        case instanceAttach = "INSTANCE-ATTACH"
        case eipAssociate = "EIP-ASSOCIATE"
        public var description: String { return self.rawValue }
    }

    public enum Ipv6SupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateErrorCode: String, CustomStringConvertible, Codable {
        case launchtemplateiddoesnotexist = "launchTemplateIdDoesNotExist"
        case launchtemplateidmalformed = "launchTemplateIdMalformed"
        case launchtemplatenamedoesnotexist = "launchTemplateNameDoesNotExist"
        case launchtemplatenamemalformed = "launchTemplateNameMalformed"
        case launchtemplateversiondoesnotexist = "launchTemplateVersionDoesNotExist"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateHttpTokensState: String, CustomStringConvertible, Codable {
        case optional = "optional"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataEndpointState: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataOptionsState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case applied = "applied"
        public var description: String { return self.rawValue }
    }

    public enum ListingState: String, CustomStringConvertible, Codable {
        case available = "available"
        case sold = "sold"
        case cancelled = "cancelled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum ListingStatus: String, CustomStringConvertible, Codable {
        case active = "active"
        case pending = "pending"
        case cancelled = "cancelled"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case active = "active"
        case blackhole = "blackhole"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteType: String, CustomStringConvertible, Codable {
        case `static` = "static"
        case propagated = "propagated"
        public var description: String { return self.rawValue }
    }

    public enum LocationType: String, CustomStringConvertible, Codable {
        case region = "region"
        case availabilityZone = "availability-zone"
        case availabilityZoneId = "availability-zone-id"
        public var description: String { return self.rawValue }
    }

    public enum LogDestinationType: String, CustomStringConvertible, Codable {
        case cloudWatchLogs = "cloud-watch-logs"
        case s3 = "s3"
        public var description: String { return self.rawValue }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum MembershipType: String, CustomStringConvertible, Codable {
        case `static` = "static"
        case igmp = "igmp"
        public var description: String { return self.rawValue }
    }

    public enum ModifyAvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable {
        case optedIn = "opted-in"
        case notOptedIn = "not-opted-in"
        public var description: String { return self.rawValue }
    }

    public enum MonitoringState: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum MoveStatus: String, CustomStringConvertible, Codable {
        case movingtovpc = "movingToVpc"
        case restoringtoclassic = "restoringToClassic"
        public var description: String { return self.rawValue }
    }

    public enum MulticastSupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum NatGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceAttribute: String, CustomStringConvertible, Codable {
        case description = "description"
        case groupset = "groupSet"
        case sourcedestcheck = "sourceDestCheck"
        case attachment = "attachment"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceCreationType: String, CustomStringConvertible, Codable {
        case efa = "efa"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfacePermissionStateCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case granted = "granted"
        case revoking = "revoking"
        case revoked = "revoked"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceStatus: String, CustomStringConvertible, Codable {
        case available = "available"
        case associated = "associated"
        case attaching = "attaching"
        case inUse = "in-use"
        case detaching = "detaching"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceType: String, CustomStringConvertible, Codable {
        case interface = "interface"
        case natgateway = "natGateway"
        case efa = "efa"
        public var description: String { return self.rawValue }
    }

    public enum OfferingClassType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case convertible = "convertible"
        public var description: String { return self.rawValue }
    }

    public enum OfferingTypeValues: String, CustomStringConvertible, Codable {
        case heavyUtilization = "Heavy Utilization"
        case mediumUtilization = "Medium Utilization"
        case lightUtilization = "Light Utilization"
        case noUpfront = "No Upfront"
        case partialUpfront = "Partial Upfront"
        case allUpfront = "All Upfront"
        public var description: String { return self.rawValue }
    }

    public enum OnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case add = "add"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public enum PaymentOption: String, CustomStringConvertible, Codable {
        case allupfront = "AllUpfront"
        case partialupfront = "PartialUpfront"
        case noupfront = "NoUpfront"
        public var description: String { return self.rawValue }
    }

    public enum PermissionGroup: String, CustomStringConvertible, Codable {
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupStrategy: String, CustomStringConvertible, Codable {
        case cluster = "cluster"
        case partition = "partition"
        case spread = "spread"
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategy: String, CustomStringConvertible, Codable {
        case cluster = "cluster"
        case spread = "spread"
        case partition = "partition"
        public var description: String { return self.rawValue }
    }

    public enum PlatformValues: String, CustomStringConvertible, Codable {
        case windows = "windows"
        public var description: String { return self.rawValue }
    }

    public enum PrefixListState: String, CustomStringConvertible, Codable {
        case createInProgress = "create-in-progress"
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case modifyInProgress = "modify-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case restoreInProgress = "restore-in-progress"
        case restoreComplete = "restore-complete"
        case restoreFailed = "restore-failed"
        case deleteInProgress = "delete-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        public var description: String { return self.rawValue }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case all = "All"
        case service = "Service"
        case organizationunit = "OrganizationUnit"
        case account = "Account"
        case user = "User"
        case role = "Role"
        public var description: String { return self.rawValue }
    }

    public enum ProductCodeValues: String, CustomStringConvertible, Codable {
        case devpay = "devpay"
        case marketplace = "marketplace"
        public var description: String { return self.rawValue }
    }

    public enum RIProductDescription: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case linuxUnixAmazonVpc = "Linux/UNIX (Amazon VPC)"
        case windows = "Windows"
        case windowsAmazonVpc = "Windows (Amazon VPC)"
        public var description: String { return self.rawValue }
    }

    public enum RecurringChargeFrequency: String, CustomStringConvertible, Codable {
        case hourly = "Hourly"
        public var description: String { return self.rawValue }
    }

    public enum ReportInstanceReasonCodes: String, CustomStringConvertible, Codable {
        case instanceStuckInState = "instance-stuck-in-state"
        case unresponsive = "unresponsive"
        case notAcceptingCredentials = "not-accepting-credentials"
        case passwordNotAvailable = "password-not-available"
        case performanceNetwork = "performance-network"
        case performanceInstanceStore = "performance-instance-store"
        case performanceEbsVolume = "performance-ebs-volume"
        case performanceOther = "performance-other"
        case other = "other"
        public var description: String { return self.rawValue }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        public var description: String { return self.rawValue }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case paymentFailed = "payment-failed"
        case active = "active"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public enum ReservedInstanceState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case active = "active"
        case paymentFailed = "payment-failed"
        case retired = "retired"
        case queued = "queued"
        case queuedDeleted = "queued-deleted"
        public var description: String { return self.rawValue }
    }

    public enum ResetFpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case loadpermission = "loadPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResetImageAttributeName: String, CustomStringConvertible, Codable {
        case launchpermission = "launchPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case clientVpnEndpoint = "client-vpn-endpoint"
        case customerGateway = "customer-gateway"
        case dedicatedHost = "dedicated-host"
        case dhcpOptions = "dhcp-options"
        case egressOnlyInternetGateway = "egress-only-internet-gateway"
        case elasticIp = "elastic-ip"
        case elasticGpu = "elastic-gpu"
        case exportImageTask = "export-image-task"
        case exportInstanceTask = "export-instance-task"
        case fleet = "fleet"
        case fpgaImage = "fpga-image"
        case hostReservation = "host-reservation"
        case image = "image"
        case importImageTask = "import-image-task"
        case importSnapshotTask = "import-snapshot-task"
        case instance = "instance"
        case internetGateway = "internet-gateway"
        case keyPair = "key-pair"
        case launchTemplate = "launch-template"
        case localGatewayRouteTableVpcAssociation = "local-gateway-route-table-vpc-association"
        case natgateway = "natgateway"
        case networkAcl = "network-acl"
        case networkInterface = "network-interface"
        case placementGroup = "placement-group"
        case reservedInstances = "reserved-instances"
        case routeTable = "route-table"
        case securityGroup = "security-group"
        case snapshot = "snapshot"
        case spotFleetRequest = "spot-fleet-request"
        case spotInstancesRequest = "spot-instances-request"
        case subnet = "subnet"
        case trafficMirrorFilter = "traffic-mirror-filter"
        case trafficMirrorSession = "traffic-mirror-session"
        case trafficMirrorTarget = "traffic-mirror-target"
        case transitGateway = "transit-gateway"
        case transitGatewayAttachment = "transit-gateway-attachment"
        case transitGatewayMulticastDomain = "transit-gateway-multicast-domain"
        case transitGatewayRouteTable = "transit-gateway-route-table"
        case volume = "volume"
        case vpc = "vpc"
        case vpcPeeringConnection = "vpc-peering-connection"
        case vpnConnection = "vpn-connection"
        case vpnGateway = "vpn-gateway"
        case vpcFlowLog = "vpc-flow-log"
        public var description: String { return self.rawValue }
    }

    public enum RootDeviceType: String, CustomStringConvertible, Codable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum RouteOrigin: String, CustomStringConvertible, Codable {
        case createroutetable = "CreateRouteTable"
        case createroute = "CreateRoute"
        case enablevgwroutepropagation = "EnableVgwRoutePropagation"
        public var description: String { return self.rawValue }
    }

    public enum RouteState: String, CustomStringConvertible, Codable {
        case active = "active"
        case blackhole = "blackhole"
        public var description: String { return self.rawValue }
    }

    public enum RouteTableAssociationStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum RuleAction: String, CustomStringConvertible, Codable {
        case allow = "allow"
        case deny = "deny"
        public var description: String { return self.rawValue }
    }

    public enum ServiceState: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case available = "Available"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum ServiceType: String, CustomStringConvertible, Codable {
        case interface = "Interface"
        case gateway = "Gateway"
        public var description: String { return self.rawValue }
    }

    public enum ShutdownBehavior: String, CustomStringConvertible, Codable {
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotAttributeName: String, CustomStringConvertible, Codable {
        case productcodes = "productCodes"
        case createvolumepermission = "createVolumePermission"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case completed = "completed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum SpotAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        case diversified = "diversified"
        case capacityOptimized = "capacity-optimized"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceState: String, CustomStringConvertible, Codable {
        case open = "open"
        case active = "active"
        case closed = "closed"
        case cancelled = "cancelled"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceType: String, CustomStringConvertible, Codable {
        case oneTime = "one-time"
        case persistent = "persistent"
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case pendingacceptance = "PendingAcceptance"
        case pending = "Pending"
        case available = "Available"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case rejected = "Rejected"
        case failed = "Failed"
        case expired = "Expired"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case moveinprogress = "MoveInProgress"
        case invpc = "InVpc"
        case inclassic = "InClassic"
        public var description: String { return self.rawValue }
    }

    public enum StatusName: String, CustomStringConvertible, Codable {
        case reachability = "reachability"
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case passed = "passed"
        case failed = "failed"
        case insufficientData = "insufficient-data"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public enum SubnetCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum SubnetState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public enum SummaryStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        case notApplicable = "not-applicable"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public enum TelemetryStatus: String, CustomStringConvertible, Codable {
        case up = "UP"
        case down = "DOWN"
        public var description: String { return self.rawValue }
    }

    public enum Tenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum TrafficDirection: String, CustomStringConvertible, Codable {
        case ingress = "ingress"
        case egress = "egress"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorFilterRuleField: String, CustomStringConvertible, Codable {
        case destinationPortRange = "destination-port-range"
        case sourcePortRange = "source-port-range"
        case `protocol` = "protocol"
        case description = "description"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorNetworkService: String, CustomStringConvertible, Codable {
        case amazonDns = "amazon-dns"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorRuleAction: String, CustomStringConvertible, Codable {
        case accept = "accept"
        case reject = "reject"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorSessionField: String, CustomStringConvertible, Codable {
        case packetLength = "packet-length"
        case description = "description"
        case virtualNetworkId = "virtual-network-id"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorTargetType: String, CustomStringConvertible, Codable {
        case networkInterface = "network-interface"
        case networkLoadBalancer = "network-load-balancer"
        public var description: String { return self.rawValue }
    }

    public enum TrafficType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case reject = "REJECT"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentResourceType: String, CustomStringConvertible, Codable {
        case vpc = "vpc"
        case vpn = "vpn"
        case directConnectGateway = "direct-connect-gateway"
        case peering = "peering"
        case tgwPeering = "tgw-peering"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case initiating = "initiating"
        case initiatingrequest = "initiatingRequest"
        case pendingacceptance = "pendingAcceptance"
        case rollingback = "rollingBack"
        case pending = "pending"
        case available = "available"
        case modifying = "modifying"
        case deleting = "deleting"
        case deleted = "deleted"
        case failed = "failed"
        case rejected = "rejected"
        case rejecting = "rejecting"
        case failing = "failing"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulitcastDomainAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulticastDomainState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPrefixListReferenceState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case modifying = "modifying"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPropagationState: String, CustomStringConvertible, Codable {
        case enabling = "enabling"
        case enabled = "enabled"
        case disabling = "disabling"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case active = "active"
        case blackhole = "blackhole"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteTableState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteType: String, CustomStringConvertible, Codable {
        case `static` = "static"
        case propagated = "propagated"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case modifying = "modifying"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum TransportProtocol: String, CustomStringConvertible, Codable {
        case tcp = "tcp"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public enum TunnelInsideIpVersion: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum UnlimitedSupportedInstanceFamily: String, CustomStringConvertible, Codable {
        case t2 = "t2"
        case t3 = "t3"
        case t3a = "t3a"
        public var description: String { return self.rawValue }
    }

    public enum UnsuccessfulInstanceCreditSpecificationErrorCode: String, CustomStringConvertible, Codable {
        case invalidinstanceidMalformed = "InvalidInstanceID.Malformed"
        case invalidinstanceidNotfound = "InvalidInstanceID.NotFound"
        case incorrectinstancestate = "IncorrectInstanceState"
        case instancecreditspecificationNotsupported = "InstanceCreditSpecification.NotSupported"
        public var description: String { return self.rawValue }
    }

    public enum UsageClassType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case onDemand = "on-demand"
        public var description: String { return self.rawValue }
    }

    public enum VirtualizationType: String, CustomStringConvertible, Codable {
        case hvm = "hvm"
        case paravirtual = "paravirtual"
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttachmentState: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        case busy = "busy"
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttributeName: String, CustomStringConvertible, Codable {
        case autoenableio = "autoEnableIO"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum VolumeModificationState: String, CustomStringConvertible, Codable {
        case modifying = "modifying"
        case optimizing = "optimizing"
        case completed = "completed"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum VolumeState: String, CustomStringConvertible, Codable {
        case creating = "creating"
        case available = "available"
        case inUse = "in-use"
        case deleting = "deleting"
        case deleted = "deleted"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusInfoStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusName: String, CustomStringConvertible, Codable {
        case ioEnabled = "io-enabled"
        case ioPerformance = "io-performance"
        public var description: String { return self.rawValue }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case io1 = "io1"
        case io2 = "io2"
        case gp2 = "gp2"
        case sc1 = "sc1"
        case st1 = "st1"
        public var description: String { return self.rawValue }
    }

    public enum VpcAttributeName: String, CustomStringConvertible, Codable {
        case enablednssupport = "enableDnsSupport"
        case enablednshostnames = "enableDnsHostnames"
        public var description: String { return self.rawValue }
    }

    public enum VpcCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum VpcEndpointType: String, CustomStringConvertible, Codable {
        case interface = "Interface"
        case gateway = "Gateway"
        public var description: String { return self.rawValue }
    }

    public enum VpcPeeringConnectionStateReasonCode: String, CustomStringConvertible, Codable {
        case initiatingRequest = "initiating-request"
        case pendingAcceptance = "pending-acceptance"
        case active = "active"
        case deleted = "deleted"
        case rejected = "rejected"
        case failed = "failed"
        case expired = "expired"
        case provisioning = "provisioning"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public enum VpcState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public enum VpcTenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum VpnEcmpSupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public enum VpnProtocol: String, CustomStringConvertible, Codable {
        case openvpn = "openvpn"
        public var description: String { return self.rawValue }
    }

    public enum VpnState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public enum VpnStaticRouteSource: String, CustomStringConvertible, Codable {
        case `static` = "Static"
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case availabilityZone = "Availability Zone"
        case region = "Region"
        public var description: String { return self.rawValue }
    }

    //MARK: Shapes

    public struct AcceptReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .list, encoding: .list(member:"ReservedInstanceId")), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .list, encoding: .list(member:"TargetConfigurationRequest"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
        public let reservedInstanceIds: [String]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        public let targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExchangeId", location: .body(locationName: "exchangeId"), required: false, type: .string)
        ]

        /// The ID of the successful exchange.
        public let exchangeId: String?

        public init(exchangeId: String? = nil) {
            self.exchangeId = exchangeId
        }

        private enum CodingKeys: String, CodingKey {
            case exchangeId = "exchangeId"
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPeeringAttachment", location: .body(locationName: "transitGatewayPeeringAttachment"), required: false, type: .structure)
        ]

        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]

        /// The VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct AcceptVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC endpoint service.
        public let serviceId: String
        /// The IDs of one or more interface VPC endpoints.
        public let vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, serviceId: String, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct AcceptVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the interface endpoints that were not accepted, if applicable.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct AcceptVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection. You must specify this parameter in the request.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct AcceptVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]

        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct AccountAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "AttributeValues", location: .body(locationName: "attributeValueSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The name of the account attribute.
        public let attributeName: String?
        /// The values for the account attribute.
        public let attributeValues: [AccountAttributeValue]?

        public init(attributeName: String? = nil, attributeValues: [AccountAttributeValue]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValues = "attributeValueSet"
        }
    }

    public struct AccountAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", location: .body(locationName: "attributeValue"), required: false, type: .string)
        ]

        /// The value of the attribute.
        public let attributeValue: String?

        public init(attributeValue: String? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "attributeValue"
        }
    }

    public struct ActiveInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceHealth", location: .body(locationName: "instanceHealth"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string)
        ]

        /// The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
        public let instanceHealth: InstanceHealthStatus?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance type.
        public let instanceType: String?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?

        public init(instanceHealth: InstanceHealthStatus? = nil, instanceId: String? = nil, instanceType: String? = nil, spotInstanceRequestId: String? = nil) {
            self.instanceHealth = instanceHealth
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceHealth = "instanceHealth"
            case instanceId = "instanceId"
            case instanceType = "instanceType"
            case spotInstanceRequestId = "spotInstanceRequestId"
        }
    }

    public struct AddPrefixListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]

        /// The CIDR block.
        public let cidr: String
        /// A description for the entry. Constraints: Up to 255 characters in length.
        public let description: String?

        public init(cidr: String, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case description = "Description"
        }
    }

    public struct Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "CarrierIp", location: .body(locationName: "carrierIp"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIp", location: .body(locationName: "customerOwnedIp"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIpv4Pool", location: .body(locationName: "customerOwnedIpv4Pool"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkBorderGroup", location: .body(locationName: "networkBorderGroup"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceOwnerId", location: .body(locationName: "networkInterfaceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIpv4Pool", location: .body(locationName: "publicIpv4Pool"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID representing the allocation of the address for use with EC2-VPC.
        public let allocationId: String?
        /// The ID representing the association of the address with an instance in a VPC.
        public let associationId: String?
        /// The carrier IP address associated. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). 
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?
        /// The ID of the instance that the address is associated with (if any).
        public let instanceId: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. 
        public let networkBorderGroup: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the AWS account that owns the network interface.
        public let networkInterfaceOwnerId: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIpAddress: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?
        /// Any tags assigned to the Elastic IP address.
        public let tags: [Tag]?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, instanceId: String? = nil, networkBorderGroup: String? = nil, networkInterfaceId: String? = nil, networkInterfaceOwnerId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil, tags: [Tag]? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.instanceId = instanceId
            self.networkBorderGroup = networkBorderGroup
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case associationId = "associationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case domain = "domain"
            case instanceId = "instanceId"
            case networkBorderGroup = "networkBorderGroup"
            case networkInterfaceId = "networkInterfaceId"
            case networkInterfaceOwnerId = "networkInterfaceOwnerId"
            case privateIpAddress = "privateIpAddress"
            case publicIp = "publicIp"
            case publicIpv4Pool = "publicIpv4Pool"
            case tags = "tagSet"
        }
    }

    public struct AdvertiseByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct AdvertiseByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]

        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct AllocateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIpv4Pool", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkBorderGroup", required: false, type: .string), 
            AWSShapeMember(label: "PublicIpv4Pool", required: false, type: .string)
        ]

        /// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
        public let address: String?
        /// The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic. Default: If the Region supports EC2-Classic, the default is standard. Otherwise, the default is vpc.
        public let domain: DomainType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups. Use DescribeAvailabilityZones to view the network border groups.  You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an InvalidParameterCombination error. For more information, see Error Codes. 
        public let networkBorderGroup: String?
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
        public let publicIpv4Pool: String?

        public init(address: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIpv4Pool: String? = nil) {
            self.address = address
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIpv4Pool = publicIpv4Pool
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case domain = "Domain"
            case dryRun = "dryRun"
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIpv4Pool = "PublicIpv4Pool"
        }
    }

    public struct AllocateAddressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "CarrierIp", location: .body(locationName: "carrierIp"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIp", location: .body(locationName: "customerOwnedIp"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIpv4Pool", location: .body(locationName: "customerOwnedIpv4Pool"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkBorderGroup", location: .body(locationName: "networkBorderGroup"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIpv4Pool", location: .body(locationName: "publicIpv4Pool"), required: false, type: .string)
        ]

        /// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
        public let allocationId: String?
        /// The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). 
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether the Elastic IP address is for use with instances in a VPC (vpc) or instances in EC2-Classic (standard).
        public let domain: DomainType?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.
        public let networkBorderGroup: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?

        public init(allocationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil) {
            self.allocationId = allocationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case domain = "domain"
            case networkBorderGroup = "networkBorderGroup"
            case publicIp = "publicIp"
            case publicIpv4Pool = "publicIpv4Pool"
        }
    }

    public struct AllocateHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "HostRecovery", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFamily", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "Quantity", location: .body(locationName: "quantity"), required: true, type: .integer), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see  Understanding Instance Placement and Host Affinity in the Amazon EC2 User Guide for Linux Instances. Default: on 
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone in which to allocate the Dedicated Host.
        public let availabilityZone: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see  Host Recovery in the Amazon Elastic Compute Cloud User Guide. Default: off 
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only. If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?
        /// The number of Dedicated Hosts to allocate to your account with these parameters.
        public let quantity: Int
        /// The tags to apply to the Dedicated Host during creation.
        public let tagSpecifications: [TagSpecification]?

        public init(autoPlacement: AutoPlacement? = nil, availabilityZone: String, clientToken: String? = nil, hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil, quantity: Int, tagSpecifications: [TagSpecification]? = nil) {
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.clientToken = clientToken
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.quantity = quantity
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement = "autoPlacement"
            case availabilityZone = "availabilityZone"
            case clientToken = "clientToken"
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType = "instanceType"
            case quantity = "quantity"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AllocateHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostIdSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.
        public let hostIds: [String]?

        public init(hostIds: [String]? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostIdSet"
        }
    }

    public struct AllowedPrincipal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principal", location: .body(locationName: "principal"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", location: .body(locationName: "principalType"), required: false, type: .enum)
        ]

        /// The Amazon Resource Name (ARN) of the principal.
        public let principal: String?
        /// The type of principal.
        public let principalType: PrincipalType?

        public init(principal: String? = nil, principalType: PrincipalType? = nil) {
            self.principal = principal
            self.principalType = principalType
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "principal"
            case principalType = "principalType"
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.
        public let securityGroupIds: [String]
        /// The ID of the VPC in which the associated target network is located.
        public let vpcId: String

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, securityGroupIds: [String], vpcId: String) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case vpcId = "VpcId"
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIds"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The IDs of the applied security groups.
        public let securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "securityGroupIds"
        }
    }

    public struct AssignIpv6AddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]

        /// The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6AddressCount: Int? = nil, ipv6Addresses: [String]? = nil, networkInterfaceId: String) {
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignIpv6AddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignedIpv6Addresses", location: .body(locationName: "assignedIpv6Addresses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]

        /// The IPv6 addresses assigned to the network interface.
        public let assignedIpv6Addresses: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedIpv6Addresses: [String]? = nil, networkInterfaceId: String? = nil) {
            self.assignedIpv6Addresses = assignedIpv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedIpv6Addresses = "assignedIpv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignPrivateIpAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowReassignment", location: .body(locationName: "allowReassignment"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: false, type: .list, encoding: .list(member:"PrivateIpAddress")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer)
        ]

        /// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
        public let allowReassignment: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
        public let privateIpAddresses: [String]?
        /// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
        public let secondaryPrivateIpAddressCount: Int?

        public init(allowReassignment: Bool? = nil, networkInterfaceId: String, privateIpAddresses: [String]? = nil, secondaryPrivateIpAddressCount: Int? = nil) {
            self.allowReassignment = allowReassignment
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case allowReassignment = "allowReassignment"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
        }
    }

    public struct AssignPrivateIpAddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignedPrivateIpAddresses", location: .body(locationName: "assignedPrivateIpAddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]

        /// The private IP addresses assigned to the network interface.
        public let assignedPrivateIpAddresses: [AssignedPrivateIpAddress]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedPrivateIpAddresses: [AssignedPrivateIpAddress]? = nil, networkInterfaceId: String? = nil) {
            self.assignedPrivateIpAddresses = assignedPrivateIpAddresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedPrivateIpAddresses = "assignedPrivateIpAddressesSet"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignedPrivateIpAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]

        /// The private IP address assigned to the network interface.
        public let privateIpAddress: String?

        public init(privateIpAddress: String? = nil) {
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct AssociateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "AllowReassociation", location: .body(locationName: "allowReassociation"), required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string)
        ]

        /// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
        public let allocationId: String?
        /// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
        public let allowReassociation: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// [EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. 
        public let networkInterfaceId: String?
        /// [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
        public let privateIpAddress: String?
        /// The Elastic IP address to associate with the instance. This is required for EC2-Classic.
        public let publicIp: String?

        public init(allocationId: String? = nil, allowReassociation: Bool? = nil, dryRun: Bool? = nil, instanceId: String? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.allowReassociation = allowReassociation
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case allowReassociation = "allowReassociation"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddress = "privateIpAddress"
            case publicIp = "PublicIp"
        }
    }

    public struct AssociateAddressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]

        /// [EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct AssociateClientVpnTargetNetworkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet to associate with the Client VPN endpoint.
        public let subnetId: String

        public init(clientToken: String? = AssociateClientVpnTargetNetworkRequest.idempotencyToken(), clientVpnEndpointId: String, dryRun: Bool? = nil, subnetId: String) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct AssociateClientVpnTargetNetworkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The unique ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case status = "status"
        }
    }

    public struct AssociateDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dhcpOptionsId: String, dryRun: Bool? = nil, vpcId: String) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct AssociateIamInstanceProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification
        /// The ID of the instance.
        public let instanceId: String

        public init(iamInstanceProfile: IamInstanceProfileSpecification, instanceId: String) {
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "IamInstanceProfile"
            case instanceId = "InstanceId"
        }
    }

    public struct AssociateIamInstanceProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]

        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct AssociateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the subnet.
        public let subnetId: String?

        public init(dryRun: Bool? = nil, gatewayId: String? = nil, routeTableId: String, subnetId: String? = nil) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "routeTableId"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationState", location: .body(locationName: "associationState"), required: false, type: .structure)
        ]

        /// The route table association ID. This ID is required for disassociating the route table.
        public let associationId: String?
        /// The state of the association.
        public let associationState: RouteTableAssociationState?

        public init(associationId: String? = nil, associationState: RouteTableAssociationState? = nil) {
            self.associationId = associationId
            self.associationState = associationState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case associationState = "associationState"
        }
    }

    public struct AssociateSubnetCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: true, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]

        /// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
        public let ipv6CidrBlock: String
        /// The ID of your subnet.
        public let subnetId: String

        public init(ipv6CidrBlock: String, subnetId: String) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateSubnetCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateTransitGatewayMulticastDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        public let subnetIds: [String]?
        /// The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct AssociateTransitGatewayMulticastDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associations"), required: false, type: .structure)
        ]

        /// Information about the transit gateway multicast domain associations.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct AssociateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct AssociateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]

        /// The ID of the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct AssociateVpcCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean), 
            AWSShapeMember(label: "CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockNetworkBorderGroup", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Pool", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// An IPv4 CIDR block to associate with the VPC.
        public let cidrBlock: String?
        /// An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CIDR block to this location.  You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.  You can have one IPv6 CIDR block association per network border group.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The ID of the VPC.
        public let vpcId: String

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6Pool: String? = nil, vpcId: String) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6Pool = ipv6Pool
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case cidrBlock = "CidrBlock"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6Pool = "Ipv6Pool"
            case vpcId = "vpcId"
        }
    }

    public struct AssociateVpcCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlockAssociation", location: .body(locationName: "cidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case vpcId = "vpcId"
        }
    }

    public struct AssociationStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the target network association.
        public let code: AssociationStatusCode?
        /// A message about the status of the target network association, if applicable.
        public let message: String?

        public init(code: AssociationStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct AttachClassicLinkVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: true, type: .list, encoding: .list(member:"groupId")), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.
        public let groups: [String]
        /// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
        public let instanceId: String
        /// The ID of a ClassicLink-enabled VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, groups: [String], instanceId: String, vpcId: String) {
            self.dryRun = dryRun
            self.groups = groups
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case instanceId = "instanceId"
            case vpcId = "vpcId"
        }
    }

    public struct AttachClassicLinkVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct AttachInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
            case vpcId = "vpcId"
        }
    }

    public struct AttachNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: true, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]

        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(deviceIndex: Int, dryRun: Bool? = nil, instanceId: String, networkInterfaceId: String) {
            self.deviceIndex = deviceIndex
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "deviceIndex"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AttachNetworkInterfaceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]

        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(attachmentId: String? = nil) {
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
        }
    }

    public struct AttachVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let device: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
        public let volumeId: String

        public init(device: String, dryRun: Bool? = nil, instanceId: String, volumeId: String) {
            self.device = device
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct AttachVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct AttachVpnGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcAttachment", location: .body(locationName: "attachment"), required: false, type: .structure)
        ]

        /// Information about the attachment.
        public let vpcAttachment: VpcAttachment?

        public init(vpcAttachment: VpcAttachment? = nil) {
            self.vpcAttachment = vpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachment = "attachment"
        }
    }

    public struct AttributeBooleanValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .boolean)
        ]

        /// The attribute value. The valid values are true or false.
        public let value: Bool?

        public init(value: Bool? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct AttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The attribute value. The value is case-sensitive.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct AuthorizationRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessAll", location: .body(locationName: "accessAll"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidr", location: .body(locationName: "destinationCidr"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// Indicates whether the authorization rule grants access to all clients.
        public let accessAll: Bool?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the authorization rule.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
        public let destinationCidr: String?
        /// The ID of the Active Directory group to which the authorization rule grants access.
        public let groupId: String?
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(accessAll: Bool? = nil, clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, groupId: String? = nil, status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.accessAll = accessAll
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.groupId = groupId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case accessAll = "accessAll"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case description = "description"
            case destinationCidr = "destinationCidr"
            case groupId = "groupId"
            case status = "status"
        }
    }

    public struct AuthorizeClientVpnIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessGroupId", required: false, type: .string), 
            AWSShapeMember(label: "AuthorizeAllGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetNetworkCidr", required: true, type: .string)
        ]

        /// The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if AuthorizeAllGroups is false or not specified.
        public let accessGroupId: String?
        /// Indicates whether to grant access to all clients. Specify true to grant all clients who successfully establish a VPN connection access to the network. Must be set to true if AccessGroupId is not specified.
        public let authorizeAllGroups: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// A brief description of the authorization rule.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
        public let targetNetworkCidr: String

        public init(accessGroupId: String? = nil, authorizeAllGroups: Bool? = nil, clientToken: String? = AuthorizeClientVpnIngressRequest.idempotencyToken(), clientVpnEndpointId: String, description: String? = nil, dryRun: Bool? = nil, targetNetworkCidr: String) {
            self.accessGroupId = accessGroupId
            self.authorizeAllGroups = authorizeAllGroups
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.dryRun = dryRun
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case authorizeAllGroups = "AuthorizeAllGroups"
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case dryRun = "DryRun"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct AuthorizeClientVpnIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct AuthorizeSecurityGroupEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer)
        ]

        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String
        /// The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: [IpPermission]?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case groupId = "groupId"
            case ipPermissions = "ipPermissions"
            case ipProtocol = "ipProtocol"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case toPort = "toPort"
        }
    }

    public struct AuthorizeSecurityGroupIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer)
        ]

        /// The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all types. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let fromPort: Int?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The sets of IP permissions.
        public let ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). To specify icmpv6, use a set of IP permissions. [VPC only] Use -1 to specify all protocols. If you specify -1 or a protocol other than tcp, udp, or icmp, traffic on all ports is allowed, regardless of any ports you specify. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let ipProtocol: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
        public let sourceSecurityGroupName: String?
        /// [nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all codes. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Messages", location: .body(locationName: "messageSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkBorderGroup", location: .body(locationName: "networkBorderGroup"), required: false, type: .string), 
            AWSShapeMember(label: "OptInStatus", location: .body(locationName: "optInStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "ParentZoneId", location: .body(locationName: "parentZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "ParentZoneName", location: .body(locationName: "parentZoneName"), required: false, type: .string), 
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "zoneState"), required: false, type: .enum), 
            AWSShapeMember(label: "ZoneId", location: .body(locationName: "zoneId"), required: false, type: .string), 
            AWSShapeMember(label: "ZoneName", location: .body(locationName: "zoneName"), required: false, type: .string), 
            AWSShapeMember(label: "ZoneType", location: .body(locationName: "zoneType"), required: false, type: .string)
        ]

        ///  For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example us-west-2-lax-1. For Wavelength Zones, the name of the associated group, for example us-east-1-wl1-bos-wlz-1.
        public let groupName: String?
        /// Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
        public let messages: [AvailabilityZoneMessage]?
        /// The name of the network border group.
        public let networkBorderGroup: String?
        /// For Availability Zones, this parameter always has the value of opt-in-not-required. For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are opted-in, and not-opted-in.
        public let optInStatus: AvailabilityZoneOptInStatus?
        /// The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneId: String?
        /// The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneName: String?
        /// The name of the Region.
        public let regionName: String?
        /// The state of the Availability Zone, Local Zone, or Wavelength Zone.
        public let state: AvailabilityZoneState?
        /// The ID of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneId: String?
        /// The name of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneName: String?
        /// The type of zone. The valid values are availability-zone, local-zone, and wavelength-zone.
        public let zoneType: String?

        public init(groupName: String? = nil, messages: [AvailabilityZoneMessage]? = nil, networkBorderGroup: String? = nil, optInStatus: AvailabilityZoneOptInStatus? = nil, parentZoneId: String? = nil, parentZoneName: String? = nil, regionName: String? = nil, state: AvailabilityZoneState? = nil, zoneId: String? = nil, zoneName: String? = nil, zoneType: String? = nil) {
            self.groupName = groupName
            self.messages = messages
            self.networkBorderGroup = networkBorderGroup
            self.optInStatus = optInStatus
            self.parentZoneId = parentZoneId
            self.parentZoneName = parentZoneName
            self.regionName = regionName
            self.state = state
            self.zoneId = zoneId
            self.zoneName = zoneName
            self.zoneType = zoneType
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case messages = "messageSet"
            case networkBorderGroup = "networkBorderGroup"
            case optInStatus = "optInStatus"
            case parentZoneId = "parentZoneId"
            case parentZoneName = "parentZoneName"
            case regionName = "regionName"
            case state = "zoneState"
            case zoneId = "zoneId"
            case zoneName = "zoneName"
            case zoneType = "zoneType"
        }
    }

    public struct AvailabilityZoneMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The message about the Availability Zone, Local Zone, or Wavelength Zone.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
        }
    }

    public struct AvailableCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableInstanceCapacity", location: .body(locationName: "availableInstanceCapacity"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AvailableVCpus", location: .body(locationName: "availableVCpus"), required: false, type: .integer)
        ]

        /// The number of instances that can be launched onto the Dedicated Host depending on the host's available capacity. For Dedicated Hosts that support multiple instance types, this parameter represents the number of instances for each instance size that is supported on the host.
        public let availableInstanceCapacity: [InstanceCapacity]?
        /// The number of vCPUs available for launching instances onto the Dedicated Host.
        public let availableVCpus: Int?

        public init(availableInstanceCapacity: [InstanceCapacity]? = nil, availableVCpus: Int? = nil) {
            self.availableInstanceCapacity = availableInstanceCapacity
            self.availableVCpus = availableVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCapacity = "availableInstanceCapacity"
            case availableVCpus = "availableVCpus"
        }
    }

    public struct BlobAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .blob)
        ]

        public let value: Data?

        public init(value: Data? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsBlockDevice?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct BundleInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "Storage", required: true, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to bundle. Type: String Default: None Required: Yes
        public let instanceId: String
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let storage: Storage

        public init(dryRun: Bool? = nil, instanceId: String, storage: Storage) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.storage = storage
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case storage = "Storage"
        }
    }

    public struct BundleInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]

        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct BundleTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", location: .body(locationName: "bundleId"), required: false, type: .string), 
            AWSShapeMember(label: "BundleTaskError", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Storage", location: .body(locationName: "storage"), required: false, type: .structure), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp)
        ]

        /// The ID of the bundle task.
        public let bundleId: String?
        /// If the task fails, a description of the error.
        public let bundleTaskError: BundleTaskError?
        /// The ID of the instance associated with this bundle task.
        public let instanceId: String?
        /// The level of task completion, as a percent (for example, 20%).
        public let progress: String?
        /// The time this task started.
        public let startTime: TimeStamp?
        /// The state of the task.
        public let state: BundleTaskState?
        /// The Amazon S3 storage locations.
        public let storage: Storage?
        /// The time of the most recent update for the task.
        public let updateTime: TimeStamp?

        public init(bundleId: String? = nil, bundleTaskError: BundleTaskError? = nil, instanceId: String? = nil, progress: String? = nil, startTime: TimeStamp? = nil, state: BundleTaskState? = nil, storage: Storage? = nil, updateTime: TimeStamp? = nil) {
            self.bundleId = bundleId
            self.bundleTaskError = bundleTaskError
            self.instanceId = instanceId
            self.progress = progress
            self.startTime = startTime
            self.state = state
            self.storage = storage
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "bundleId"
            case bundleTaskError = "error"
            case instanceId = "instanceId"
            case progress = "progress"
            case startTime = "startTime"
            case state = "state"
            case storage = "storage"
            case updateTime = "updateTime"
        }
    }

    public struct BundleTaskError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ByoipCidr: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", location: .body(locationName: "cidr"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The address range, in CIDR notation.
        public let cidr: String?
        /// The description of the address range.
        public let description: String?
        /// The state of the address pool.
        public let state: ByoipCidrState?
        /// Upon success, contains the ID of the address pool. Otherwise, contains an error message.
        public let statusMessage: String?

        public init(cidr: String? = nil, description: String? = nil, state: ByoipCidrState? = nil, statusMessage: String? = nil) {
            self.cidr = cidr
            self.description = description
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case description = "description"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct CancelBundleTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The ID of the bundle task.
        public let bundleId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleId: String, dryRun: Bool? = nil) {
            self.bundleId = bundleId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
            case dryRun = "dryRun"
        }
    }

    public struct CancelBundleTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]

        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct CancelCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the Capacity Reservation to be cancelled.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(capacityReservationId: String, dryRun: Bool? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
        }
    }

    public struct CancelCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CancelConversionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReasonMessage", location: .body(locationName: "reasonMessage"), required: false, type: .string)
        ]

        /// The ID of the conversion task.
        public let conversionTaskId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The reason for canceling the conversion task.
        public let reasonMessage: String?

        public init(conversionTaskId: String, dryRun: Bool? = nil, reasonMessage: String? = nil) {
            self.conversionTaskId = conversionTaskId
            self.dryRun = dryRun
            self.reasonMessage = reasonMessage
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId = "conversionTaskId"
            case dryRun = "dryRun"
            case reasonMessage = "reasonMessage"
        }
    }

    public struct CancelExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: true, type: .string)
        ]

        /// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
        public let exportTaskId: String

        public init(exportTaskId: String) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "exportTaskId"
        }
    }

    public struct CancelImportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelReason", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ImportTaskId", required: false, type: .string)
        ]

        /// The reason for canceling the task.
        public let cancelReason: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the import image or import snapshot task to be canceled.
        public let importTaskId: String?

        public init(cancelReason: String? = nil, dryRun: Bool? = nil, importTaskId: String? = nil) {
            self.cancelReason = cancelReason
            self.dryRun = dryRun
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case cancelReason = "CancelReason"
            case dryRun = "DryRun"
            case importTaskId = "ImportTaskId"
        }
    }

    public struct CancelImportTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string)
        ]

        /// The ID of the task being canceled.
        public let importTaskId: String?
        /// The current state of the task being canceled.
        public let previousState: String?
        /// The current state of the task being canceled.
        public let state: String?

        public init(importTaskId: String? = nil, previousState: String? = nil, state: String? = nil) {
            self.importTaskId = importTaskId
            self.previousState = previousState
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "importTaskId"
            case previousState = "previousState"
            case state = "state"
        }
    }

    public struct CancelReservedInstancesListingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: true, type: .string)
        ]

        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String

        public init(reservedInstancesListingId: String) {
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct CancelReservedInstancesListingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The Reserved Instance listing.
        public let reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CancelSpotFleetRequestsError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: CancelBatchErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: CancelBatchErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CancelSpotFleetRequestsErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string)
        ]

        /// The error.
        public let error: CancelSpotFleetRequestsError?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(error: CancelSpotFleetRequestsError? = nil, spotFleetRequestId: String? = nil) {
            self.error = error
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CancelSpotFleetRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TerminateInstances", location: .body(locationName: "terminateInstances"), required: true, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Spot Fleet requests.
        public let spotFleetRequestIds: [String]
        /// Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
        public let terminateInstances: Bool

        public init(dryRun: Bool? = nil, spotFleetRequestIds: [String], terminateInstances: Bool) {
            self.dryRun = dryRun
            self.spotFleetRequestIds = spotFleetRequestIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotFleetRequestIds = "spotFleetRequestId"
            case terminateInstances = "terminateInstances"
        }
    }

    public struct CancelSpotFleetRequestsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulFleetRequests", location: .body(locationName: "successfulFleetRequestSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UnsuccessfulFleetRequests", location: .body(locationName: "unsuccessfulFleetRequestSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Spot Fleet requests that are successfully canceled.
        public let successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]?
        /// Information about the Spot Fleet requests that are not successfully canceled.
        public let unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]?

        public init(successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]? = nil, unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]? = nil) {
            self.successfulFleetRequests = successfulFleetRequests
            self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetRequests = "successfulFleetRequestSet"
            case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
        }
    }

    public struct CancelSpotFleetRequestsSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentSpotFleetRequestState", location: .body(locationName: "currentSpotFleetRequestState"), required: false, type: .enum), 
            AWSShapeMember(label: "PreviousSpotFleetRequestState", location: .body(locationName: "previousSpotFleetRequestState"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string)
        ]

        /// The current state of the Spot Fleet request.
        public let currentSpotFleetRequestState: BatchState?
        /// The previous state of the Spot Fleet request.
        public let previousSpotFleetRequestState: BatchState?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(currentSpotFleetRequestState: BatchState? = nil, previousSpotFleetRequestState: BatchState? = nil, spotFleetRequestId: String? = nil) {
            self.currentSpotFleetRequestState = currentSpotFleetRequestState
            self.previousSpotFleetRequestState = previousSpotFleetRequestState
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case currentSpotFleetRequestState = "currentSpotFleetRequestState"
            case previousSpotFleetRequestState = "previousSpotFleetRequestState"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CancelSpotInstanceRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: true, type: .list, encoding: .list(member:"SpotInstanceRequestId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more Spot Instance request IDs.
        public let spotInstanceRequestIds: [String]

        public init(dryRun: Bool? = nil, spotInstanceRequestIds: [String]) {
            self.dryRun = dryRun
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct CancelSpotInstanceRequestsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelledSpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more Spot Instance requests.
        public let cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]?

        public init(cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]? = nil) {
            self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case cancelledSpotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct CancelledSpotInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot Instance request.
        public let state: CancelSpotInstanceRequestState?

        public init(spotInstanceRequestId: String? = nil, state: CancelSpotInstanceRequestState? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "spotInstanceRequestId"
            case state = "state"
        }
    }

    public struct CapacityReservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", location: .body(locationName: "availabilityZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "CapacityReservationArn", location: .body(locationName: "capacityReservationArn"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "EndDate", location: .body(locationName: "endDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateType", location: .body(locationName: "endDateType"), required: false, type: .enum), 
            AWSShapeMember(label: "EphemeralStorage", location: .body(locationName: "ephemeralStorage"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceMatchCriteria", location: .body(locationName: "instanceMatchCriteria"), required: false, type: .enum), 
            AWSShapeMember(label: "InstancePlatform", location: .body(locationName: "instancePlatform"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "TotalInstanceCount", location: .body(locationName: "totalInstanceCount"), required: false, type: .integer)
        ]

        /// The Availability Zone in which the capacity is reserved.
        public let availabilityZone: String?
        /// The Availability Zone ID of the Capacity Reservation.
        public let availabilityZoneId: String?
        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// The Amazon Resource Name (ARN) of the Capacity Reservation.
        public let capacityReservationArn: String?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The date and time at which the Capacity Reservation was created.
        public let createDate: TimeStamp?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.
        public let endDate: TimeStamp?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.  
        public let endDateType: EndDateType?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.   
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// The ID of the AWS account that owns the Capacity Reservation.
        public let ownerId: String?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.  
        public let state: CapacityReservationState?
        /// Any tags assigned to the Capacity Reservation.
        public let tags: [Tag]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
        public let tenancy: CapacityReservationTenancy?
        /// The total number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableInstanceCount: Int? = nil, capacityReservationArn: String? = nil, capacityReservationId: String? = nil, createDate: TimeStamp? = nil, ebsOptimized: Bool? = nil, endDate: TimeStamp? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: String? = nil, ownerId: String? = nil, state: CapacityReservationState? = nil, tags: [Tag]? = nil, tenancy: CapacityReservationTenancy? = nil, totalInstanceCount: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableInstanceCount = availableInstanceCount
            self.capacityReservationArn = capacityReservationArn
            self.capacityReservationId = capacityReservationId
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableInstanceCount = "availableInstanceCount"
            case capacityReservationArn = "capacityReservationArn"
            case capacityReservationId = "capacityReservationId"
            case createDate = "createDate"
            case ebsOptimized = "ebsOptimized"
            case endDate = "endDate"
            case endDateType = "endDateType"
            case ephemeralStorage = "ephemeralStorage"
            case instanceMatchCriteria = "instanceMatchCriteria"
            case instancePlatform = "instancePlatform"
            case instanceType = "instanceType"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case tenancy = "tenancy"
            case totalInstanceCount = "totalInstanceCount"
        }
    }

    public struct CapacityReservationGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupArn", location: .body(locationName: "groupArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string)
        ]

        /// The ARN of the resource group.
        public let groupArn: String?
        /// The ID of the AWS account that owns the resource group.
        public let ownerId: String?

        public init(groupArn: String? = nil, ownerId: String? = nil) {
            self.groupArn = groupArn
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case groupArn = "groupArn"
            case ownerId = "ownerId"
        }
    }

    public struct CapacityReservationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UsageStrategy", location: .body(locationName: "usageStrategy"), required: false, type: .enum)
        ]

        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy = "usageStrategy"
        }
    }

    public struct CapacityReservationOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UsageStrategy", required: false, type: .enum)
        ]

        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy = "UsageStrategy"
        }
    }

    public struct CapacityReservationSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", required: false, type: .structure)
        ]

        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct CapacityReservationSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", location: .body(locationName: "capacityReservationPreference"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", location: .body(locationName: "capacityReservationTarget"), required: false, type: .structure)
        ]

        /// Describes the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the targeted Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct CapacityReservationTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationResourceGroupArn", required: false, type: .string)
        ]

        /// The ID of the Capacity Reservation in which to run the instance.
        public let capacityReservationId: String?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case capacityReservationResourceGroupArn = "CapacityReservationResourceGroupArn"
        }
    }

    public struct CapacityReservationTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationResourceGroupArn", location: .body(locationName: "capacityReservationResourceGroupArn"), required: false, type: .string)
        ]

        /// The ID of the targeted Capacity Reservation.
        public let capacityReservationId: String?
        /// The ARN of the targeted Capacity Reservation group.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "capacityReservationId"
            case capacityReservationResourceGroupArn = "capacityReservationResourceGroupArn"
        }
    }

    public struct CarrierGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayId", location: .body(locationName: "carrierGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The AWS account ID of the owner of the carrier gateway.
        public let ownerId: String?
        /// The state of the carrier gateway.
        public let state: CarrierGatewayState?
        /// The tags assigned to the carrier gateway.
        public let tags: [Tag]?
        /// The ID of the VPC associated with the carrier gateway.
        public let vpcId: String?

        public init(carrierGatewayId: String? = nil, ownerId: String? = nil, state: CarrierGatewayState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "carrierGatewayId"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct CertificateAuthentication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRootCertificateChain", location: .body(locationName: "clientRootCertificateChain"), required: false, type: .string)
        ]

        /// The ARN of the client certificate. 
        public let clientRootCertificateChain: String?

        public init(clientRootCertificateChain: String? = nil) {
            self.clientRootCertificateChain = clientRootCertificateChain
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChain = "clientRootCertificateChain"
        }
    }

    public struct CertificateAuthenticationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRootCertificateChainArn", required: false, type: .string)
        ]

        /// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).
        public let clientRootCertificateChainArn: String?

        public init(clientRootCertificateChainArn: String? = nil) {
            self.clientRootCertificateChainArn = clientRootCertificateChainArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChainArn = "ClientRootCertificateChainArn"
        }
    }

    public struct CidrAuthorizationContext: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "Signature", required: true, type: .string)
        ]

        /// The plain-text authorization message for the prefix and account.
        public let message: String
        /// The signed authorization message for the prefix and account.
        public let signature: String

        public init(message: String, signature: String) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct CidrBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]

        /// The IPv4 CIDR block.
        public let cidrBlock: String?

        public init(cidrBlock: String? = nil) {
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
        }
    }

    public struct ClassicLinkDnsSupport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLinkDnsSupported", location: .body(locationName: "classicLinkDnsSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Indicates whether ClassicLink DNS support is enabled for the VPC.
        public let classicLinkDnsSupported: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkDnsSupported: Bool? = nil, vpcId: String? = nil) {
            self.classicLinkDnsSupported = classicLinkDnsSupported
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkDnsSupported = "classicLinkDnsSupported"
            case vpcId = "vpcId"
        }
    }

    public struct ClassicLinkInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// A list of security groups.
        public let groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Any tags assigned to the instance.
        public let tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(groups: [GroupIdentifier]? = nil, instanceId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.groups = groups
            self.instanceId = instanceId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instanceId = "instanceId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct ClassicLoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The name of the load balancer.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ClassicLoadBalancersConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLoadBalancers", location: .body(locationName: "classicLoadBalancers"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more Classic Load Balancers.
        public let classicLoadBalancers: [ClassicLoadBalancer]?

        public init(classicLoadBalancers: [ClassicLoadBalancer]? = nil) {
            self.classicLoadBalancers = classicLoadBalancers
        }

        public func validate(name: String) throws {
            try validate(self.classicLoadBalancers, name:"classicLoadBalancers", parent: name, max: 5)
            try validate(self.classicLoadBalancers, name:"classicLoadBalancers", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancers = "classicLoadBalancers"
        }
    }

    public struct ClientCertificateRevocationListStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the client certificate revocation list.
        public let code: ClientCertificateRevocationListStatusCode?
        /// A message about the status of the client certificate revocation list, if applicable.
        public let message: String?

        public init(code: ClientCertificateRevocationListStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "UploadEnd", required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadSize", required: false, type: .double), 
            AWSShapeMember(label: "UploadStart", required: false, type: .timestamp)
        ]

        /// A user-defined comment about the disk upload.
        public let comment: String?
        /// The time that the disk upload ends.
        public let uploadEnd: TimeStamp?
        /// The size of the uploaded disk image, in GiB.
        public let uploadSize: Double?
        /// The time that the disk upload starts.
        public let uploadStart: TimeStamp?

        public init(comment: String? = nil, uploadEnd: TimeStamp? = nil, uploadSize: Double? = nil, uploadStart: TimeStamp? = nil) {
            self.comment = comment
            self.uploadEnd = uploadEnd
            self.uploadSize = uploadSize
            self.uploadStart = uploadStart
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case uploadEnd = "UploadEnd"
            case uploadSize = "UploadSize"
            case uploadStart = "UploadStart"
        }
    }

    public struct ClientVpnAuthentication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveDirectory", location: .body(locationName: "activeDirectory"), required: false, type: .structure), 
            AWSShapeMember(label: "FederatedAuthentication", location: .body(locationName: "federatedAuthentication"), required: false, type: .structure), 
            AWSShapeMember(label: "MutualAuthentication", location: .body(locationName: "mutualAuthentication"), required: false, type: .structure), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// Information about the Active Directory, if applicable.
        public let activeDirectory: DirectoryServiceAuthentication?
        /// Information about the IAM SAML identity provider, if applicable.
        public let federatedAuthentication: FederatedAuthentication?
        /// Information about the authentication certificates, if applicable.
        public let mutualAuthentication: CertificateAuthentication?
        /// The authentication type used.
        public let `type`: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthentication? = nil, federatedAuthentication: FederatedAuthentication? = nil, mutualAuthentication: CertificateAuthentication? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory = "activeDirectory"
            case federatedAuthentication = "federatedAuthentication"
            case mutualAuthentication = "mutualAuthentication"
            case `type` = "type"
        }
    }

    public struct ClientVpnAuthenticationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveDirectory", required: false, type: .structure), 
            AWSShapeMember(label: "FederatedAuthentication", required: false, type: .structure), 
            AWSShapeMember(label: "MutualAuthentication", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]

        /// Information about the Active Directory to be used, if applicable. You must provide this information if Type is directory-service-authentication.
        public let activeDirectory: DirectoryServiceAuthenticationRequest?
        /// Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if Type is federated-authentication.
        public let federatedAuthentication: FederatedAuthenticationRequest?
        /// Information about the authentication certificates to be used, if applicable. You must provide this information if Type is certificate-authentication.
        public let mutualAuthentication: CertificateAuthenticationRequest?
        /// The type of client authentication to be used.
        public let `type`: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthenticationRequest? = nil, federatedAuthentication: FederatedAuthenticationRequest? = nil, mutualAuthentication: CertificateAuthenticationRequest? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory = "ActiveDirectory"
            case federatedAuthentication = "FederatedAuthentication"
            case mutualAuthentication = "MutualAuthentication"
            case `type` = "Type"
        }
    }

    public struct ClientVpnAuthorizationRuleStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the authorization rule.
        public let code: ClientVpnAuthorizationRuleStatusCode?
        /// A message about the status of the authorization rule, if applicable.
        public let message: String?

        public init(code: ClientVpnAuthorizationRuleStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientIp", location: .body(locationName: "clientIp"), required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "CommonName", location: .body(locationName: "commonName"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionEndTime", location: .body(locationName: "connectionEndTime"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionEstablishedTime", location: .body(locationName: "connectionEstablishedTime"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "EgressBytes", location: .body(locationName: "egressBytes"), required: false, type: .string), 
            AWSShapeMember(label: "EgressPackets", location: .body(locationName: "egressPackets"), required: false, type: .string), 
            AWSShapeMember(label: "IngressBytes", location: .body(locationName: "ingressBytes"), required: false, type: .string), 
            AWSShapeMember(label: "IngressPackets", location: .body(locationName: "ingressPackets"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .string), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// The IP address of the client.
        public let clientIp: String?
        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String?
        /// The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name.
        public let commonName: String?
        /// The date and time the client connection was terminated.
        public let connectionEndTime: String?
        /// The date and time the client connection was established.
        public let connectionEstablishedTime: String?
        /// The ID of the client connection.
        public let connectionId: String?
        /// The number of bytes received by the client.
        public let egressBytes: String?
        /// The number of packets received by the client.
        public let egressPackets: String?
        /// The number of bytes sent by the client.
        public let ingressBytes: String?
        /// The number of packets sent by the client.
        public let ingressPackets: String?
        /// The current state of the client connection.
        public let status: ClientVpnConnectionStatus?
        /// The current date and time.
        public let timestamp: String?
        /// The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.
        public let username: String?

        public init(clientIp: String? = nil, clientVpnEndpointId: String? = nil, commonName: String? = nil, connectionEndTime: String? = nil, connectionEstablishedTime: String? = nil, connectionId: String? = nil, egressBytes: String? = nil, egressPackets: String? = nil, ingressBytes: String? = nil, ingressPackets: String? = nil, status: ClientVpnConnectionStatus? = nil, timestamp: String? = nil, username: String? = nil) {
            self.clientIp = clientIp
            self.clientVpnEndpointId = clientVpnEndpointId
            self.commonName = commonName
            self.connectionEndTime = connectionEndTime
            self.connectionEstablishedTime = connectionEstablishedTime
            self.connectionId = connectionId
            self.egressBytes = egressBytes
            self.egressPackets = egressPackets
            self.ingressBytes = ingressBytes
            self.ingressPackets = ingressPackets
            self.status = status
            self.timestamp = timestamp
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientIp = "clientIp"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case commonName = "commonName"
            case connectionEndTime = "connectionEndTime"
            case connectionEstablishedTime = "connectionEstablishedTime"
            case connectionId = "connectionId"
            case egressBytes = "egressBytes"
            case egressPackets = "egressPackets"
            case ingressBytes = "ingressBytes"
            case ingressPackets = "ingressPackets"
            case status = "status"
            case timestamp = "timestamp"
            case username = "username"
        }
    }

    public struct ClientVpnConnectionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the client connection.
        public let code: ClientVpnConnectionStatusCode?
        /// A message about the status of the client connection, if applicable.
        public let message: String?

        public init(code: ClientVpnConnectionStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationOptions", location: .body(locationName: "authenticationOptions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ClientCidrBlock", location: .body(locationName: "clientCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionLogOptions", location: .body(locationName: "connectionLogOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .string), 
            AWSShapeMember(label: "DeletionTime", location: .body(locationName: "deletionTime"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "DnsServers", location: .body(locationName: "dnsServer"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServerCertificateArn", location: .body(locationName: "serverCertificateArn"), required: false, type: .string), 
            AWSShapeMember(label: "SplitTunnel", location: .body(locationName: "splitTunnel"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransportProtocol", location: .body(locationName: "transportProtocol"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "VpnPort", location: .body(locationName: "vpnPort"), required: false, type: .integer), 
            AWSShapeMember(label: "VpnProtocol", location: .body(locationName: "vpnProtocol"), required: false, type: .enum)
        ]

        /// Information about the authentication method used by the Client VPN endpoint.
        public let authenticationOptions: [ClientVpnAuthentication]?
        /// The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
        public let clientCidrBlock: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Information about the client connection logging options for the Client VPN endpoint.
        public let connectionLogOptions: ConnectionLogResponseOptions?
        /// The date and time the Client VPN endpoint was created.
        public let creationTime: String?
        /// The date and time the Client VPN endpoint was deleted, if applicable.
        public let deletionTime: String?
        /// A brief description of the endpoint.
        public let description: String?
        /// The DNS name to be used by clients when connecting to the Client VPN endpoint.
        public let dnsName: String?
        /// Information about the DNS servers to be used for DNS resolution. 
        public let dnsServers: [String]?
        /// The IDs of the security groups for the target network.
        public let securityGroupIds: [String]?
        /// The ARN of the server certificate.
        public let serverCertificateArn: String?
        /// Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?
        /// Any tags assigned to the Client VPN endpoint.
        public let tags: [Tag]?
        /// The transport protocol used by the Client VPN endpoint.
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The port number for the Client VPN endpoint.
        public let vpnPort: Int?
        /// The protocol used by the VPN session.
        public let vpnProtocol: VpnProtocol?

        public init(authenticationOptions: [ClientVpnAuthentication]? = nil, clientCidrBlock: String? = nil, clientVpnEndpointId: String? = nil, connectionLogOptions: ConnectionLogResponseOptions? = nil, creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, dnsName: String? = nil, dnsServers: [String]? = nil, securityGroupIds: [String]? = nil, serverCertificateArn: String? = nil, splitTunnel: Bool? = nil, status: ClientVpnEndpointStatus? = nil, tags: [Tag]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil, vpnProtocol: VpnProtocol? = nil) {
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.dnsName = dnsName
            self.dnsServers = dnsServers
            self.securityGroupIds = securityGroupIds
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.status = status
            self.tags = tags
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
            self.vpnProtocol = vpnProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationOptions = "authenticationOptions"
            case clientCidrBlock = "clientCidrBlock"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case connectionLogOptions = "connectionLogOptions"
            case creationTime = "creationTime"
            case deletionTime = "deletionTime"
            case description = "description"
            case dnsName = "dnsName"
            case dnsServers = "dnsServer"
            case securityGroupIds = "securityGroupIdSet"
            case serverCertificateArn = "serverCertificateArn"
            case splitTunnel = "splitTunnel"
            case status = "status"
            case tags = "tagSet"
            case transportProtocol = "transportProtocol"
            case vpcId = "vpcId"
            case vpnPort = "vpnPort"
            case vpnProtocol = "vpnProtocol"
        }
    }

    public struct ClientVpnEndpointStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the Client VPN endpoint. Possible states include:    pending-associate - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.    available - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.    deleting - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.    deleted - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.  
        public let code: ClientVpnEndpointStatusCode?
        /// A message about the status of the Client VPN endpoint.
        public let message: String?

        public init(code: ClientVpnEndpointStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidr", location: .body(locationName: "destinationCidr"), required: false, type: .string), 
            AWSShapeMember(label: "Origin", location: .body(locationName: "origin"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetSubnet", location: .body(locationName: "targetSubnet"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint with which the route is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination.
        public let destinationCidr: String?
        /// Indicates how the route was associated with the Client VPN endpoint. associate indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. add-route indicates that the route was manually added using the CreateClientVpnRoute action.
        public let origin: String?
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?
        /// The ID of the subnet through which traffic is routed.
        public let targetSubnet: String?
        /// The route type.
        public let `type`: String?

        public init(clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, origin: String? = nil, status: ClientVpnRouteStatus? = nil, targetSubnet: String? = nil, type: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.origin = origin
            self.status = status
            self.targetSubnet = targetSubnet
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case description = "description"
            case destinationCidr = "destinationCidr"
            case origin = "origin"
            case status = "status"
            case targetSubnet = "targetSubnet"
            case `type` = "type"
        }
    }

    public struct ClientVpnRouteStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state of the Client VPN endpoint route.
        public let code: ClientVpnRouteStatusCode?
        /// A message about the status of the Client VPN endpoint route, if applicable.
        public let message: String?

        public init(code: ClientVpnRouteStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CoipAddressUsage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "AwsAccountId", location: .body(locationName: "awsAccountId"), required: false, type: .string), 
            AWSShapeMember(label: "AwsService", location: .body(locationName: "awsService"), required: false, type: .string), 
            AWSShapeMember(label: "CoIp", location: .body(locationName: "coIp"), required: false, type: .string)
        ]

        /// The allocation ID of the address.
        public let allocationId: String?
        /// The AWS account ID.
        public let awsAccountId: String?
        /// The AWS service.
        public let awsService: String?
        /// The customer-owned IP address.
        public let coIp: String?

        public init(allocationId: String? = nil, awsAccountId: String? = nil, awsService: String? = nil, coIp: String? = nil) {
            self.allocationId = allocationId
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.coIp = coIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case awsAccountId = "awsAccountId"
            case awsService = "awsService"
            case coIp = "coIp"
        }
    }

    public struct CoipPool: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "PoolArn", location: .body(locationName: "poolArn"), required: false, type: .string), 
            AWSShapeMember(label: "PoolCidrs", location: .body(locationName: "poolCidrSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PoolId", location: .body(locationName: "poolId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ARN of the address pool.
        public let poolArn: String?
        /// The address ranges of the address pool.
        public let poolCidrs: [String]?
        /// The ID of the address pool.
        public let poolId: String?
        /// The tags.
        public let tags: [Tag]?

        public init(localGatewayRouteTableId: String? = nil, poolArn: String? = nil, poolCidrs: [String]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.poolArn = poolArn
            self.poolCidrs = poolCidrs
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case poolArn = "poolArn"
            case poolCidrs = "poolCidrSet"
            case poolId = "poolId"
            case tags = "tagSet"
        }
    }

    public struct ConfirmProductInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ProductCode", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The product code. This must be a product code that you own.
        public let productCode: String

        public init(dryRun: Bool? = nil, instanceId: String, productCode: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case productCode = "ProductCode"
        }
    }

    public struct ConfirmProductInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.
        public let ownerId: String?
        /// The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
        public let `return`: Bool?

        public init(ownerId: String? = nil, return: Bool? = nil) {
            self.ownerId = ownerId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case `return` = "return"
        }
    }

    public struct ConnectionLogOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudwatchLogGroup", required: false, type: .string), 
            AWSShapeMember(label: "CloudwatchLogStream", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// The name of the CloudWatch Logs log group. Required if connection logging is enabled.
        public let cloudwatchLogGroup: String?
        /// The name of the CloudWatch Logs log stream to which the connection data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether connection logging is enabled.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionLogResponseOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudwatchLogGroup", required: false, type: .string), 
            AWSShapeMember(label: "CloudwatchLogStream", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
        public let cloudwatchLogGroup: String?
        /// The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether client connection logging is enabled for the Client VPN endpoint.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionNotification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionEvents", location: .body(locationName: "connectionEvents"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ConnectionNotificationArn", location: .body(locationName: "connectionNotificationArn"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationId", location: .body(locationName: "connectionNotificationId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationState", location: .body(locationName: "connectionNotificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "ConnectionNotificationType", location: .body(locationName: "connectionNotificationType"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string)
        ]

        /// The events for the notification. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: [String]?
        /// The ARN of the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// The state of the notification.
        public let connectionNotificationState: ConnectionNotificationState?
        /// The type of notification.
        public let connectionNotificationType: ConnectionNotificationType?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String? = nil, connectionNotificationState: ConnectionNotificationState? = nil, connectionNotificationType: ConnectionNotificationType? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.connectionNotificationState = connectionNotificationState
            self.connectionNotificationType = connectionNotificationType
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "connectionEvents"
            case connectionNotificationArn = "connectionNotificationArn"
            case connectionNotificationId = "connectionNotificationId"
            case connectionNotificationState = "connectionNotificationState"
            case connectionNotificationType = "connectionNotificationType"
            case serviceId = "serviceId"
            case vpcEndpointId = "vpcEndpointId"
        }
    }

    public struct ConversionTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .string), 
            AWSShapeMember(label: "ImportInstance", location: .body(locationName: "importInstance"), required: false, type: .structure), 
            AWSShapeMember(label: "ImportVolume", location: .body(locationName: "importVolume"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the conversion task.
        public let conversionTaskId: String?
        /// The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        public let expirationTime: String?
        /// If the task is for importing an instance, this contains information about the import instance task.
        public let importInstance: ImportInstanceTaskDetails?
        /// If the task is for importing a volume, this contains information about the import volume task.
        public let importVolume: ImportVolumeTaskDetails?
        /// The state of the conversion task.
        public let state: ConversionTaskState?
        /// The status message related to the conversion task.
        public let statusMessage: String?
        /// Any tags assigned to the task.
        public let tags: [Tag]?

        public init(conversionTaskId: String? = nil, expirationTime: String? = nil, importInstance: ImportInstanceTaskDetails? = nil, importVolume: ImportVolumeTaskDetails? = nil, state: ConversionTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.conversionTaskId = conversionTaskId
            self.expirationTime = expirationTime
            self.importInstance = importInstance
            self.importVolume = importVolume
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId = "conversionTaskId"
            case expirationTime = "expirationTime"
            case importInstance = "importInstance"
            case importVolume = "importVolume"
            case state = "state"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct CopyFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SourceFpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The description for the new AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name for the new AFI. The default is the name of the source AFI.
        public let name: String?
        /// The ID of the source AFI.
        public let sourceFpgaImageId: String
        /// The Region that contains the source AFI.
        public let sourceRegion: String

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, name: String? = nil, sourceFpgaImageId: String, sourceRegion: String) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.name = name
            self.sourceFpgaImageId = sourceFpgaImageId
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case name = "Name"
            case sourceFpgaImageId = "SourceFpgaImageId"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct CopyFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string)
        ]

        /// The ID of the new AFI.
        public let fpgaImageId: String?

        public init(fpgaImageId: String? = nil) {
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct CopyImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SourceImageId", required: true, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// A description for the new AMI in the destination Region.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". For example:   Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab    Key ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab    Alias name: alias/ExampleAlias    Alias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the Region that the snapshot is being copied to.  Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The name of the new AMI in the destination Region.
        public let name: String
        /// The ID of the AMI to copy.
        public let sourceImageId: String
        /// The name of the Region that contains the AMI to copy.
        public let sourceRegion: String

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, name: String, sourceImageId: String, sourceRegion: String) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.sourceImageId = sourceImageId
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case name = "Name"
            case sourceImageId = "SourceImageId"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct CopyImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]

        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct CopySnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DestinationRegion", location: .body(locationName: "destinationRegion"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "PresignedUrl", location: .body(locationName: "presignedUrl"), required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string), 
            AWSShapeMember(label: "SourceSnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description for the EBS snapshot.
        public let description: String?
        /// The destination Region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, ec2.us-east-1.amazonaws.com). With the AWS CLI, this is specified using the --region parameter or the default Region in your AWS configuration file.
        public let destinationRegion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query Requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests by Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
        public let presignedUrl: String?
        /// The ID of the Region that contains the snapshot to be copied.
        public let sourceRegion: String
        /// The ID of the EBS snapshot to copy.
        public let sourceSnapshotId: String
        /// The tags to apply to the new snapshot.
        public let tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, destinationRegion: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, presignedUrl: String? = nil, sourceRegion: String, sourceSnapshotId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.destinationRegion = destinationRegion
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.presignedUrl = presignedUrl
            self.sourceRegion = sourceRegion
            self.sourceSnapshotId = sourceSnapshotId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationRegion = "destinationRegion"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case presignedUrl = "presignedUrl"
            case sourceRegion = "SourceRegion"
            case sourceSnapshotId = "SourceSnapshotId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CopySnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the new snapshot.
        public let snapshotId: String?
        /// Any tags applied to the new snapshot.
        public let tags: [Tag]?

        public init(snapshotId: String? = nil, tags: [Tag]? = nil) {
            self.snapshotId = snapshotId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
            case tags = "tagSet"
        }
    }

    public struct CpuOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", location: .body(locationName: "coreCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", location: .body(locationName: "threadsPerCore"), required: false, type: .integer)
        ]

        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct CpuOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", required: false, type: .integer)
        ]

        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct CreateCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateType", required: false, type: .enum), 
            AWSShapeMember(label: "EphemeralStorage", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceMatchCriteria", required: false, type: .enum), 
            AWSShapeMember(label: "InstancePlatform", required: true, type: .enum), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tenancy", required: false, type: .enum)
        ]

        /// The Availability Zone in which to create the Capacity Reservation.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which to create the Capacity Reservation.
        public let availabilityZoneId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        public let endDate: TimeStamp?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate if the EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if the EndDateType value is limited.  
        public let endDateType: EndDateType?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    Default: open 
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which to reserve capacity.
        public let instancePlatform: CapacityReservationInstancePlatform
        /// The instance type for which to reserve capacity. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: String
        /// The tags to apply to the Capacity Reservation during launch.
        public let tagSpecifications: [TagSpecification]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
        public let tenancy: CapacityReservationTenancy?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, clientToken: String? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, endDate: TimeStamp? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceCount: Int, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform, instanceType: String, tagSpecifications: [TagSpecification]? = nil, tenancy: CapacityReservationTenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceCount = instanceCount
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.tagSpecifications = tagSpecifications
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case ebsOptimized = "EbsOptimized"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case ephemeralStorage = "EphemeralStorage"
            case instanceCount = "InstanceCount"
            case instanceMatchCriteria = "InstanceMatchCriteria"
            case instancePlatform = "InstancePlatform"
            case instanceType = "InstanceType"
            case tagSpecifications = "TagSpecifications"
            case tenancy = "Tenancy"
        }
    }

    public struct CreateCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservation", location: .body(locationName: "capacityReservation"), required: false, type: .structure)
        ]

        /// Information about the Capacity Reservation.
        public let capacityReservation: CapacityReservation?

        public init(capacityReservation: CapacityReservation? = nil) {
            self.capacityReservation = capacityReservation
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservation = "capacityReservation"
        }
    }

    public struct CreateCarrierGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to associate with the carrier gateway.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC to associate with the carrier gateway.
        public let vpcId: String

        public init(clientToken: String? = CreateCarrierGatewayRequest.idempotencyToken(), dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateCarrierGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGateway", location: .body(locationName: "carrierGateway"), required: false, type: .structure)
        ]

        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway = "carrierGateway"
        }
    }

    public struct CreateClientVpnEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationOptions", location: .body(locationName: "Authentication"), required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "ClientCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionLogOptions", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DnsServers", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServerCertificateArn", required: true, type: .string), 
            AWSShapeMember(label: "SplitTunnel", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransportProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "VpnPort", required: false, type: .integer)
        ]

        /// Information about the authentication method to be used to authenticate clients.
        public let authenticationOptions: [ClientVpnAuthenticationRequest]
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
        public let clientCidrBlock: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time  
        public let connectionLogOptions: ConnectionLogOptions
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.
        public let dnsServers: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        public let securityGroupIds: [String]?
        /// The ARN of the server certificate. For more information, see the AWS Certificate Manager User Guide.
        public let serverCertificateArn: String
        /// Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint. By default, split-tunnel on a VPN endpoint is disabled. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The tags to apply to the Client VPN endpoint during creation.
        public let tagSpecifications: [TagSpecification]?
        /// The transport protocol to be used by the VPN session. Default value: udp 
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443 
        public let vpnPort: Int?

        public init(authenticationOptions: [ClientVpnAuthenticationRequest], clientCidrBlock: String, clientToken: String? = CreateClientVpnEndpointRequest.idempotencyToken(), connectionLogOptions: ConnectionLogOptions, description: String? = nil, dnsServers: [String]? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, serverCertificateArn: String, splitTunnel: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientToken = clientToken
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.tagSpecifications = tagSpecifications
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationOptions = "Authentication"
            case clientCidrBlock = "ClientCidrBlock"
            case clientToken = "ClientToken"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case serverCertificateArn = "ServerCertificateArn"
            case splitTunnel = "SplitTunnel"
            case tagSpecifications = "TagSpecification"
            case transportProtocol = "TransportProtocol"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct CreateClientVpnEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "DnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The DNS name to be used by clients when establishing their VPN session.
        public let dnsName: String?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(clientVpnEndpointId: String? = nil, dnsName: String? = nil, status: ClientVpnEndpointStatus? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dnsName = dnsName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case dnsName = "dnsName"
            case status = "status"
        }
    }

    public struct CreateClientVpnRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetVpcSubnetId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint to which to add the route.
        public let clientVpnEndpointId: String
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination. For example:   To add a route for Internet access, enter 0.0.0.0/0    To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range   To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range   Route address ranges cannot overlap with the CIDR range specified for client allocation.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.
        public let targetVpcSubnetId: String

        public init(clientToken: String? = CreateClientVpnRouteRequest.idempotencyToken(), clientVpnEndpointId: String, description: String? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, targetVpcSubnetId: String) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct CreateClientVpnRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct CreateCustomerGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BgpAsn", required: true, type: .integer), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "IpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
        public let bgpAsn: Int
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// A name for the customer gateway device. Length Constraints: Up to 255 characters.
        public let deviceName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
        public let publicIp: String?
        /// The tags to apply to the customer gateway.
        public let tagSpecifications: [TagSpecification]?
        /// The type of VPN connection that this customer gateway supports (ipsec.1).
        public let `type`: GatewayType

        public init(bgpAsn: Int, certificateArn: String? = nil, deviceName: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.deviceName = deviceName
            self.dryRun = dryRun
            self.publicIp = publicIp
            self.tagSpecifications = tagSpecifications
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "BgpAsn"
            case certificateArn = "CertificateArn"
            case deviceName = "DeviceName"
            case dryRun = "dryRun"
            case publicIp = "IpAddress"
            case tagSpecifications = "TagSpecification"
            case `type` = "Type"
        }
    }

    public struct CreateCustomerGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateway", location: .body(locationName: "customerGateway"), required: false, type: .structure)
        ]

        /// Information about the customer gateway.
        public let customerGateway: CustomerGateway?

        public init(customerGateway: CustomerGateway? = nil) {
            self.customerGateway = customerGateway
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateway = "customerGateway"
        }
    }

    public struct CreateDefaultSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The Availability Zone in which to create the default subnet.
        public let availabilityZone: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(availabilityZone: String, dryRun: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "DryRun"
        }
    }

    public struct CreateDefaultSubnetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure)
        ]

        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct CreateDefaultVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct CreateDefaultVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]

        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct CreateDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfiguration"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A DHCP configuration option.
        public let dhcpConfigurations: [NewDhcpConfiguration]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the DHCP option.
        public let tagSpecifications: [TagSpecification]?

        public init(dhcpConfigurations: [NewDhcpConfiguration], dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfiguration"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateDhcpOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptions"), required: false, type: .structure)
        ]

        /// A set of DHCP options.
        public let dhcpOptions: DhcpOptions?

        public init(dhcpOptions: DhcpOptions? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptions"
        }
    }

    public struct CreateEgressOnlyInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the egress-only internet gateway.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC for which to create the egress-only internet gateway.
        public let vpcId: String

        public init(clientToken: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateEgressOnlyInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGateway", location: .body(locationName: "egressOnlyInternetGateway"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the egress-only internet gateway.
        public let egressOnlyInternetGateway: EgressOnlyInternetGateway?

        public init(clientToken: String? = nil, egressOnlyInternetGateway: EgressOnlyInternetGateway? = nil) {
            self.clientToken = clientToken
            self.egressOnlyInternetGateway = egressOnlyInternetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case egressOnlyInternetGateway = "egressOnlyInternetGateway"
        }
    }

    public struct CreateFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorCode", location: .body(locationName: "errorCode"), required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", location: .body(locationName: "errorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]

        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error Codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
        }
    }

    public struct CreateFleetInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "instanceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum)
        ]

        /// The IDs of the instances.
        public let instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "instanceIds"
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
            case platform = "platform"
        }
    }

    public struct CreateFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateConfigs", required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OnDemandOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", required: false, type: .boolean), 
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetCapacitySpecification", required: true, type: .structure), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", required: false, type: .boolean), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The configuration for the EC2 Fleet.
        public let launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]
        /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptionsRequest?
        /// Indicates whether EC2 Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptionsRequest?
        /// The key-value pair for tagging the EC2 Fleet request on creation. The value for ResourceType must be fleet, otherwise the fleet request fails. To tag instances at launch, specify the tags in the launch template. For information about tagging after launch, see Tagging Your Resources. 
        public let tagSpecifications: [TagSpecification]?
        /// The number of units to request.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (maintain). A value of instant places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of request places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see EC2 Fleet Request Types in the Amazon Elastic Compute Cloud User Guide.
        public let `type`: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: TimeStamp?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
        public let validUntil: TimeStamp?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest], onDemandOptions: OnDemandOptionsRequest? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptionsRequest? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: TimeStamp? = nil, validUntil: TimeStamp? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tagSpecifications = tagSpecifications
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.`type` = `type`
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try validate(self.launchTemplateConfigs, name:"launchTemplateConfigs", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case launchTemplateConfigs = "LaunchTemplateConfigs"
            case onDemandOptions = "OnDemandOptions"
            case replaceUnhealthyInstances = "ReplaceUnhealthyInstances"
            case spotOptions = "SpotOptions"
            case tagSpecifications = "TagSpecification"
            case targetCapacitySpecification = "TargetCapacitySpecification"
            case terminateInstancesWithExpiration = "TerminateInstancesWithExpiration"
            case `type` = "Type"
            case validFrom = "ValidFrom"
            case validUntil = "ValidUntil"
        }
    }

    public struct CreateFleetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", location: .body(locationName: "errorSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "fleetInstanceSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        public let errors: [CreateFleetError]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        public let instances: [CreateFleetInstance]?

        public init(errors: [CreateFleetError]? = nil, fleetId: String? = nil, instances: [CreateFleetInstance]? = nil) {
            self.errors = errors
            self.fleetId = fleetId
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
            case fleetId = "fleetId"
            case instances = "fleetInstanceSet"
        }
    }

    public struct CreateFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LogDestination", required: false, type: .string), 
            AWSShapeMember(label: "LogDestinationType", required: false, type: .enum), 
            AWSShapeMember(label: "LogFormat", required: false, type: .string), 
            AWSShapeMember(label: "LogGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MaxAggregationInterval", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceIds", location: .body(locationName: "ResourceId"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficType", required: true, type: .enum)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
        public let deliverLogsPermissionArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType. If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called my-logs, specify arn:aws:logs:us-east-1:123456789012:log-group:my-logs. Alternatively, use LogGroupName instead. If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example, to specify a subfolder named my-logs in a bucket named my-bucket, use the following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as a subfolder name. This is a reserved term.
        public let logDestination: String?
        /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log data to Amazon S3, specify s3. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName. Default: cloud-watch-logs 
        public let logDestinationType: LogDestinationType?
        /// The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see Flow Log Records. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field. Specify the fields using the ${field-id} format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value.
        public let logFormat: String?
        /// The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
        public let logGroupName: String?
        /// The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes). When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600
        public let maxAggregationInterval: Int?
        /// The ID of the subnet, network interface, or VPC for which you want to create a flow log. Constraints: Maximum of 1000 resources
        public let resourceIds: [String]
        /// The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
        public let resourceType: FlowLogsResourceType
        /// The tags to apply to the flow logs.
        public let tagSpecifications: [TagSpecification]?
        /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
        public let trafficType: TrafficType

        public init(clientToken: String? = nil, deliverLogsPermissionArn: String? = nil, dryRun: Bool? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceIds: [String], resourceType: FlowLogsResourceType, tagSpecifications: [TagSpecification]? = nil, trafficType: TrafficType) {
            self.clientToken = clientToken
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.dryRun = dryRun
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceIds = resourceIds
            self.resourceType = resourceType
            self.tagSpecifications = tagSpecifications
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
            case dryRun = "DryRun"
            case logDestination = "LogDestination"
            case logDestinationType = "LogDestinationType"
            case logFormat = "LogFormat"
            case logGroupName = "LogGroupName"
            case maxAggregationInterval = "MaxAggregationInterval"
            case resourceIds = "ResourceId"
            case resourceType = "ResourceType"
            case tagSpecifications = "TagSpecification"
            case trafficType = "TrafficType"
        }
    }

    public struct CreateFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "flowLogIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The IDs of the flow logs.
        public let flowLogIds: [String]?
        /// Information about the flow logs that could not be created successfully.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(clientToken: String? = nil, flowLogIds: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.clientToken = clientToken
            self.flowLogIds = flowLogIds
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case flowLogIds = "flowLogIdSet"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct CreateFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InputStorageLocation", required: true, type: .structure), 
            AWSShapeMember(label: "LogsStorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
        public let inputStorageLocation: StorageLocation
        /// The location in Amazon S3 for the output logs.
        public let logsStorageLocation: StorageLocation?
        /// A name for the AFI.
        public let name: String?
        /// The tags to apply to the FPGA image during creation.
        public let tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, inputStorageLocation: StorageLocation, logsStorageLocation: StorageLocation? = nil, name: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.inputStorageLocation = inputStorageLocation
            self.logsStorageLocation = logsStorageLocation
            self.name = name
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case inputStorageLocation = "InputStorageLocation"
            case logsStorageLocation = "LogsStorageLocation"
            case name = "Name"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string)
        ]

        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?

        public init(fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil) {
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct CreateImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"BlockDeviceMapping")), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "NoReboot", location: .body(locationName: "noReboot"), required: false, type: .boolean)
        ]

        /// The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the CopyImage action.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// A description for the new image.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
        public let noReboot: Bool?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, description: String? = nil, dryRun: Bool? = nil, instanceId: String, name: String, noReboot: Bool? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.name = name
            self.noReboot = noReboot
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case description = "description"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case name = "name"
            case noReboot = "noReboot"
        }
    }

    public struct CreateImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]

        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct CreateInstanceExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum)
        ]

        /// A description for the conversion task or the resource being exported. The maximum length is 255 characters.
        public let description: String?
        /// The format and location for an instance export task.
        public let exportToS3Task: ExportToS3TaskSpecification?
        /// The ID of the instance.
        public let instanceId: String
        /// The tags to apply to the instance export task during creation.
        public let tagSpecifications: [TagSpecification]?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(description: String? = nil, exportToS3Task: ExportToS3TaskSpecification? = nil, instanceId: String, tagSpecifications: [TagSpecification]? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.description = description
            self.exportToS3Task = exportToS3Task
            self.instanceId = instanceId
            self.tagSpecifications = tagSpecifications
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportToS3Task = "exportToS3"
            case instanceId = "instanceId"
            case tagSpecifications = "TagSpecification"
            case targetEnvironment = "targetEnvironment"
        }
    }

    public struct CreateInstanceExportTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTask", location: .body(locationName: "exportTask"), required: false, type: .structure)
        ]

        /// Information about the instance export task.
        public let exportTask: ExportTask?

        public init(exportTask: ExportTask? = nil) {
            self.exportTask = exportTask
        }

        private enum CodingKeys: String, CodingKey {
            case exportTask = "exportTask"
        }
    }

    public struct CreateInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the internet gateway.
        public let tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateway", location: .body(locationName: "internetGateway"), required: false, type: .structure)
        ]

        /// Information about the internet gateway.
        public let internetGateway: InternetGateway?

        public init(internetGateway: InternetGateway? = nil) {
            self.internetGateway = internetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateway = "internetGateway"
        }
    }

    public struct CreateKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "KeyName", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        public let keyName: String
        /// The tags to apply to the new key pair.
        public let tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyName: String, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyName = "KeyName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateData", required: true, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateName", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VersionDescription", required: false, type: .string)
        ]

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// A name for the launch template.
        public let launchTemplateName: String
        /// The tags to apply to the launch template during creation.
        public let tagSpecifications: [TagSpecification]?
        /// A description for the first version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData, launchTemplateName: String, tagSpecifications: [TagSpecification]? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateName = launchTemplateName
            self.tagSpecifications = tagSpecifications
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData.validate(name: "\(name).launchTemplateData")
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            try validate(self.versionDescription, name:"versionDescription", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateName = "LaunchTemplateName"
            case tagSpecifications = "TagSpecification"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure), 
            AWSShapeMember(label: "Warning", location: .body(locationName: "warning"), required: false, type: .structure)
        ]

        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?
        /// If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplate: LaunchTemplate? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplate = launchTemplate
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
            case warning = "warning"
        }
    }

    public struct CreateLaunchTemplateVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateData", required: true, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "SourceVersion", required: false, type: .string), 
            AWSShapeMember(label: "VersionDescription", required: false, type: .string)
        ]

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.
        public let sourceVersion: String?
        /// A description for the version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData, launchTemplateId: String? = nil, launchTemplateName: String? = nil, sourceVersion: String? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.sourceVersion = sourceVersion
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData.validate(name: "\(name).launchTemplateData")
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            try validate(self.versionDescription, name:"versionDescription", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case sourceVersion = "SourceVersion"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateVersion", location: .body(locationName: "launchTemplateVersion"), required: false, type: .structure), 
            AWSShapeMember(label: "Warning", location: .body(locationName: "warning"), required: false, type: .structure)
        ]

        /// Information about the launch template version.
        public let launchTemplateVersion: LaunchTemplateVersion?
        /// If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplateVersion: LaunchTemplateVersion? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplateVersion = launchTemplateVersion
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersion = "launchTemplateVersion"
            case warning = "warning"
        }
    }

    public struct CreateLocalGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroupId", required: true, type: .string)
        ]

        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, localGatewayRouteTableId: String, localGatewayVirtualInterfaceGroupId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "LocalGatewayVirtualInterfaceGroupId"
        }
    }

    public struct CreateLocalGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]

        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The tags to assign to the local gateway route table VPC association.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociation", location: .body(locationName: "localGatewayRouteTableVpcAssociation"), required: false, type: .structure)
        ]

        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation = "localGatewayRouteTableVpcAssociation"
        }
    }

    public struct CreateManagedPrefixListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressFamily", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Entries", location: .body(locationName: "Entry"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MaxEntries", required: true, type: .integer), 
            AWSShapeMember(label: "PrefixListName", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The IP address type. Valid Values: IPv4 | IPv6 
        public let addressFamily: String
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Up to 255 UTF-8 characters in length.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more entries for the prefix list.
        public let entries: [AddPrefixListEntry]?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int
        /// A name for the prefix list. Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws.
        public let prefixListName: String
        /// The tags to apply to the prefix list during creation.
        public let tagSpecifications: [TagSpecification]?

        public init(addressFamily: String, clientToken: String? = CreateManagedPrefixListRequest.idempotencyToken(), dryRun: Bool? = nil, entries: [AddPrefixListEntry]? = nil, maxEntries: Int, prefixListName: String, tagSpecifications: [TagSpecification]? = nil) {
            self.addressFamily = addressFamily
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.entries = entries
            self.maxEntries = maxEntries
            self.prefixListName = prefixListName
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try validate(self.entries, name:"entries", parent: name, max: 1000)
            try validate(self.entries, name:"entries", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "AddressFamily"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case entries = "Entry"
            case maxEntries = "MaxEntries"
            case prefixListName = "PrefixListName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateManagedPrefixListResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixList", location: .body(locationName: "prefixList"), required: false, type: .structure)
        ]

        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct CreateNatGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        public let allocationId: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The subnet in which to create the NAT gateway.
        public let subnetId: String
        /// The tags to assign to the NAT gateway.
        public let tagSpecifications: [TagSpecification]?

        public init(allocationId: String, clientToken: String? = CreateNatGatewayRequest.idempotencyToken(), dryRun: Bool? = nil, subnetId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.allocationId = allocationId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNatGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "NatGateway", location: .body(locationName: "natGateway"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the NAT gateway.
        public let natGateway: NatGateway?

        public init(clientToken: String? = nil, natGateway: NatGateway? = nil) {
            self.clientToken = clientToken
            self.natGateway = natGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case natGateway = "natGateway"
        }
    }

    public struct CreateNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer)
        ]

        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
        public let egress: Bool
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the network ACL.
        public let networkAclId: String
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
        public let ruleNumber: Int

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String, portRange: PortRange? = nil, protocol: String, ruleAction: RuleAction, ruleNumber: Int) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case dryRun = "dryRun"
            case egress = "egress"
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case networkAclId = "networkAclId"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct CreateNetworkAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the network ACL.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateNetworkAclResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcl", location: .body(locationName: "networkAcl"), required: false, type: .structure)
        ]

        /// Information about the network ACL.
        public let networkAcl: NetworkAcl?

        public init(networkAcl: NetworkAcl? = nil) {
            self.networkAcl = networkAcl
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcl = "networkAcl"
        }
    }

    public struct CreateNetworkInterfacePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "AwsService", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "Permission", required: true, type: .enum)
        ]

        /// The AWS account ID.
        public let awsAccountId: String?
        /// The AWS service. Currently not supported.
        public let awsService: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The type of permission to grant.
        public let permission: InterfacePermissionType

        public init(awsAccountId: String? = nil, awsService: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String, permission: InterfacePermissionType) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId = "AwsAccountId"
            case awsService = "AwsService"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case permission = "Permission"
        }
    }

    public struct CreateNetworkInterfacePermissionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InterfacePermission", location: .body(locationName: "interfacePermission"), required: false, type: .structure)
        ]

        /// Information about the permission for the network interface.
        public let interfacePermission: NetworkInterfacePermission?

        public init(interfacePermission: NetworkInterfacePermission? = nil) {
            self.interfacePermission = interfacePermission
        }

        private enum CodingKeys: String, CodingKey {
            case interfacePermission = "interfacePermission"
        }
    }

    public struct CreateNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "InterfaceType", required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description for the network interface.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups.
        public let groups: [String]?
        /// Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see  Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide.
        public let interfaceType: NetworkInterfaceCreationType?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: [InstanceIpv6Address]?
        /// The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet to associate with the network interface.
        public let subnetId: String
        /// The tags to apply to the new network interface.
        public let tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, dryRun: Bool? = nil, groups: [String]? = nil, interfaceType: NetworkInterfaceCreationType? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddresses"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInterfaceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterface", location: .body(locationName: "networkInterface"), required: false, type: .structure)
        ]

        /// Information about the network interface.
        public let networkInterface: NetworkInterface?

        public init(networkInterface: NetworkInterface? = nil) {
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterface = "networkInterface"
        }
    }

    public struct CreatePlacementGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "PartitionCount", required: false, type: .integer), 
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: false, type: .enum), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters
        public let groupName: String?
        /// The number of partitions. Valid only when Strategy is set to partition.
        public let partitionCount: Int?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// The tags to apply to the new placement group.
        public let tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, groupName: String? = nil, partitionCount: Int? = nil, strategy: PlacementStrategy? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.strategy = strategy
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupName = "groupName"
            case partitionCount = "PartitionCount"
            case strategy = "strategy"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreatePlacementGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementGroup", location: .body(locationName: "placementGroup"), required: false, type: .structure)
        ]

        public let placementGroup: PlacementGroup?

        public init(placementGroup: PlacementGroup? = nil) {
            self.placementGroup = placementGroup
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroup = "placementGroup"
        }
    }

    public struct CreateReservedInstancesListingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: true, type: .integer), 
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String
        /// The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
        public let instanceCount: Int
        /// A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
        public let priceSchedules: [PriceScheduleSpecification]
        /// The ID of the active Standard Reserved Instance.
        public let reservedInstancesId: String

        public init(clientToken: String, instanceCount: Int, priceSchedules: [PriceScheduleSpecification], reservedInstancesId: String) {
            self.clientToken = clientToken
            self.instanceCount = instanceCount
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case instanceCount = "instanceCount"
            case priceSchedules = "priceSchedules"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct CreateReservedInstancesListingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Standard Reserved Instance listing.
        public let reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CreateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// The ID of the carrier gateway. You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationIpv6CidrBlock: String?
        /// The ID of a prefix list used for the destination match.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table for the route.
        public let routeTableId: String
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case localGatewayId = "LocalGatewayId"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
            case transitGatewayId = "TransitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct CreateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the route table.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTable", location: .body(locationName: "routeTable"), required: false, type: .structure)
        ]

        /// Information about the route table.
        public let routeTable: RouteTable?

        public init(routeTable: RouteTable? = nil) {
            self.routeTable = routeTable
        }

        private enum CodingKeys: String, CodingKey {
            case routeTable = "routeTable"
        }
    }

    public struct CreateSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "GroupDescription"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]

        /// A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let groupName: String
        /// The tags to assign to the security group.
        public let tagSpecifications: [TagSpecification]?
        /// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
        public let vpcId: String?

        public init(description: String, dryRun: Bool? = nil, groupName: String, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.groupName = groupName
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "GroupDescription"
            case dryRun = "dryRun"
            case groupName = "GroupName"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSecurityGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the security group.
        public let groupId: String?
        /// The tags assigned to the security group.
        public let tags: [Tag]?

        public init(groupId: String? = nil, tags: [Tag]? = nil) {
            self.groupId = groupId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case tags = "tagSet"
        }
    }

    public struct CreateSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// A description for the snapshot.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the snapshot during creation.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the EBS volume.
        public let volumeId: String

        public init(description: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, volumeId: String) {
            self.description = description
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case volumeId = "VolumeId"
        }
    }

    public struct CreateSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyTagsFromSource", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Copies the tags from the specified volume to corresponding snapshot.
        public let copyTagsFromSource: CopyTagsFromSource?
        ///  A description propagated to every snapshot specified by the instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance to specify which volumes should be included in the snapshots.
        public let instanceSpecification: InstanceSpecification
        /// Tags to apply to every snapshot specified by the instance.
        public let tagSpecifications: [TagSpecification]?

        public init(copyTagsFromSource: CopyTagsFromSource? = nil, description: String? = nil, dryRun: Bool? = nil, instanceSpecification: InstanceSpecification, tagSpecifications: [TagSpecification]? = nil) {
            self.copyTagsFromSource = copyTagsFromSource
            self.description = description
            self.dryRun = dryRun
            self.instanceSpecification = instanceSpecification
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case copyTagsFromSource = "CopyTagsFromSource"
            case description = "Description"
            case dryRun = "DryRun"
            case instanceSpecification = "InstanceSpecification"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshots", location: .body(locationName: "snapshotSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// List of snapshots.
        public let snapshots: [SnapshotInfo]?

        public init(snapshots: [SnapshotInfo]? = nil) {
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case snapshots = "snapshotSet"
        }
    }

    public struct CreateSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string)
        ]

        /// The Amazon S3 bucket in which to store the Spot Instance data feed.
        public let bucket: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A prefix for the data feed file names.
        public let prefix: String?

        public init(bucket: String, dryRun: Bool? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case dryRun = "dryRun"
            case prefix = "prefix"
        }
    }

    public struct CreateSpotDatafeedSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]

        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct CreateSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "OutpostArn", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// The Availability Zone or Local Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet. To create a subnet in a Local Zone, set this value to the Local Zone ID, for example us-west-2-lax-1a. For information about the Regions that support Local Zones, see Available Regions in the Amazon Elastic Compute Cloud User Guide. To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN.
        public let availabilityZone: String?
        /// The AZ ID or the Local Zone ID of the subnet.
        public let availabilityZoneId: String?
        /// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
        public let ipv6CidrBlock: String?
        /// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet.
        public let outpostArn: String?
        /// The tags to assign to the subnet.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, cidrBlock: String, dryRun: Bool? = nil, ipv6CidrBlock: String? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.ipv6CidrBlock = ipv6CidrBlock
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case cidrBlock = "CidrBlock"
            case dryRun = "dryRun"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSubnetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure)
        ]

        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "ResourceId"), required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        public let resources: [String]
        /// The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
        public let tags: [Tag]

        public init(dryRun: Bool? = nil, resources: [String], tags: [Tag]) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case resources = "ResourceId"
            case tags = "Tag"
        }
    }

    public struct CreateTrafficMirrorFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to a Traffic Mirror filter.
        public let tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorFilterRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorFilterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorFilter", location: .body(locationName: "trafficMirrorFilter"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror filter.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(clientToken: String? = nil, trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorFilter = "trafficMirrorFilter"
        }
    }

    public struct CreateTrafficMirrorFilterRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DestinationPortRange", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Protocol", required: false, type: .integer), 
            AWSShapeMember(label: "RuleAction", required: true, type: .enum), 
            AWSShapeMember(label: "RuleNumber", required: true, type: .integer), 
            AWSShapeMember(label: "SourceCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "SourcePortRange", required: false, type: .structure), 
            AWSShapeMember(label: "TrafficDirection", required: true, type: .enum), 
            AWSShapeMember(label: "TrafficMirrorFilterId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String
        /// The destination port range.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example UDP, to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the Internet Assigned Numbers Authority (IANA) website.
        public let `protocol`: Int?
        /// The action to take (accept | reject) on the filtered traffic.
        public let ruleAction: TrafficMirrorRuleAction
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String
        /// The source port range.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic (ingress | egress).
        public let trafficDirection: TrafficDirection
        /// The ID of the filter that this rule is associated with.
        public let trafficMirrorFilterId: String

        public init(clientToken: String? = CreateTrafficMirrorFilterRuleRequest.idempotencyToken(), description: String? = nil, destinationCidrBlock: String, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction, ruleNumber: Int, sourceCidrBlock: String, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection, trafficMirrorFilterId: String) {
            self.clientToken = clientToken
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct CreateTrafficMirrorFilterRuleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorFilterRule", location: .body(locationName: "trafficMirrorFilterRule"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(clientToken: String? = nil, trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorFilterRule = "trafficMirrorFilterRule"
        }
    }

    public struct CreateTrafficMirrorSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "PacketLength", required: false, type: .integer), 
            AWSShapeMember(label: "SessionNumber", required: true, type: .integer), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficMirrorFilterId", required: true, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTargetId", required: true, type: .string), 
            AWSShapeMember(label: "VirtualNetworkId", required: false, type: .integer)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the source network interface.
        public let networkInterfaceId: String
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. If you do not want to mirror the entire packet, use the PacketLength parameter to specify the number of bytes in each packet to mirror.
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int
        /// The tags to assign to a Traffic Mirror session.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String
        /// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
        public let virtualNetworkId: Int?

        public init(clientToken: String? = CreateTrafficMirrorSessionRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String, packetLength: Int? = nil, sessionNumber: Int, tagSpecifications: [TagSpecification]? = nil, trafficMirrorFilterId: String, trafficMirrorTargetId: String, virtualNetworkId: Int? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tagSpecifications = tagSpecifications
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case packetLength = "PacketLength"
            case sessionNumber = "SessionNumber"
            case tagSpecifications = "TagSpecification"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct CreateTrafficMirrorSessionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorSession", location: .body(locationName: "trafficMirrorSession"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(clientToken: String? = nil, trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorSession = "trafficMirrorSession"
        }
    }

    public struct CreateTrafficMirrorTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkLoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror target.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The network interface ID that is associated with the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
        public let networkLoadBalancerArn: String?
        /// The tags to assign to the Traffic Mirror target.
        public let tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorTargetRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkLoadBalancerArn = "NetworkLoadBalancerArn"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorTargetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTarget", location: .body(locationName: "trafficMirrorTarget"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror target.
        public let trafficMirrorTarget: TrafficMirrorTarget?

        public init(clientToken: String? = nil, trafficMirrorTarget: TrafficMirrorTarget? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorTarget = trafficMirrorTarget
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorTarget = "trafficMirrorTarget"
        }
    }

    public struct CreateTransitGatewayMulticastDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags for the transit gateway multicast domain.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayMulticastDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayMulticastDomain", location: .body(locationName: "transitGatewayMulticastDomain"), required: false, type: .structure)
        ]

        /// Information about the transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain = "transitGatewayMulticastDomain"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PeerAccountId", required: true, type: .string), 
            AWSShapeMember(label: "PeerRegion", required: true, type: .string), 
            AWSShapeMember(label: "PeerTransitGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The AWS account ID of the owner of the peer transit gateway.
        public let peerAccountId: String
        /// The Region where the peer transit gateway is located.
        public let peerRegion: String
        /// The ID of the peer transit gateway with which to create the peering attachment.
        public let peerTransitGatewayId: String
        /// The tags to apply to the transit gateway peering attachment.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, peerAccountId: String, peerRegion: String, peerTransitGatewayId: String, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.peerAccountId = peerAccountId
            self.peerRegion = peerRegion
            self.peerTransitGatewayId = peerTransitGatewayId
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case peerAccountId = "PeerAccountId"
            case peerRegion = "PeerRegion"
            case peerTransitGatewayId = "PeerTransitGatewayId"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPeeringAttachment", location: .body(locationName: "transitGatewayPeeringAttachment"), required: false, type: .structure)
        ]

        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list that is used for destination matches.
        public let prefixListId: String
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPrefixListReference", location: .body(locationName: "transitGatewayPrefixListReference"), required: false, type: .structure)
        ]

        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct CreateTransitGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The transit gateway options.
        public let options: TransitGatewayRequestOptions?
        /// The tags to apply to the transit gateway.
        public let tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, dryRun: Bool? = nil, options: TransitGatewayRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTransitGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateway", location: .body(locationName: "transitGateway"), required: false, type: .structure)
        ]

        /// Information about the transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct CreateTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]

        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct CreateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the transit gateway route table.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTable", location: .body(locationName: "transitGatewayRouteTable"), required: false, type: .structure)
        ]

        /// Information about the transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TagSpecifications", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC attachment options.
        public let options: CreateTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
        public let subnetIds: [String]
        /// The tags to apply to the VPC attachment.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayVpcAttachmentRequestOptions? = nil, subnetIds: [String], tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.options = options
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case subnetIds = "SubnetIds"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
            case vpcId = "VpcId"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6Support", required: false, type: .enum)
        ]

        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?

        public init(dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]

        /// Information about the VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct CreateVolumePermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]

        /// The group to be added or removed. The possible value is all.
        public let group: PermissionGroup?
        /// The AWS account ID to be added or removed.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct CreateVolumePermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Remove", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Adds the specified AWS account ID or group to the list.
        public let add: [CreateVolumePermission]?
        /// Removes the specified AWS account ID or group from the list.
        public let remove: [CreateVolumePermission]?

        public init(add: [CreateVolumePermission]? = nil, remove: [CreateVolumePermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct CreateVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MultiAttachEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "OutpostArn", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum)
        ]

        /// The Availability Zone in which to create the volume.
        public let availabilityZone: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the volume should be encrypted. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Encryption by default in the Amazon Elastic Compute Cloud User Guide. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for an io1 or io2 volume, with a maximum ratio of 50 IOPS/GiB for io1, and 500 IOPS/GiB for io2. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. This parameter is valid only for Provisioned IOPS SSD (io1 and io2) volumes.
        public let iops: Int?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 Nitro-based instances in the same Availability Zone. For more information, see  Amazon EBS Multi-Attach in the Amazon Elastic Compute Cloud User Guide.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. Constraints: 1-16,384 for gp2, 4-16,384 for io1 and io2, 500-16,384 for st1, 500-16,384 for sc1, and 1-1,024 for standard. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let size: Int?
        /// The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
        public let snapshotId: String?
        /// The tags to apply to the volume during creation.
        public let tagSpecifications: [TagSpecification]?
        /// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes. Default: gp2 
        public let volumeType: VolumeType?

        public init(availabilityZone: String, dryRun: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil, volumeType: VolumeType? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case multiAttachEnabled = "MultiAttachEnabled"
            case outpostArn = "OutpostArn"
            case size = "Size"
            case snapshotId = "SnapshotId"
            case tagSpecifications = "TagSpecification"
            case volumeType = "VolumeType"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionEvents", required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ConnectionNotificationArn", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceId", required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointId", required: false, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// One or more endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: [String]
        /// The ARN of the SNS topic for the notifications.
        public let connectionNotificationArn: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the endpoint.
        public let vpcEndpointId: String?

        public init(clientToken: String? = nil, connectionEvents: [String], connectionNotificationArn: String, dryRun: Bool? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.clientToken = clientToken
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotification", location: .body(locationName: "connectionNotification"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the notification.
        public let connectionNotification: ConnectionNotification?

        public init(clientToken: String? = nil, connectionNotification: ConnectionNotification? = nil) {
            self.clientToken = clientToken
            self.connectionNotification = connectionNotification
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case connectionNotification = "connectionNotification"
        }
    }

    public struct CreateVpcEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServiceName", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "SubnetId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcEndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: true 
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) One or more route table IDs.
        public let routeTableIds: [String]?
        /// (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
        public let securityGroupIds: [String]?
        /// The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.
        public let serviceName: String
        /// (Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.
        public let subnetIds: [String]?
        /// The tags to associate with the endpoint.
        public let tagSpecifications: [TagSpecification]?
        /// The type of endpoint. Default: Gateway
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC in which the endpoint will be used.
        public let vpcId: String

        public init(clientToken: String? = nil, dryRun: Bool? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, routeTableIds: [String]? = nil, securityGroupIds: [String]? = nil, serviceName: String, subnetIds: [String]? = nil, tagSpecifications: [TagSpecification]? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.routeTableIds = routeTableIds
            self.securityGroupIds = securityGroupIds
            self.serviceName = serviceName
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case routeTableIds = "RouteTableId"
            case securityGroupIds = "SecurityGroupId"
            case serviceName = "ServiceName"
            case subnetIds = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case vpcEndpointType = "VpcEndpointType"
            case vpcId = "VpcId"
        }
    }

    public struct CreateVpcEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpoint", location: .body(locationName: "vpcEndpoint"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the endpoint.
        public let vpcEndpoint: VpcEndpoint?

        public init(clientToken: String? = nil, vpcEndpoint: VpcEndpoint? = nil) {
            self.clientToken = clientToken
            self.vpcEndpoint = vpcEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case vpcEndpoint = "vpcEndpoint"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkLoadBalancerArns", location: .body(locationName: "NetworkLoadBalancerArn"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrivateDnsName", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use AcceptVpcEndpointConnections.
        public let acceptanceRequired: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
        public let networkLoadBalancerArns: [String]
        /// The private DNS name to assign to the VPC endpoint service.
        public let privateDnsName: String?
        /// The tags to associate with the service.
        public let tagSpecifications: [TagSpecification]?

        public init(acceptanceRequired: Bool? = nil, clientToken: String? = nil, dryRun: Bool? = nil, networkLoadBalancerArns: [String], privateDnsName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case networkLoadBalancerArns = "NetworkLoadBalancerArn"
            case privateDnsName = "PrivateDnsName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceConfiguration", location: .body(locationName: "serviceConfiguration"), required: false, type: .structure)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the service configuration.
        public let serviceConfiguration: ServiceConfiguration?

        public init(clientToken: String? = nil, serviceConfiguration: ServiceConfiguration? = nil) {
            self.clientToken = clientToken
            self.serviceConfiguration = serviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case serviceConfiguration = "serviceConfiguration"
        }
    }

    public struct CreateVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PeerOwnerId", location: .body(locationName: "peerOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PeerRegion", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", location: .body(locationName: "peerVpcId"), required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The AWS account ID of the owner of the accepter VPC. Default: Your AWS account ID
        public let peerOwnerId: String?
        /// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request. Default: The Region in which you make the request.
        public let peerRegion: String?
        /// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
        public let peerVpcId: String?
        /// The tags to assign to the peering connection.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the requester VPC. You must specify this parameter in the request.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, peerOwnerId: String? = nil, peerRegion: String? = nil, peerVpcId: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.peerOwnerId = peerOwnerId
            self.peerRegion = peerRegion
            self.peerVpcId = peerVpcId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case peerOwnerId = "peerOwnerId"
            case peerRegion = "PeerRegion"
            case peerVpcId = "peerVpcId"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]

        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct CreateVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean), 
            AWSShapeMember(label: "CidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockNetworkBorderGroup", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Pool", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.  You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The tags to assign to the VPC.
        public let tagSpecifications: [TagSpecification]?

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String, dryRun: Bool? = nil, instanceTenancy: Tenancy? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6Pool: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6Pool = ipv6Pool
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case cidrBlock = "CidrBlock"
            case dryRun = "dryRun"
            case instanceTenancy = "instanceTenancy"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6Pool = "Ipv6Pool"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]

        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct CreateVpnConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: false, type: .string)
        ]

        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for the VPN connection.
        public let options: VpnConnectionOptionsSpecification?
        /// The tags to apply to the VPN connection.
        public let tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
        public let transitGatewayId: String?
        /// The type of VPN connection (ipsec.1).
        public let `type`: String
        /// The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String, dryRun: Bool? = nil, options: VpnConnectionOptionsSpecification? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil, type: String, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
            case options = "options"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
            case `type` = "Type"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct CreateVpnConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]

        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct CreateVpnConnectionRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]

        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct CreateVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
        public let amazonSideAsn: Int64?
        /// The Availability Zone for the virtual private gateway.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the virtual private gateway.
        public let tagSpecifications: [TagSpecification]?
        /// The type of VPN connection this virtual private gateway supports.
        public let `type`: GatewayType

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case `type` = "Type"
        }
    }

    public struct CreateVpnGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateway", location: .body(locationName: "vpnGateway"), required: false, type: .structure)
        ]

        /// Information about the virtual private gateway.
        public let vpnGateway: VpnGateway?

        public init(vpnGateway: VpnGateway? = nil) {
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateway = "vpnGateway"
        }
    }

    public struct CreditSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", location: .body(locationName: "cpuCredits"), required: false, type: .string)
        ]

        /// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are standard and unlimited.
        public let cpuCredits: String?

        public init(cpuCredits: String? = nil) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
        }
    }

    public struct CreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", required: true, type: .string)
        ]

        /// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are standard and unlimited.
        public let cpuCredits: String

        public init(cpuCredits: String) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
        }
    }

    public struct CustomerGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BgpAsn", location: .body(locationName: "bgpAsn"), required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", location: .body(locationName: "certificateArn"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]

        /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        public let bgpAsn: String?
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// The name of customer gateway device.
        public let deviceName: String?
        /// The Internet-routable IP address of the customer gateway's outside interface.
        public let ipAddress: String?
        /// The current state of the customer gateway (pending | available | deleting | deleted).
        public let state: String?
        /// Any tags assigned to the customer gateway.
        public let tags: [Tag]?
        /// The type of VPN connection the customer gateway supports (ipsec.1).
        public let `type`: String?

        public init(bgpAsn: String? = nil, certificateArn: String? = nil, customerGatewayId: String? = nil, deviceName: String? = nil, ipAddress: String? = nil, state: String? = nil, tags: [Tag]? = nil, type: String? = nil) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.customerGatewayId = customerGatewayId
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.state = state
            self.tags = tags
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "bgpAsn"
            case certificateArn = "certificateArn"
            case customerGatewayId = "customerGatewayId"
            case deviceName = "deviceName"
            case ipAddress = "ipAddress"
            case state = "state"
            case tags = "tagSet"
            case `type` = "type"
        }
    }

    public struct DeleteCarrierGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the carrier gateway.
        public let carrierGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(carrierGatewayId: String, dryRun: Bool? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteCarrierGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGateway", location: .body(locationName: "carrierGateway"), required: false, type: .structure)
        ]

        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway = "carrierGateway"
        }
    }

    public struct DeleteClientVpnEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the Client VPN to be deleted.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteClientVpnEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(status: ClientVpnEndpointStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DeleteClientVpnRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetVpcSubnetId", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint from which the route is to be deleted.
        public let clientVpnEndpointId: String
        /// The IPv4 address range, in CIDR notation, of the route to be deleted.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the target subnet used by the route.
        public let targetVpcSubnetId: String?

        public init(clientVpnEndpointId: String, destinationCidrBlock: String, dryRun: Bool? = nil, targetVpcSubnetId: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct DeleteClientVpnRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DeleteCustomerGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayId: String, dryRun: Bool? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The ID of the DHCP options set.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayId: String) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayId = "EgressOnlyInternetGatewayId"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnCode", location: .body(locationName: "returnCode"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnCode: Bool?

        public init(returnCode: Bool? = nil) {
            self.returnCode = returnCode
        }

        private enum CodingKeys: String, CodingKey {
            case returnCode = "returnCode"
        }
    }

    public struct DeleteFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: DeleteFleetErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: DeleteFleetErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteFleetErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string)
        ]

        /// The error.
        public let error: DeleteFleetError?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?

        public init(error: DeleteFleetError? = nil, fleetId: String? = nil) {
            self.error = error
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case fleetId = "fleetId"
        }
    }

    public struct DeleteFleetSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentFleetState", location: .body(locationName: "currentFleetState"), required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousFleetState", location: .body(locationName: "previousFleetState"), required: false, type: .enum)
        ]

        /// The current state of the EC2 Fleet.
        public let currentFleetState: FleetStateCode?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The previous state of the EC2 Fleet.
        public let previousFleetState: FleetStateCode?

        public init(currentFleetState: FleetStateCode? = nil, fleetId: String? = nil, previousFleetState: FleetStateCode? = nil) {
            self.currentFleetState = currentFleetState
            self.fleetId = fleetId
            self.previousFleetState = previousFleetState
        }

        private enum CodingKeys: String, CodingKey {
            case currentFleetState = "currentFleetState"
            case fleetId = "fleetId"
            case previousFleetState = "previousFleetState"
        }
    }

    public struct DeleteFleetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FleetIds", location: .body(locationName: "FleetId"), required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "TerminateInstances", required: true, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the EC2 Fleets.
        public let fleetIds: [String]
        /// Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.
        public let terminateInstances: Bool

        public init(dryRun: Bool? = nil, fleetIds: [String], terminateInstances: Bool) {
            self.dryRun = dryRun
            self.fleetIds = fleetIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fleetIds = "FleetId"
            case terminateInstances = "TerminateInstances"
        }
    }

    public struct DeleteFleetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulFleetDeletions", location: .body(locationName: "successfulFleetDeletionSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UnsuccessfulFleetDeletions", location: .body(locationName: "unsuccessfulFleetDeletionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the EC2 Fleets that are successfully deleted.
        public let successfulFleetDeletions: [DeleteFleetSuccessItem]?
        /// Information about the EC2 Fleets that are not successfully deleted.
        public let unsuccessfulFleetDeletions: [DeleteFleetErrorItem]?

        public init(successfulFleetDeletions: [DeleteFleetSuccessItem]? = nil, unsuccessfulFleetDeletions: [DeleteFleetErrorItem]? = nil) {
            self.successfulFleetDeletions = successfulFleetDeletions
            self.unsuccessfulFleetDeletions = unsuccessfulFleetDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetDeletions = "successfulFleetDeletionSet"
            case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
        }
    }

    public struct DeleteFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        public let flowLogIds: [String]

        public init(dryRun: Bool? = nil, flowLogIds: [String]) {
            self.dryRun = dryRun
            self.flowLogIds = flowLogIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case flowLogIds = "FlowLogId"
        }
    }

    public struct DeleteFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the flow logs that could not be deleted successfully.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(dryRun: Bool? = nil, fpgaImageId: String) {
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DeleteFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "KeyPairId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?

        public init(dryRun: Bool? = nil, keyName: String? = nil, keyPairId: String? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.keyPairId = keyPairId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyName = "KeyName"
            case keyPairId = "KeyPairId"
        }
    }

    public struct DeleteLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct DeleteLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure)
        ]

        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct DeleteLaunchTemplateVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "LaunchTemplateVersion"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version numbers of one or more launch template versions to delete.
        public let versions: [String]

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versions: [String]) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versions = versions
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "ResponseError", location: .body(locationName: "responseError"), required: false, type: .structure), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long)
        ]

        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// Information about the error.
        public let responseError: ResponseError?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, responseError: ResponseError? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.responseError = responseError
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case responseError = "responseError"
            case versionNumber = "versionNumber"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long)
        ]

        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case versionNumber = "versionNumber"
        }
    }

    public struct DeleteLaunchTemplateVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfullyDeletedLaunchTemplateVersions", location: .body(locationName: "successfullyDeletedLaunchTemplateVersionSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UnsuccessfullyDeletedLaunchTemplateVersions", location: .body(locationName: "unsuccessfullyDeletedLaunchTemplateVersionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the launch template versions that were successfully deleted.
        public let successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]?
        /// Information about the launch template versions that could not be deleted.
        public let unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]?

        public init(successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]? = nil, unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]? = nil) {
            self.successfullyDeletedLaunchTemplateVersions = successfullyDeletedLaunchTemplateVersions
            self.unsuccessfullyDeletedLaunchTemplateVersions = unsuccessfullyDeletedLaunchTemplateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case successfullyDeletedLaunchTemplateVersions = "successfullyDeletedLaunchTemplateVersionSet"
            case unsuccessfullyDeletedLaunchTemplateVersions = "unsuccessfullyDeletedLaunchTemplateVersionSet"
        }
    }

    public struct DeleteLocalGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", required: true, type: .string)
        ]

        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, localGatewayRouteTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
        }
    }

    public struct DeleteLocalGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]

        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociationId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String

        public init(dryRun: Bool? = nil, localGatewayRouteTableVpcAssociationId: String) {
            self.dryRun = dryRun
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableVpcAssociationId = "LocalGatewayRouteTableVpcAssociationId"
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociation", location: .body(locationName: "localGatewayRouteTableVpcAssociation"), required: false, type: .structure)
        ]

        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation = "localGatewayRouteTableVpcAssociation"
        }
    }

    public struct DeleteManagedPrefixListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String

        public init(dryRun: Bool? = nil, prefixListId: String) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
        }
    }

    public struct DeleteManagedPrefixListResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixList", location: .body(locationName: "prefixList"), required: false, type: .structure)
        ]

        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct DeleteNatGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NatGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the NAT gateway.
        public let natGatewayId: String

        public init(dryRun: Bool? = nil, natGatewayId: String) {
            self.dryRun = dryRun
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case natGatewayId = "NatGatewayId"
        }
    }

    public struct DeleteNatGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string)
        ]

        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayId: String? = nil) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "natGatewayId"
        }
    }

    public struct DeleteNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the rule is an egress rule.
        public let egress: Bool
        /// The ID of the network ACL.
        public let networkAclId: String
        /// The rule number of the entry to delete.
        public let ruleNumber: Int

        public init(dryRun: Bool? = nil, egress: Bool, networkAclId: String, ruleNumber: Int) {
            self.dryRun = dryRun
            self.egress = egress
            self.networkAclId = networkAclId
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case egress = "egress"
            case networkAclId = "networkAclId"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct DeleteNetworkAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String

        public init(dryRun: Bool? = nil, networkAclId: String) {
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct DeleteNetworkInterfacePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfacePermissionId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify true to remove the permission even if the network interface is attached to an instance.
        public let force: Bool?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String

        public init(dryRun: Bool? = nil, force: Bool? = nil, networkInterfacePermissionId: String) {
            self.dryRun = dryRun
            self.force = force
            self.networkInterfacePermissionId = networkInterfacePermissionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case force = "Force"
            case networkInterfacePermissionId = "NetworkInterfacePermissionId"
        }
    }

    public struct DeleteNetworkInterfacePermissionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds, otherwise returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(dryRun: Bool? = nil, networkInterfaceId: String) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DeletePlacementGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the placement group.
        public let groupName: String

        public init(dryRun: Bool? = nil, groupName: String) {
            self.dryRun = dryRun
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupName = "groupName"
        }
    }

    public struct DeleteQueuedReservedInstancesError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: DeleteQueuedReservedInstancesErrorCode?
        /// The error message.
        public let message: String?

        public init(code: DeleteQueuedReservedInstancesErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteQueuedReservedInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Reserved Instances.
        public let reservedInstancesIds: [String]

        public init(dryRun: Bool? = nil, reservedInstancesIds: [String]) {
            self.dryRun = dryRun
            self.reservedInstancesIds = reservedInstancesIds
        }

        public func validate(name: String) throws {
            try validate(self.reservedInstancesIds, name:"reservedInstancesIds", parent: name, max: 100)
            try validate(self.reservedInstancesIds, name:"reservedInstancesIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DeleteQueuedReservedInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedQueuedPurchaseDeletions", location: .body(locationName: "failedQueuedPurchaseDeletionSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SuccessfulQueuedPurchaseDeletions", location: .body(locationName: "successfulQueuedPurchaseDeletionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the queued purchases that could not be deleted.
        public let failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]?
        /// Information about the queued purchases that were successfully deleted.
        public let successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]?

        public init(failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]? = nil, successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]? = nil) {
            self.failedQueuedPurchaseDeletions = failedQueuedPurchaseDeletions
            self.successfulQueuedPurchaseDeletions = successfulQueuedPurchaseDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case failedQueuedPurchaseDeletions = "failedQueuedPurchaseDeletionSet"
            case successfulQueuedPurchaseDeletions = "successfulQueuedPurchaseDeletionSet"
        }
    }

    public struct DeleteRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]

        /// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String

        public init(destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, routeTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct DeleteRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String

        public init(dryRun: Bool? = nil, routeTableId: String) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct DeleteSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. Required for a nondefault VPC.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
        public let groupName: String?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
        }
    }

    public struct DeleteSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String

        public init(dryRun: Bool? = nil, snapshotId: String) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DeleteSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct DeleteSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet.
        public let subnetId: String

        public init(dryRun: Bool? = nil, subnetId: String) {
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "resourceId"), required: true, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tag"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        public let resources: [String]
        /// The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the aws: prefix).
        public let tags: [Tag]?

        public init(dryRun: Bool? = nil, resources: [String], tags: [Tag]? = nil) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case resources = "resourceId"
            case tags = "tag"
        }
    }

    public struct DeleteTrafficMirrorFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TrafficMirrorFilterId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String

        public init(dryRun: Bool? = nil, trafficMirrorFilterId: String) {
            self.dryRun = dryRun
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct DeleteTrafficMirrorFilterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorFilterId", location: .body(locationName: "trafficMirrorFilterId"), required: false, type: .string)
        ]

        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(trafficMirrorFilterId: String? = nil) {
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterId = "trafficMirrorFilterId"
        }
    }

    public struct DeleteTrafficMirrorFilterRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TrafficMirrorFilterRuleId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String

        public init(dryRun: Bool? = nil, trafficMirrorFilterRuleId: String) {
            self.dryRun = dryRun
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct DeleteTrafficMirrorFilterRuleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorFilterRuleId", location: .body(locationName: "trafficMirrorFilterRuleId"), required: false, type: .string)
        ]

        /// The ID of the deleted Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(trafficMirrorFilterRuleId: String? = nil) {
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId"
        }
    }

    public struct DeleteTrafficMirrorSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TrafficMirrorSessionId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String

        public init(dryRun: Bool? = nil, trafficMirrorSessionId: String) {
            self.dryRun = dryRun
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
        }
    }

    public struct DeleteTrafficMirrorSessionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorSessionId", location: .body(locationName: "trafficMirrorSessionId"), required: false, type: .string)
        ]

        /// The ID of the deleted Traffic Mirror session.
        public let trafficMirrorSessionId: String?

        public init(trafficMirrorSessionId: String? = nil) {
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSessionId = "trafficMirrorSessionId"
        }
    }

    public struct DeleteTrafficMirrorTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TrafficMirrorTargetId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String

        public init(dryRun: Bool? = nil, trafficMirrorTargetId: String) {
            self.dryRun = dryRun
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
        }
    }

    public struct DeleteTrafficMirrorTargetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorTargetId", location: .body(locationName: "trafficMirrorTargetId"), required: false, type: .string)
        ]

        /// The ID of the deleted Traffic Mirror target.
        public let trafficMirrorTargetId: String?

        public init(trafficMirrorTargetId: String? = nil) {
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorTargetId = "trafficMirrorTargetId"
        }
    }

    public struct DeleteTransitGatewayMulticastDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String

        public init(dryRun: Bool? = nil, transitGatewayMulticastDomainId: String) {
            self.dryRun = dryRun
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeleteTransitGatewayMulticastDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayMulticastDomain", location: .body(locationName: "transitGatewayMulticastDomain"), required: false, type: .structure)
        ]

        /// Information about the deleted transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain = "transitGatewayMulticastDomain"
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPeeringAttachment", location: .body(locationName: "transitGatewayPeeringAttachment"), required: false, type: .structure)
        ]

        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, prefixListId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPrefixListReference", location: .body(locationName: "transitGatewayPrefixListReference"), required: false, type: .structure)
        ]

        /// Information about the deleted prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct DeleteTransitGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct DeleteTransitGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateway", location: .body(locationName: "transitGateway"), required: false, type: .structure)
        ]

        /// Information about the deleted transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct DeleteTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]

        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct DeleteTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTable", location: .body(locationName: "transitGatewayRouteTable"), required: false, type: .structure)
        ]

        /// Information about the deleted transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]

        /// Information about the deleted VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct DeleteVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(dryRun: Bool? = nil, volumeId: String) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotificationIds", location: .body(locationName: "ConnectionNotificationId"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// One or more notification IDs.
        public let connectionNotificationIds: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionNotificationIds: [String], dryRun: Bool? = nil) {
            self.connectionNotificationIds = connectionNotificationIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationIds = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the notifications that could not be deleted successfully.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceIds", location: .body(locationName: "ServiceId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more services.
        public let serviceIds: [String]

        public init(dryRun: Bool? = nil, serviceIds: [String]) {
            self.dryRun = dryRun
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceIds = "ServiceId"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the service configurations that were not deleted, if applicable.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more VPC endpoint IDs.
        public let vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DeleteVpcEndpointsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the VPC endpoints that were not successfully deleted.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct DeleteVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct DeleteVpnConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(dryRun: Bool? = nil, vpnConnectionId: String) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnConnectionRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]

        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DeprovisionByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct DeprovisionByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]

        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct DeregisterImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(dryRun: Bool? = nil, imageId: String) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTagAttribute", required: false, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to deregister.
        public let instanceTagAttribute: DeregisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: DeregisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTagAttribute", location: .body(locationName: "instanceTagAttribute"), required: false, type: .structure)
        ]

        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct DeregisterInstanceTagAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeAllTagsOfInstance", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTagKeys", location: .body(locationName: "InstanceTagKey"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether to deregister all tag keys in the current Region. Specify false to deregister all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// Information about the tag keys to deregister.
        public let instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group members' network interfaces.
        public let networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeregisteredMulticastGroupMembers", location: .body(locationName: "deregisteredMulticastGroupMembers"), required: false, type: .structure)
        ]

        /// Information about the deregistered members.
        public let deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers?

        public init(deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers? = nil) {
            self.deregisteredMulticastGroupMembers = deregisteredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupMembers = "deregisteredMulticastGroupMembers"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group sources' network interfaces.
        public let networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeregisteredMulticastGroupSources", location: .body(locationName: "deregisteredMulticastGroupSources"), required: false, type: .structure)
        ]

        /// Information about the deregistered group sources.
        public let deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources?

        public init(deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources? = nil) {
            self.deregisteredMulticastGroupSources = deregisteredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupSources = "deregisteredMulticastGroupSources"
        }
    }

    public struct DescribeAccountAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", location: .body(locationName: "attributeName"), required: false, type: .list, encoding: .list(member:"attributeName")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The account attribute names.
        public let attributeNames: [AccountAttributeName]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attributeNames: [AccountAttributeName]? = nil, dryRun: Bool? = nil) {
            self.attributeNames = attributeNames
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "attributeName"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeAccountAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountAttributes", location: .body(locationName: "accountAttributeSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the account attributes.
        public let accountAttributes: [AccountAttribute]?

        public init(accountAttributes: [AccountAttribute]? = nil) {
            self.accountAttributes = accountAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case accountAttributes = "accountAttributeSet"
        }
    }

    public struct DescribeAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationIds", location: .body(locationName: "AllocationId"), required: false, type: .list, encoding: .list(member:"AllocationId")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "PublicIp"), required: false, type: .list, encoding: .list(member:"PublicIp"))
        ]

        /// [EC2-VPC] Information about the allocation IDs.
        public let allocationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    allocation-id - [EC2-VPC] The allocation ID for the address.    association-id - [EC2-VPC] The association ID for the address.    domain - Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).    instance-id - The ID of the instance the address is associated with, if any.    network-border-group - A unique set of Availability Zones, Local Zones, or Wavelength Zones from where AWS advertises IP addresses.     network-interface-id - [EC2-VPC] The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The AWS account ID of the owner.    private-ip-address - [EC2-VPC] The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address, or the carrier IP address.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
        public let publicIps: [String]?

        public init(allocationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, publicIps: [String]? = nil) {
            self.allocationIds = allocationIds
            self.dryRun = dryRun
            self.filters = filters
            self.publicIps = publicIps
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case dryRun = "dryRun"
            case filters = "Filter"
            case publicIps = "PublicIp"
        }
    }

    public struct DescribeAddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Addresses", location: .body(locationName: "addressesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Elastic IP addresses.
        public let addresses: [Address]?

        public init(addresses: [Address]? = nil) {
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressesSet"
        }
    }

    public struct DescribeAggregateIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeAggregateIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UseLongIdsAggregated", location: .body(locationName: "useLongIdsAggregated"), required: false, type: .boolean)
        ]

        /// Information about each resource's ID format.
        public let statuses: [IdFormat]?
        /// Indicates whether all resource types in the Region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the Region.
        public let useLongIdsAggregated: Bool?

        public init(statuses: [IdFormat]? = nil, useLongIdsAggregated: Bool? = nil) {
            self.statuses = statuses
            self.useLongIdsAggregated = useLongIdsAggregated
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
            case useLongIdsAggregated = "useLongIdsAggregated"
        }
    }

    public struct DescribeAvailabilityZonesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllAvailabilityZones", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "ZoneIds", location: .body(locationName: "ZoneId"), required: false, type: .list, encoding: .list(member:"ZoneId")), 
            AWSShapeMember(label: "ZoneNames", location: .body(locationName: "ZoneName"), required: false, type: .list, encoding: .list(member:"ZoneName"))
        ]

        /// Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your opt-in status. If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.
        public let allAvailabilityZones: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, us-west-2-lax-1) For Wavelength Zones, use the name of the group associated with the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    message - The Zone message.    opt-in-status - The opt-in status (opted-in, and not-opted-in | opt-in-not-required).    parent-zoneID - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    parent-zoneName - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    region-name - The name of the Region for the Zone (for example, us-east-1).    state - The state of the Availability Zone, the Local Zone, or the Wavelength Zone (available | information | impaired | unavailable).    zone-id - The ID of the Availability Zone (for example, use1-az1), the Local Zone (for example, usw2-lax1-az1), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone, for example, local-zone.    zone-name - The name of the Availability Zone (for example, us-east-1a), the Local Zone (for example, us-west-2-lax-1a), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone, for example, local-zone.  
        public let filters: [Filter]?
        /// The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
        public let zoneIds: [String]?
        /// The names of the Availability Zones, Local Zones, and Wavelength Zones.
        public let zoneNames: [String]?

        public init(allAvailabilityZones: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, zoneIds: [String]? = nil, zoneNames: [String]? = nil) {
            self.allAvailabilityZones = allAvailabilityZones
            self.dryRun = dryRun
            self.filters = filters
            self.zoneIds = zoneIds
            self.zoneNames = zoneNames
        }

        private enum CodingKeys: String, CodingKey {
            case allAvailabilityZones = "AllAvailabilityZones"
            case dryRun = "dryRun"
            case filters = "Filter"
            case zoneIds = "ZoneId"
            case zoneNames = "ZoneName"
        }
    }

    public struct DescribeAvailabilityZonesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneInfo"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Availability Zones, Local Zones, and Wavelength Zones.
        public let availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZoneInfo"
        }
    }

    public struct DescribeBundleTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleIds", location: .body(locationName: "BundleId"), required: false, type: .list, encoding: .list(member:"BundleId")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter"))
        ]

        /// The bundle task IDs. Default: Describes all your bundle tasks.
        public let bundleIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.  
        public let filters: [Filter]?

        public init(bundleIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.bundleIds = bundleIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case bundleIds = "BundleId"
            case dryRun = "dryRun"
            case filters = "Filter"
        }
    }

    public struct DescribeBundleTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTasks", location: .body(locationName: "bundleInstanceTasksSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the bundle tasks.
        public let bundleTasks: [BundleTask]?

        public init(bundleTasks: [BundleTask]? = nil) {
            self.bundleTasks = bundleTasks
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTasks = "bundleInstanceTasksSet"
        }
    }

    public struct DescribeByoipCidrsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeByoipCidrsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidrs", location: .body(locationName: "byoipCidrSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about your address ranges.
        public let byoipCidrs: [ByoipCidr]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(byoipCidrs: [ByoipCidr]? = nil, nextToken: String? = nil) {
            self.byoipCidrs = byoipCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidrs = "byoipCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationIds", location: .body(locationName: "CapacityReservationId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Capacity Reservation.
        public let capacityReservationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    instance-type - The type of instance for which the Capacity Reservation reserves capacity.    owner-id - The ID of the AWS account that owns the Capacity Reservation.    availability-zone-id - The Availability Zone ID of the Capacity Reservation.    instance-platform - The type of operating system for which the Capacity Reservation reserves capacity.    availability-zone - The Availability Zone ID of the Capacity Reservation.    tenancy - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.      state - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active- The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.      end-date - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.    end-date-type - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.      instance-match-criteria - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationIds = capacityReservationIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationIds = "CapacityReservationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCapacityReservationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservations", location: .body(locationName: "capacityReservationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the Capacity Reservations.
        public let capacityReservations: [CapacityReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservations: [CapacityReservation]? = nil, nextToken: String? = nil) {
            self.capacityReservations = capacityReservations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservations = "capacityReservationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCarrierGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayIds", location: .body(locationName: "CarrierGatewayId"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// One or more carrier gateway IDs.
        public let carrierGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    carrier-gateway-id - The ID of the carrier gateway.    state - The state of the carrier gateway (pending | failed | available | deleting | deleted).    owner-id - The AWS account ID of the owner of the carrier gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC associated with the carrier gateway.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(carrierGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.carrierGatewayIds = carrierGatewayIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayIds = "CarrierGatewayId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCarrierGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGateways", location: .body(locationName: "carrierGatewaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the carrier gateway.
        public let carrierGateways: [CarrierGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(carrierGateways: [CarrierGateway]? = nil, nextToken: String? = nil) {
            self.carrierGateways = carrierGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateways = "carrierGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClassicLinkInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .list, encoding: .list(member:"InstanceId")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.  vpc-id - The ID of the VPC that the instance is linked to.  
        public let filters: [Filter]?
        /// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
        public let instanceIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClassicLinkInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more linked EC2-Classic instances.
        public let instances: [ClassicLinkInstance]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instances: [ClassicLinkInstance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instancesSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnAuthorizationRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    description - The description of the authorization rule.    destination-cidr - The CIDR of the network to which the authorization rule applies.    group-id - The ID of the Active Directory group to which the authorization rule grants access.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnAuthorizationRulesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizationRules", location: .body(locationName: "authorizationRule"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the authorization rules.
        public let authorizationRules: [AuthorizationRule]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(authorizationRules: [AuthorizationRule]? = nil, nextToken: String? = nil) {
            self.authorizationRules = authorizationRules
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationRules = "authorizationRule"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    connection-id - The ID of the connection.    username - For Active Directory client authentication, the user name of the client who established the client connection.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connections", location: .body(locationName: "connections"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the active and terminated client connections.
        public let connections: [ClientVpnConnection]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connections: [ClientVpnConnection]? = nil, nextToken: String? = nil) {
            self.connections = connections
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "connections"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointIds", location: .body(locationName: "ClientVpnEndpointId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    endpoint-id - The ID of the Client VPN endpoint.    transport-protocol - The transport protocol (tcp | udp).  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointIds = clientVpnEndpointIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointIds = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnEndpointsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpoints", location: .body(locationName: "clientVpnEndpoint"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the Client VPN endpoints.
        public let clientVpnEndpoints: [ClientVpnEndpoint]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnEndpoints: [ClientVpnEndpoint]? = nil, nextToken: String? = nil) {
            self.clientVpnEndpoints = clientVpnEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpoints = "clientVpnEndpoint"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    destination-cidr - The CIDR of the route destination.    origin - How the route was associated with the Client VPN endpoint (associate | add-route).    target-subnet - The ID of the subnet through which traffic is routed.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routes"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Client VPN endpoint routes.
        public let routes: [ClientVpnRoute]?

        public init(nextToken: String? = nil, routes: [ClientVpnRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routes = "routes"
        }
    }

    public struct DescribeClientVpnTargetNetworksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The IDs of the target network associations.
        public let associationIds: [String]?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    association-id - The ID of the association.    target-network-id - The ID of the subnet specified as the target network.    vpc-id - The ID of the VPC in which the target network is located.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationIds"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnTargetNetworksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnTargetNetworks", location: .body(locationName: "clientVpnTargetNetworks"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the associated target networks.
        public let clientVpnTargetNetworks: [TargetNetwork]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnTargetNetworks: [TargetNetwork]? = nil, nextToken: String? = nil) {
            self.clientVpnTargetNetworks = clientVpnTargetNetworks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnTargetNetworks = "clientVpnTargetNetworks"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCoipPoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolIds", location: .body(locationName: "PoolId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:    coip-pool.pool-id       coip-pool.local-gateway-route-table-id   
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        public let poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeCoipPoolsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoipPools", location: .body(locationName: "coipPoolSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the address pools.
        public let coipPools: [CoipPool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(coipPools: [CoipPool]? = nil, nextToken: String? = nil) {
            self.coipPools = coipPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case coipPools = "coipPoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeConversionTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTaskIds", location: .body(locationName: "conversionTaskId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The conversion task IDs.
        public let conversionTaskIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(conversionTaskIds: [String]? = nil, dryRun: Bool? = nil) {
            self.conversionTaskIds = conversionTaskIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskIds = "conversionTaskId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeConversionTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTasks", location: .body(locationName: "conversionTasks"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the conversion tasks.
        public let conversionTasks: [ConversionTask]?

        public init(conversionTasks: [ConversionTask]? = nil) {
            self.conversionTasks = conversionTasks
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTasks = "conversionTasks"
        }
    }

    public struct DescribeCustomerGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayIds", location: .body(locationName: "CustomerGatewayId"), required: false, type: .list, encoding: .list(member:"CustomerGatewayId")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter"))
        ]

        /// One or more customer gateway IDs. Default: Describes all your customer gateways.
        public let customerGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway's Internet-routable external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?

        public init(customerGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayId"
            case dryRun = "dryRun"
            case filters = "Filter"
        }
    }

    public struct DescribeCustomerGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateways", location: .body(locationName: "customerGatewaySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about one or more customer gateways.
        public let customerGateways: [CustomerGateway]?

        public init(customerGateways: [CustomerGateway]? = nil) {
            self.customerGateways = customerGateways
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateways = "customerGatewaySet"
        }
    }

    public struct DescribeDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsIds", location: .body(locationName: "DhcpOptionsId"), required: false, type: .list, encoding: .list(member:"DhcpOptionsId")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
        public let dhcpOptionsIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the AWS account that owns the DHCP options set.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dhcpOptionsIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dhcpOptionsIds = dhcpOptionsIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsIds = "DhcpOptionsId"
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDhcpOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptionsSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more DHCP options sets.
        public let dhcpOptions: [DhcpOptions]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(dhcpOptions: [DhcpOptions]? = nil, nextToken: String? = nil) {
            self.dhcpOptions = dhcpOptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptionsSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayIds", location: .body(locationName: "EgressOnlyInternetGatewayId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more egress-only internet gateway IDs.
        public let egressOnlyInternetGatewayIds: [String]?
        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayIds = egressOnlyInternetGatewayIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 255)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayIds = "EgressOnlyInternetGatewayId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGateways", location: .body(locationName: "egressOnlyInternetGatewaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the egress-only internet gateways.
        public let egressOnlyInternetGateways: [EgressOnlyInternetGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(egressOnlyInternetGateways: [EgressOnlyInternetGateway]? = nil, nextToken: String? = nil) {
            self.egressOnlyInternetGateways = egressOnlyInternetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeElasticGpusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuIds", location: .body(locationName: "ElasticGpuId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic Graphics accelerator IDs.
        public let elasticGpuIds: [String]?
        /// The filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, elasticGpuIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.elasticGpuIds = elasticGpuIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case elasticGpuIds = "ElasticGpuId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeElasticGpusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticGpuSet", location: .body(locationName: "elasticGpuSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the Elastic Graphics accelerators.
        public let elasticGpuSet: [ElasticGpus]?
        /// The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(elasticGpuSet: [ElasticGpus]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.elasticGpuSet = elasticGpuSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuSet = "elasticGpuSet"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeExportImageTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ExportImageTaskIds", location: .body(locationName: "ExportImageTaskId"), required: false, type: .list, encoding: .list(member:"ExportImageTaskId")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the export image tasks.
        public let exportImageTaskIds: [String]?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, exportImageTaskIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.exportImageTaskIds = exportImageTaskIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case exportImageTaskIds = "ExportImageTaskId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeExportImageTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportImageTasks", location: .body(locationName: "exportImageTaskSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the export image tasks.
        public let exportImageTasks: [ExportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(exportImageTasks: [ExportImageTask]? = nil, nextToken: String? = nil) {
            self.exportImageTasks = exportImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case exportImageTasks = "exportImageTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskIds", location: .body(locationName: "exportTaskId"), required: false, type: .list, encoding: .list(member:"ExportTaskId")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter"))
        ]

        /// The export task IDs.
        public let exportTaskIds: [String]?
        /// the filters for the export tasks.
        public let filters: [Filter]?

        public init(exportTaskIds: [String]? = nil, filters: [Filter]? = nil) {
            self.exportTaskIds = exportTaskIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIds = "exportTaskId"
            case filters = "Filter"
        }
    }

    public struct DescribeExportTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTasks", location: .body(locationName: "exportTaskSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the export tasks.
        public let exportTasks: [ExportTask]?

        public init(exportTasks: [ExportTask]? = nil) {
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "exportTaskSet"
        }
    }

    public struct DescribeFastSnapshotRestoreSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "DisabledTime", location: .body(locationName: "disabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DisablingTime", location: .body(locationName: "disablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnabledTime", location: .body(locationName: "enabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnablingTime", location: .body(locationName: "enablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OptimizingTime", location: .body(locationName: "optimizingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "stateTransitionReason"), required: false, type: .string)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: TimeStamp?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.  
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: TimeStamp? = nil, disablingTime: TimeStamp? = nil, enabledTime: TimeStamp? = nil, enablingTime: TimeStamp? = nil, optimizingTime: TimeStamp? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct DescribeFastSnapshotRestoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The possible values are:    availability-zone: The Availability Zone of the snapshot.    owner-id: The ID of the AWS account that enabled fast snapshot restore on the snapshot.    snapshot-id: The ID of the snapshot.    state: The state of fast snapshot restores for the snapshot (enabling | optimizing | enabled | disabling | disabled).  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 200)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFastSnapshotRestoresResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FastSnapshotRestores", location: .body(locationName: "fastSnapshotRestoreSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the state of fast snapshot restores.
        public let fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]? = nil, nextToken: String? = nil) {
            self.fastSnapshotRestores = fastSnapshotRestores
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestores = "fastSnapshotRestoreSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorCode", location: .body(locationName: "errorCode"), required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", location: .body(locationName: "errorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]

        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error Codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
        }
    }

    public struct DescribeFleetHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EventType", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: FleetEventType?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp

        public init(dryRun: Bool? = nil, eventType: FleetEventType? = nil, fleetId: String, maxResults: Int? = nil, nextToken: String? = nil, startTime: TimeStamp) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case eventType = "EventType"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct DescribeFleetHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "HistoryRecords", location: .body(locationName: "historyRecordSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LastEvaluatedTime", location: .body(locationName: "lastEvaluatedTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp)
        ]

        /// The ID of the EC Fleet.
        public let fleetId: String?
        /// Information about the events in the history of the EC2 Fleet.
        public let historyRecords: [HistoryRecordEntry]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: TimeStamp?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?

        public init(fleetId: String? = nil, historyRecords: [HistoryRecordEntry]? = nil, lastEvaluatedTime: TimeStamp? = nil, nextToken: String? = nil, startTime: TimeStamp? = nil) {
            self.fleetId = fleetId
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "fleetId"
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
            case nextToken = "nextToken"
            case startTime = "startTime"
        }
    }

    public struct DescribeFleetInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-type - The instance type.  
        public let filters: [Filter]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveInstances", location: .body(locationName: "activeInstanceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The running instances. This list is refreshed periodically and might be out of date.
        public let activeInstances: [ActiveInstance]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(activeInstances: [ActiveInstance]? = nil, fleetId: String? = nil, nextToken: String? = nil) {
            self.activeInstances = activeInstances
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case fleetId = "fleetId"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFleetsInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "instanceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum)
        ]

        /// The IDs of the instances.
        public let instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "instanceIds"
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
            case platform = "platform"
        }
    }

    public struct DescribeFleetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "FleetIds", location: .body(locationName: "FleetId"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).  
        public let filters: [Filter]?
        /// The ID of the EC2 Fleets.
        public let fleetIds: [String]?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetIds = fleetIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetIds = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fleets", location: .body(locationName: "fleetSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the EC2 Fleets.
        public let fleets: [FleetData]?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(fleets: [FleetData]? = nil, nextToken: String? = nil) {
            self.fleets = fleets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleets = "fleetSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filter", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination to which the flow log publishes data. Possible destination types include cloud-watch-logs and S3.    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filter: [Filter]?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        public let flowLogIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, flowLogIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.flowLogIds = flowLogIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case flowLogIds = "FlowLogId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogs", location: .body(locationName: "flowLogSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the flow logs.
        public let flowLogs: [FlowLog]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(flowLogs: [FlowLog]? = nil, nextToken: String? = nil) {
            self.flowLogs = flowLogs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogs = "flowLogSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string)
        ]

        /// The AFI attribute.
        public let attribute: FpgaImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(attribute: FpgaImageAttributeName, dryRun: Bool? = nil, fpgaImageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DescribeFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageAttribute", location: .body(locationName: "fpgaImageAttribute"), required: false, type: .structure)
        ]

        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct DescribeFpgaImagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "FpgaImageIds", location: .body(locationName: "FpgaImageId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .list, encoding: .list(member:"Owner"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The AWS account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the AWS Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.  
        public let filters: [Filter]?
        /// The AFI IDs.
        public let fpgaImageIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
        public let owners: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fpgaImageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fpgaImageIds = fpgaImageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.owners = owners
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fpgaImageIds = "FpgaImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case owners = "Owner"
        }
    }

    public struct DescribeFpgaImagesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImages", location: .body(locationName: "fpgaImageSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the FPGA images.
        public let fpgaImages: [FpgaImage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fpgaImages: [FpgaImage]? = nil, nextToken: String? = nil) {
            self.fpgaImages = fpgaImages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImages = "fpgaImageSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostReservationOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxDuration", required: false, type: .integer), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "MinDuration", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", required: false, type: .string)
        ]

        /// The filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).  
        public let filter: [Filter]?
        /// This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
        public let maxDuration: Int?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
        public let minDuration: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the reservation offering.
        public let offeringId: String?

        public init(filter: [Filter]? = nil, maxDuration: Int? = nil, maxResults: Int? = nil, minDuration: Int? = nil, nextToken: String? = nil, offeringId: String? = nil) {
            self.filter = filter
            self.maxDuration = maxDuration
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringId = offeringId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 500)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxDuration = "MaxDuration"
            case maxResults = "MaxResults"
            case minDuration = "MinDuration"
            case nextToken = "NextToken"
            case offeringId = "OfferingId"
        }
    }

    public struct DescribeHostReservationOfferingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingSet", location: .body(locationName: "offeringSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the offerings.
        public let offeringSet: [HostOffering]?

        public init(nextToken: String? = nil, offeringSet: [HostOffering]? = nil) {
            self.nextToken = nextToken
            self.offeringSet = offeringSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case offeringSet = "offeringSet"
        }
    }

    public struct DescribeHostReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "HostReservationIdSet", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filter: [Filter]?
        /// The host reservation IDs.
        public let hostReservationIdSet: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostReservationIdSet: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostReservationIdSet = hostReservationIdSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case hostReservationIdSet = "HostReservationIdSet"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeHostReservationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostReservationSet", location: .body(locationName: "hostReservationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Details about the reservation's configuration.
        public let hostReservationSet: [HostReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hostReservationSet: [HostReservation]? = nil, nextToken: String? = nil) {
            self.hostReservationSet = hostReservationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationSet = "hostReservationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", location: .body(locationName: "filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filter: [Filter]?
        /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
        public let hostIds: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostIds = hostIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case hostIds = "hostId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hosts", location: .body(locationName: "hostSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the Dedicated Hosts.
        public let hosts: [Host]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hosts: [Host]? = nil, nextToken: String? = nil) {
            self.hosts = hosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hosts = "hostSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationIds", location: .body(locationName: "AssociationId"), required: false, type: .list, encoding: .list(member:"AssociationId")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The IAM instance profile associations.
        public let associationIds: [String]?
        /// The filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating).  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociations", location: .body(locationName: "iamInstanceProfileAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the IAM instance profile associations.
        public let iamInstanceProfileAssociations: [IamInstanceProfileAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(iamInstanceProfileAssociations: [IamInstanceProfileAssociation]? = nil, nextToken: String? = nil) {
            self.iamInstanceProfileAssociations = iamInstanceProfileAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: false, type: .string)
        ]

        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resource: String?

        public init(resource: String? = nil) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct DescribeIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the ID format for the resource.
        public let statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeIdentityIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string)
        ]

        /// The ARN of the principal, which can be an IAM role, IAM user, or the root user.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resource: String?

        public init(principalArn: String, resource: String? = nil) {
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
        }
    }

    public struct DescribeIdentityIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the ID format for the resources.
        public let statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string)
        ]

        /// The AMI attribute.  Note: Depending on your account privileges, the blockDeviceMapping attribute may return a Client.AuthFailure error. If this happens, use DescribeImages to get information about the block device mapping for the AMI.
        public let attribute: ImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(attribute: ImageAttributeName, dryRun: Bool? = nil, imageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct DescribeImagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ExecutableUsers", location: .body(locationName: "ExecutableBy"), required: false, type: .list, encoding: .list(member:"ExecutableBy")), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "ImageIds", location: .body(locationName: "ImageId"), required: false, type: .list, encoding: .list(member:"ImageId")), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .list, encoding: .list(member:"Owner"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs).
        public let executableUsers: [String]?
        /// The filters.    architecture - The image architecture (i386 | x86_64 | arm64).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.    block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | io2 | st1 | sc1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the EBS volume is encrypted.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias, from an Amazon-maintained list (amazon | aws-marketplace). This is not the user-configured AWS account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The AWS account ID of the owner. We recommend that you use the related parameter instead of this filter.    platform - The platform. To only list Windows-based AMIs, use windows.    product-code - The product code.    product-code.type - The type of the product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).  
        public let filters: [Filter]?
        /// The image IDs. Default: Describes all images available to you.
        public let imageIds: [String]?
        /// Scopes the results to images with the specified owners. You can specify a combination of AWS account IDs, self, amazon, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
        public let owners: [String]?

        public init(dryRun: Bool? = nil, executableUsers: [String]? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.executableUsers = executableUsers
            self.filters = filters
            self.imageIds = imageIds
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case executableUsers = "ExecutableBy"
            case filters = "Filter"
            case imageIds = "ImageId"
            case owners = "Owner"
        }
    }

    public struct DescribeImagesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Images", location: .body(locationName: "imagesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the images.
        public let images: [Image]?

        public init(images: [Image]? = nil) {
            self.images = images
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imagesSet"
        }
    }

    public struct DescribeImportImageTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .list, encoding: .list(member:"ImportTaskId")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        public let filters: [Filter]?
        /// The IDs of the import image tasks.
        public let importTaskIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportImageTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportImageTasks", location: .body(locationName: "importImageTaskSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importImageTasks: [ImportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importImageTasks: [ImportImageTask]? = nil, nextToken: String? = nil) {
            self.importImageTasks = importImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importImageTasks = "importImageTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeImportSnapshotTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .list, encoding: .list(member:"ImportTaskId")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.
        public let filters: [Filter]?
        /// A list of import snapshot task IDs.
        public let importTaskIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportSnapshotTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportSnapshotTasks", location: .body(locationName: "importSnapshotTaskSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importSnapshotTasks: [ImportSnapshotTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importSnapshotTasks: [ImportSnapshotTask]? = nil, nextToken: String? = nil) {
            self.importSnapshotTasks = importSnapshotTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importSnapshotTasks = "importSnapshotTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string)
        ]

        /// The instance attribute. Note: The enaSupport attribute is not supported at this time.
        public let attribute: InstanceAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(attribute: InstanceAttributeName, dryRun: Bool? = nil, instanceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
        }
    }

    public struct DescribeInstanceCreditSpecificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .list, encoding: .list(member:"InstanceId")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-id - The ID of the instance.  
        public let filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
        public let instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceCreditSpecificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCreditSpecifications", location: .body(locationName: "instanceCreditSpecificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the credit option for CPU usage of an instance.
        public let instanceCreditSpecifications: [InstanceCreditSpecification]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceCreditSpecifications: [InstanceCreditSpecification]? = nil, nextToken: String? = nil) {
            self.instanceCreditSpecifications = instanceCreditSpecifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCreditSpecifications = "instanceCreditSpecificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceEventNotificationAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeInstanceEventNotificationAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTagAttribute", location: .body(locationName: "instanceTagAttribute"), required: false, type: .structure)
        ]

        /// Information about the registered tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct DescribeInstanceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "IncludeAllInstances", location: .body(locationName: "includeAllInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .list, encoding: .list(member:"InstanceId")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).  
        public let filters: [Filter]?
        /// When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false 
        public let includeAllInstances: Bool?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        public let instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, includeAllInstances: Bool? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.includeAllInstances = includeAllInstances
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case includeAllInstances = "includeAllInstances"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceStatuses", location: .body(locationName: "instanceStatusSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the status of the instances.
        public let instanceStatuses: [InstanceStatus]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceStatuses: [InstanceStatus]? = nil, nextToken: String? = nil) {
            self.instanceStatuses = instanceStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatuses = "instanceStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceTypeOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocationType", required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    location - This depends on the location type. For example, if the location type is region (default), the location is the Region code (for example, us-east-2.)    instance-type - The instance type.  
        public let filters: [Filter]?
        /// The location type.
        public let locationType: LocationType?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, locationType: LocationType? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.locationType = locationType
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case locationType = "LocationType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypeOfferingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTypeOfferings", location: .body(locationName: "instanceTypeOfferingSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The instance types offered.
        public let instanceTypeOfferings: [InstanceTypeOffering]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceTypeOfferings: [InstanceTypeOffering]? = nil, nextToken: String? = nil) {
            self.instanceTypeOfferings = instanceTypeOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypeOfferings = "instanceTypeOfferingSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InstanceTypes", location: .body(locationName: "InstanceType"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    auto-recovery-supported - Indicates whether auto recovery is supported. (true | false)    bare-metal - Indicates whether it is a bare metal instance type. (true | false)    burstable-performance-supported - Indicates whether it is a burstable performance instance type. (true | false)    current-generation - Indicates whether this instance type is the latest generation instance type of an instance family. (true | false)    ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline throughput performance for an EBS-optimized instance type, in MBps.    ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum throughput performance for an EBS-optimized instance type, in MBps.    ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-support - Indicates whether the instance type is EBS-optimized. (supported | unsupported | default)    ebs-info.encryption-support - Indicates whether EBS encryption is supported. (supported | unsupported)    ebs-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported or required. (required | supported | unsupported)    free-tier-eligible - Indicates whether the instance type is eligible to use in the free tier. (true | false)    hibernation-supported - Indicates whether On-Demand hibernation is supported. (true | false)    hypervisor - The hypervisor used. (nitro | xen)    instance-storage-info.disk.count - The number of local disks.    instance-storage-info.disk.size-in-gb - The storage size of each instance storage disk, in GB.    instance-storage-info.disk.type - The storage technology for the local instance storage disks. (hdd | ssd)    instance-storage-info.total-size-in-gb - The total amount of storage available from all local instance storage, in GB.    instance-storage-supported - Indicates whether the instance type has local instance storage. (true | false)    memory-info.size-in-mib - The memory size.    network-info.ena-support - Indicates whether Elastic Network Adapter (ENA) is supported or required. (required | supported | unsupported)    network-info.efa-supported - Indicates whether the instance type supports Elastic Fabric Adapter (EFA). (true | false)    network-info.ipv4-addresses-per-interface - The maximum number of private IPv4 addresses per network interface.    network-info.ipv6-addresses-per-interface - The maximum number of private IPv6 addresses per network interface.    network-info.ipv6-supported - Indicates whether the instance type supports IPv6. (true | false)    network-info.maximum-network-interfaces - The maximum number of network interfaces per instance.    network-info.network-performance - Describes the network performance.    processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in GHz.    vcpu-info.default-cores - The default number of cores for the instance type.    vcpu-info.default-threads-per-core - The default number of threads per core for the instance type.    vcpu-info.default-vcpus - The default number of vCPUs for the instance type.  
        public let filters: [Filter]?
        /// The instance types. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceTypes: [InstanceType]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.instanceTypes, name:"instanceTypes", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTypes", location: .body(locationName: "instanceTypeSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceTypes: [InstanceTypeInfo]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceTypes: [InstanceTypeInfo]? = nil, nextToken: String? = nil) {
            self.instanceTypes = instanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypes = "instanceTypeSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .list, encoding: .list(member:"InstanceId")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2010-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    client-token - The idempotency token you provided when you launched the instance.    dns-name - The public DNS name of the instance.    group-id - The ID of the security group for the instance. EC2-Classic only.    group-name - The name of the security group for the instance. EC2-Classic only.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.     host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance or a Scheduled Instance (spot | scheduled).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched.    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.http-put-response-hop-limit - The http metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-endpoint - Enable or disable metadata access on http endpoint (enabled | disabled)    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by AWS.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    owner-id - The AWS account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    private-dns-name - The private IPv4 DNS name of the instance.    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.  
        public let filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances.
        public let instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Reservations", location: .body(locationName: "reservationSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the reservations.
        public let reservations: [Reservation]?

        public init(nextToken: String? = nil, reservations: [Reservation]? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservations = "reservationSet"
        }
    }

    public struct DescribeInternetGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InternetGatewayIds", location: .body(locationName: "internetGatewayId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the AWS account that owns the internet gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// One or more internet gateway IDs. Default: Describes all your internet gateways.
        public let internetGatewayIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, internetGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.internetGatewayIds = internetGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case internetGatewayIds = "internetGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInternetGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateways", location: .body(locationName: "internetGatewaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more internet gateways.
        public let internetGateways: [InternetGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(internetGateways: [InternetGateway]? = nil, nextToken: String? = nil) {
            self.internetGateways = internetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateways = "internetGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpv6PoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolIds", location: .body(locationName: "PoolId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the IPv6 address pools.
        public let poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeIpv6PoolsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Pools", location: .body(locationName: "ipv6PoolSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the IPv6 address pools.
        public let ipv6Pools: [Ipv6Pool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6Pools: [Ipv6Pool]? = nil, nextToken: String? = nil) {
            self.ipv6Pools = ipv6Pools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Pools = "ipv6PoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeKeyPairsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "KeyNames", location: .body(locationName: "KeyName"), required: false, type: .list, encoding: .list(member:"KeyName")), 
            AWSShapeMember(label: "KeyPairIds", location: .body(locationName: "KeyPairId"), required: false, type: .list, encoding: .list(member:"KeyPairId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key-pair-id - The ID of the key pair.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.  
        public let filters: [Filter]?
        /// The key pair names. Default: Describes all your key pairs.
        public let keyNames: [String]?
        /// The IDs of the key pairs.
        public let keyPairIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, keyNames: [String]? = nil, keyPairIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.keyNames = keyNames
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case keyNames = "KeyName"
            case keyPairIds = "KeyPairId"
        }
    }

    public struct DescribeKeyPairsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPairs", location: .body(locationName: "keySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the key pairs.
        public let keyPairs: [KeyPairInfo]?

        public init(keyPairs: [KeyPairInfo]? = nil) {
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keySet"
        }
    }

    public struct DescribeLaunchTemplateVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "MaxVersion", required: false, type: .string), 
            AWSShapeMember(label: "MinVersion", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "LaunchTemplateVersion"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    ram-disk-id - The RAM disk ID.  
        public let filters: [Filter]?
        /// The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateId: String?
        /// The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateName: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The version number up to which to describe launch template versions.
        public let maxVersion: String?
        /// The version number after which to describe launch template versions.
        public let minVersion: String?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same call. You cannot specify numbers.
        public let versions: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, maxResults: Int? = nil, maxVersion: String? = nil, minVersion: String? = nil, nextToken: String? = nil, versions: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.maxResults = maxResults
            self.maxVersion = maxVersion
            self.minVersion = minVersion
            self.nextToken = nextToken
            self.versions = versions
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case maxVersion = "MaxVersion"
            case minVersion = "MinVersion"
            case nextToken = "NextToken"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DescribeLaunchTemplateVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateVersions", location: .body(locationName: "launchTemplateVersionSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the launch template versions.
        public let launchTemplateVersions: [LaunchTemplateVersion]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplateVersions: [LaunchTemplateVersion]? = nil, nextToken: String? = nil) {
            self.launchTemplateVersions = launchTemplateVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersions = "launchTemplateVersionSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLaunchTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LaunchTemplateIds", location: .body(locationName: "LaunchTemplateId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LaunchTemplateNames", location: .body(locationName: "LaunchTemplateName"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// One or more launch template IDs.
        public let launchTemplateIds: [String]?
        /// One or more launch template names.
        public let launchTemplateNames: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateIds: [String]? = nil, launchTemplateNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateIds = launchTemplateIds
            self.launchTemplateNames = launchTemplateNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.launchTemplateNames?.forEach {
                try validate($0, name: "launchTemplateNames[]", parent: name, max: 128)
                try validate($0, name: "launchTemplateNames[]", parent: name, min: 3)
                try validate($0, name: "launchTemplateNames[]", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            }
            try validate(self.maxResults, name:"maxResults", parent: name, max: 200)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateIds = "LaunchTemplateId"
            case launchTemplateNames = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLaunchTemplatesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplates", location: .body(locationName: "launchTemplates"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the launch templates.
        public let launchTemplates: [LaunchTemplate]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplates: [LaunchTemplate]? = nil, nextToken: String? = nil) {
            self.launchTemplates = launchTemplates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplates = "launchTemplates"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds", location: .body(locationName: "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    state - The state of the association.  
        public let filters: [Filter]?
        /// The IDs of the associations.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationIds = localGatewayRouteTableVirtualInterfaceGroupAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationIds = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTableVirtualInterfaceGroupAssociations", location: .body(locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the associations.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVirtualInterfaceGroupAssociations = localGatewayRouteTableVirtualInterfaceGroupAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVirtualInterfaceGroupAssociations = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociationIds", location: .body(locationName: "LocalGatewayRouteTableVpcAssociationId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-vpc-association-id - The ID of the association.    state - The state of the association.    vpc-id - The ID of the VPC.  
        public let filters: [Filter]?
        /// The IDs of the associations.
        public let localGatewayRouteTableVpcAssociationIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVpcAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVpcAssociationIds = localGatewayRouteTableVpcAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVpcAssociationIds = "LocalGatewayRouteTableVpcAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociations", location: .body(locationName: "localGatewayRouteTableVpcAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the associations.
        public let localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVpcAssociations = localGatewayRouteTableVpcAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociations = "localGatewayRouteTableVpcAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayRouteTableIds", location: .body(locationName: "LocalGatewayRouteTableId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of a local gateway route table.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    state - The state of the local gateway route table.  
        public let filters: [Filter]?
        /// The IDs of the local gateway route tables.
        public let localGatewayRouteTableIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableIds = localGatewayRouteTableIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableIds = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayRouteTables", location: .body(locationName: "localGatewayRouteTableSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the local gateway route tables.
        public let localGatewayRouteTables: [LocalGatewayRouteTable]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTables: [LocalGatewayRouteTable]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTables = localGatewayRouteTables
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTables = "localGatewayRouteTableSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroupIds", location: .body(locationName: "LocalGatewayVirtualInterfaceGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-virtual-interface-id - The ID of the virtual interface.    local-gateway-virtual-interface-group-id - The ID of the virtual interface group.  
        public let filters: [Filter]?
        /// The IDs of the virtual interface groups.
        public let localGatewayVirtualInterfaceGroupIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceGroupIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceGroupIds = localGatewayVirtualInterfaceGroupIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceGroupIds = "LocalGatewayVirtualInterfaceGroupId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroups", location: .body(locationName: "localGatewayVirtualInterfaceGroupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The virtual interface groups.
        public let localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaceGroups = localGatewayVirtualInterfaceGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaceGroups = "localGatewayVirtualInterfaceGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceIds", location: .body(locationName: "LocalGatewayVirtualInterfaceId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        public let filters: [Filter]?
        /// The IDs of the virtual interfaces.
        public let localGatewayVirtualInterfaceIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceIds = "LocalGatewayVirtualInterfaceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayVirtualInterfaces", location: .body(locationName: "localGatewayVirtualInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the virtual interfaces.
        public let localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaces = localGatewayVirtualInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaces = "localGatewayVirtualInterfaceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayIds", location: .body(locationName: "LocalGatewayId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        public let filters: [Filter]?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    state - The state of the association.  
        public let localGatewayIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayIds = localGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayIds = "LocalGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGateways", location: .body(locationName: "localGatewaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the local gateways.
        public let localGateways: [LocalGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGateways: [LocalGateway]? = nil, nextToken: String? = nil) {
            self.localGateways = localGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGateways = "localGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeManagedPrefixListsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "PrefixListId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    owner-id - The ID of the prefix list owner.    prefix-list-id - The ID of the prefix list.    prefix-list-name - The name of the prefix list.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        public let prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribeManagedPrefixListsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixLists", location: .body(locationName: "prefixListSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix lists.
        public let prefixLists: [ManagedPrefixList]?

        public init(nextToken: String? = nil, prefixLists: [ManagedPrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribeMovingAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "publicIp"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more Elastic IP addresses.
        public let publicIps: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, publicIps: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.publicIps = publicIps
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case publicIps = "publicIp"
        }
    }

    public struct DescribeMovingAddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MovingAddressStatuses", location: .body(locationName: "movingAddressStatusSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The status for each Elastic IP address.
        public let movingAddressStatuses: [MovingAddressStatus]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(movingAddressStatuses: [MovingAddressStatus]? = nil, nextToken: String? = nil) {
            self.movingAddressStatuses = movingAddressStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case movingAddressStatuses = "movingAddressStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNatGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filter", required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NatGatewayIds", location: .body(locationName: "NatGatewayId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.  
        public let filter: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// One or more NAT gateway IDs.
        public let natGatewayIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, maxResults: Int? = nil, natGatewayIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.maxResults = maxResults
            self.natGatewayIds = natGatewayIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case maxResults = "MaxResults"
            case natGatewayIds = "NatGatewayId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNatGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGateways", location: .body(locationName: "natGatewaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the NAT gateways.
        public let natGateways: [NatGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(natGateways: [NatGateway]? = nil, nextToken: String? = nil) {
            self.natGateways = natGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case natGateways = "natGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkAclsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NetworkAclIds", location: .body(locationName: "NetworkAclId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.rule-number - The number of an entry (in other words, rule) in the set of ACL entries.    network-acl-id - The ID of the network ACL.    owner-id - The ID of the AWS account that owns the network ACL.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network ACL.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// One or more network ACL IDs. Default: Describes all your network ACLs.
        public let networkAclIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkAclIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkAclIds = networkAclIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkAclIds = "NetworkAclId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkAclsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcls", location: .body(locationName: "networkAclSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more network ACLs.
        public let networkAcls: [NetworkAcl]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkAcls: [NetworkAcl]? = nil, nextToken: String? = nil) {
            self.networkAcls = networkAcls
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcls = "networkAclSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]

        /// The attribute of the network interface. This parameter is required.
        public let attribute: NetworkInterfaceAttribute?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(attribute: NetworkInterfaceAttribute? = nil, dryRun: Bool? = nil, networkInterfaceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DescribeNetworkInterfaceAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure)
        ]

        /// The attachment (if any) of the network interface.
        public let attachment: NetworkInterfaceAttachment?
        /// The description of the network interface.
        public let description: AttributeValue?
        /// The security groups associated with the network interface.
        public let groups: [GroupIdentifier]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachment? = nil, description: AttributeValue? = nil, groups: [GroupIdentifier]? = nil, networkInterfaceId: String? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment = "attachment"
            case description = "description"
            case groups = "groupSet"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct DescribeNetworkInterfacePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfacePermissionIds", location: .body(locationName: "NetworkInterfacePermissionId"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the permission.    network-interface-permission.network-interface-id - The ID of the network interface.    network-interface-permission.aws-account-id - The AWS account ID.    network-interface-permission.aws-service - The AWS service.    network-interface-permission.permission - The type of permission (INSTANCE-ATTACH | EIP-ASSOCIATE).  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. If this parameter is not specified, up to 50 results are returned by default.
        public let maxResults: Int?
        /// One or more network interface permission IDs.
        public let networkInterfacePermissionIds: [String]?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfacePermissionIds: [String]? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfacePermissionIds = networkInterfacePermissionIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 255)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInterfacePermissionIds = "NetworkInterfacePermissionId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfacePermissions", location: .body(locationName: "networkInterfacePermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// The network interface permissions.
        public let networkInterfacePermissions: [NetworkInterfacePermission]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(networkInterfacePermissions: [NetworkInterfacePermission]? = nil, nextToken: String? = nil) {
            self.networkInterfacePermissions = networkInterfacePermissions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfacePermissions = "networkInterfacePermissions"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "NetworkInterfaceId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    addresses.private-ip-address - The private IPv4 addresses associated with the network interface.    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.association.public-ip - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attachment-id - The ID of the interface attachment.    attachment.attach-time - The time that the network interface was attached to an instance.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    group-name - The name of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The AWS account ID of the network interface owner.    private-ip-address - The private IPv4 address or addresses of the network interface.    private-dns-name - The private DNS name of the network interface (IPv4).    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    requester-managed - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).    source-dest-check - Indicates whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available; if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network interface.  
        public let filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request.
        public let maxResults: Int?
        /// One or more network interface IDs. Default: Describes all your network interfaces.
        public let networkInterfaceIds: [String]?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfaceIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfaceIds = networkInterfaceIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "filter"
            case maxResults = "MaxResults"
            case networkInterfaceIds = "NetworkInterfaceId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more network interfaces.
        public let networkInterfaces: [NetworkInterface]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInterfaces: [NetworkInterface]? = nil, nextToken: String? = nil) {
            self.networkInterfaces = networkInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaces = "networkInterfaceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribePlacementGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .list, encoding: .list(member:"GroupId")), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "groupName"), required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - The name of the placement group.    state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread | partition).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The IDs of the placement groups.
        public let groupIds: [String]?
        /// The names of the placement groups. Default: Describes all your placement groups, or only those otherwise specified.
        public let groupNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "groupName"
        }
    }

    public struct DescribePlacementGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementGroups", location: .body(locationName: "placementGroupSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the placement groups.
        public let placementGroups: [PlacementGroup]?

        public init(placementGroups: [PlacementGroup]? = nil) {
            self.placementGroups = placementGroups
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroups = "placementGroupSet"
        }
    }

    public struct DescribePrefixListsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "PrefixListId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        public let prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribePrefixListsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixLists", location: .body(locationName: "prefixListSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// All available prefix lists.
        public let prefixLists: [PrefixList]?

        public init(nextToken: String? = nil, prefixLists: [PrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribePrincipalIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "Resource"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. 
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resources: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, resources: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resources = resources
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resources = "Resource"
        }
    }

    public struct DescribePrincipalIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Principals", location: .body(locationName: "principalSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the ID format settings for the ARN.
        public let principals: [PrincipalIdFormat]?

        public init(nextToken: String? = nil, principals: [PrincipalIdFormat]? = nil) {
            self.nextToken = nextToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case principals = "principalSet"
        }
    }

    public struct DescribePublicIpv4PoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolIds", location: .body(locationName: "PoolId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        public let poolIds: [String]?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 10)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribePublicIpv4PoolsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIpv4Pools", location: .body(locationName: "publicIpv4PoolSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the address pools.
        public let publicIpv4Pools: [PublicIpv4Pool]?

        public init(nextToken: String? = nil, publicIpv4Pools: [PublicIpv4Pool]? = nil) {
            self.nextToken = nextToken
            self.publicIpv4Pools = publicIpv4Pools
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case publicIpv4Pools = "publicIpv4PoolSet"
        }
    }

    public struct DescribeRegionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllRegions", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "RegionNames", location: .body(locationName: "RegionName"), required: false, type: .list, encoding: .list(member:"RegionName"))
        ]

        /// Indicates whether to display all Regions, including Regions that are disabled for your account.
        public let allRegions: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).    opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in | not-opted-in).    region-name - The name of the Region (for example, us-east-1).  
        public let filters: [Filter]?
        /// The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
        public let regionNames: [String]?

        public init(allRegions: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, regionNames: [String]? = nil) {
            self.allRegions = allRegions
            self.dryRun = dryRun
            self.filters = filters
            self.regionNames = regionNames
        }

        private enum CodingKeys: String, CodingKey {
            case allRegions = "AllRegions"
            case dryRun = "dryRun"
            case filters = "Filter"
            case regionNames = "RegionName"
        }
    }

    public struct DescribeRegionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Regions", location: .body(locationName: "regionInfo"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Regions.
        public let regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regionInfo"
        }
    }

    public struct DescribeReservedInstancesListingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string)
        ]

        /// One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.  
        public let filters: [Filter]?
        /// One or more Reserved Instance IDs.
        public let reservedInstancesId: String?
        /// One or more Reserved Instance listing IDs.
        public let reservedInstancesListingId: String?

        public init(filters: [Filter]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil) {
            self.filters = filters
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case reservedInstancesId = "reservedInstancesId"
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct DescribeReservedInstancesListingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Reserved Instance listing.
        public let reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct DescribeReservedInstancesModificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesModificationIds", location: .body(locationName: "ReservedInstancesModificationId"), required: false, type: .list, encoding: .list(member:"ReservedInstancesModificationId"))
        ]

        /// One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    modification-result.target-configuration.platform - The network platform of the new Reserved Instances (EC2-Classic | EC2-VPC).    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.  
        public let filters: [Filter]?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// IDs for the submitted modification request.
        public let reservedInstancesModificationIds: [String]?

        public init(filters: [Filter]? = nil, nextToken: String? = nil, reservedInstancesModificationIds: [String]? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.reservedInstancesModificationIds = reservedInstancesModificationIds
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case nextToken = "nextToken"
            case reservedInstancesModificationIds = "ReservedInstancesModificationId"
        }
    }

    public struct DescribeReservedInstancesModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesModifications", location: .body(locationName: "reservedInstancesModificationsSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The Reserved Instance modification information.
        public let reservedInstancesModifications: [ReservedInstancesModification]?

        public init(nextToken: String? = nil, reservedInstancesModifications: [ReservedInstancesModification]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesModifications = reservedInstancesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservedInstancesModifications = "reservedInstancesModificationsSet"
        }
    }

    public struct DescribeReservedInstancesOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "IncludeMarketplace", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "MaxDuration", required: false, type: .long), 
            AWSShapeMember(label: "MaxInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "MinDuration", required: false, type: .long), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesOfferingIds", location: .body(locationName: "ReservedInstancesOfferingId"), required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC))     reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: [Filter]?
        /// Include Reserved Instance Marketplace offerings in the response.
        public let includeMarketplace: Bool?
        /// The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// The instance type that the reservation will cover (for example, m1.small). For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
        public let maxDuration: Int64?
        /// The maximum number of instances to filter when searching for offerings. Default: 20
        public let maxInstanceCount: Int?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100
        public let maxResults: Int?
        /// The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
        public let minDuration: Int64?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The offering class of the Reserved Instance. Can be standard or convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type. 
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
        public let productDescription: RIProductDescription?
        /// One or more Reserved Instances offering IDs.
        public let reservedInstancesOfferingIds: [String]?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, includeMarketplace: Bool? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, maxDuration: Int64? = nil, maxInstanceCount: Int? = nil, maxResults: Int? = nil, minDuration: Int64? = nil, nextToken: String? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, reservedInstancesOfferingIds: [String]? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.filters = filters
            self.includeMarketplace = includeMarketplace
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.maxDuration = maxDuration
            self.maxInstanceCount = maxInstanceCount
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
            case filters = "Filter"
            case includeMarketplace = "IncludeMarketplace"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "InstanceType"
            case maxDuration = "MaxDuration"
            case maxInstanceCount = "MaxInstanceCount"
            case maxResults = "maxResults"
            case minDuration = "MinDuration"
            case nextToken = "nextToken"
            case offeringClass = "OfferingClass"
            case offeringType = "offeringType"
            case productDescription = "ProductDescription"
            case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
        }
    }

    public struct DescribeReservedInstancesOfferingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesOfferings", location: .body(locationName: "reservedInstancesOfferingsSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of Reserved Instances offerings.
        public let reservedInstancesOfferings: [ReservedInstancesOffering]?

        public init(nextToken: String? = nil, reservedInstancesOfferings: [ReservedInstancesOffering]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesOfferings = reservedInstancesOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
        }
    }

    public struct DescribeReservedInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: false, type: .list, encoding: .list(member:"ReservedInstancesId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: [Filter]?
        /// Describes whether the Reserved Instance is Standard or Convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
        public let reservedInstancesIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, reservedInstancesIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.reservedInstancesIds = reservedInstancesIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case offeringClass = "OfferingClass"
            case offeringType = "offeringType"
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DescribeReservedInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstances", location: .body(locationName: "reservedInstancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A list of Reserved Instances.
        public let reservedInstances: [ReservedInstances]?

        public init(reservedInstances: [ReservedInstances]? = nil) {
            self.reservedInstances = reservedInstances
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstances = "reservedInstancesSet"
        }
    }

    public struct DescribeRouteTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    owner-id - The ID of the AWS account that owns the route table.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the AWS service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.transit-gateway-id - The ID of a transit gateway.    route.origin - Describes how the route was created. CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering connection specified in a route in the table.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the route table.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more route table IDs. Default: Describes all your route tables.
        public let routeTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, routeTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.routeTableIds = routeTableIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 100)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case routeTableIds = "RouteTableId"
        }
    }

    public struct DescribeRouteTablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTables", location: .body(locationName: "routeTableSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more route tables.
        public let routeTables: [RouteTable]?

        public init(nextToken: String? = nil, routeTables: [RouteTable]? = nil) {
            self.nextToken = nextToken
            self.routeTables = routeTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routeTables = "routeTableSet"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "FirstSlotStartTimeRange", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "MaxSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "MinSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", required: true, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: [Filter]?
        /// The time period for the first schedule to start.
        public let firstSlotStartTimeRange: SlotDateTimeRangeRequest
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
        public let maxSlotDurationInHours: Int?
        /// The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
        public let minSlotDurationInHours: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrenceRequest

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, firstSlotStartTimeRange: SlotDateTimeRangeRequest, maxResults: Int? = nil, maxSlotDurationInHours: Int? = nil, minSlotDurationInHours: Int? = nil, nextToken: String? = nil, recurrence: ScheduledInstanceRecurrenceRequest) {
            self.dryRun = dryRun
            self.filters = filters
            self.firstSlotStartTimeRange = firstSlotStartTimeRange
            self.maxResults = maxResults
            self.maxSlotDurationInHours = maxSlotDurationInHours
            self.minSlotDurationInHours = minSlotDurationInHours
            self.nextToken = nextToken
            self.recurrence = recurrence
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 300)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case firstSlotStartTimeRange = "FirstSlotStartTimeRange"
            case maxResults = "MaxResults"
            case maxSlotDurationInHours = "MaxSlotDurationInHours"
            case minSlotDurationInHours = "MinSlotDurationInHours"
            case nextToken = "NextToken"
            case recurrence = "Recurrence"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ScheduledInstanceAvailabilitySet", location: .body(locationName: "scheduledInstanceAvailabilitySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the available Scheduled Instances.
        public let scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]?

        public init(nextToken: String? = nil, scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceAvailabilitySet = "scheduledInstanceAvailabilitySet"
        }
    }

    public struct DescribeScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledInstanceIds", location: .body(locationName: "ScheduledInstanceId"), required: false, type: .list, encoding: .list(member:"ScheduledInstanceId")), 
            AWSShapeMember(label: "SlotStartTimeRange", required: false, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The Scheduled Instance IDs.
        public let scheduledInstanceIds: [String]?
        /// The time period for the first schedule to start.
        public let slotStartTimeRange: SlotStartTimeRangeRequest?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, scheduledInstanceIds: [String]? = nil, slotStartTimeRange: SlotStartTimeRangeRequest? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.scheduledInstanceIds = scheduledInstanceIds
            self.slotStartTimeRange = slotStartTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case scheduledInstanceIds = "ScheduledInstanceId"
            case slotStartTimeRange = "SlotStartTimeRange"
        }
    }

    public struct DescribeScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: [ScheduledInstance]?

        public init(nextToken: String? = nil, scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct DescribeSecurityGroupReferencesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups in your account.
        public let groupId: [String]

        public init(dryRun: Bool? = nil, groupId: [String]) {
            self.dryRun = dryRun
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
        }
    }

    public struct DescribeSecurityGroupReferencesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupReferenceSet", location: .body(locationName: "securityGroupReferenceSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the VPCs with the referencing security groups.
        public let securityGroupReferenceSet: [SecurityGroupReference]?

        public init(securityGroupReferenceSet: [SecurityGroupReference]? = nil) {
            self.securityGroupReferenceSet = securityGroupReferenceSet
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupReferenceSet = "securityGroupReferenceSet"
        }
    }

    public struct DescribeSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .list, encoding: .list(member:"groupId")), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .list, encoding: .list(member:"GroupName")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp or a protocol number).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an AWS account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that has been referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp or a protocol number).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an AWS account that has been referenced in an inbound security group rule.    owner-id - The AWS account ID of the owner of the security group.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.  
        public let filters: [Filter]?
        /// The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all your security groups.
        public let groupIds: [String]?
        /// [EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all your security groups.
        public let groupNames: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeSecurityGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroupInfo"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the security groups.
        public let securityGroups: [SecurityGroup]?

        public init(nextToken: String? = nil, securityGroups: [SecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityGroups = "securityGroupInfo"
        }
    }

    public struct DescribeSnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]

        /// The snapshot attribute you would like to view.
        public let attribute: SnapshotAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String

        public init(attribute: SnapshotAttributeName, dryRun: Bool? = nil, snapshotId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DescribeSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateVolumePermissions", location: .body(locationName: "createVolumePermission"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string)
        ]

        /// The users and groups that have the permissions for creating volumes from the snapshot.
        public let createVolumePermissions: [CreateVolumePermission]?
        /// The product codes.
        public let productCodes: [ProductCode]?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?

        public init(createVolumePermissions: [CreateVolumePermission]? = nil, productCodes: [ProductCode]? = nil, snapshotId: String? = nil) {
            self.createVolumePermissions = createVolumePermissions
            self.productCodes = productCodes
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case createVolumePermissions = "createVolumePermission"
            case productCodes = "productCodes"
            case snapshotId = "snapshotId"
        }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "OwnerIds", location: .body(locationName: "Owner"), required: false, type: .list, encoding: .list(member:"Owner")), 
            AWSShapeMember(label: "RestorableByUserIds", location: .body(locationName: "RestorableBy"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "SnapshotIds", location: .body(locationName: "SnapshotId"), required: false, type: .list, encoding: .list(member:"SnapshotId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list (amazon). This is not the user-configured AWS account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The AWS account ID of the owner. We recommend that you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.  
        public let filters: [Filter]?
        /// The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Scopes the results to snapshots with the specified owners. You can specify a combination of AWS account IDs, self, and amazon.
        public let ownerIds: [String]?
        /// The IDs of the AWS accounts that can create volumes from the snapshot.
        public let restorableByUserIds: [String]?
        /// The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
        public let snapshotIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, ownerIds: [String]? = nil, restorableByUserIds: [String]? = nil, snapshotIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ownerIds = ownerIds
            self.restorableByUserIds = restorableByUserIds
            self.snapshotIds = snapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case ownerIds = "Owner"
            case restorableByUserIds = "RestorableBy"
            case snapshotIds = "SnapshotId"
        }
    }

    public struct DescribeSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", location: .body(locationName: "snapshotSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the snapshots.
        public let snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshots = "snapshotSet"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]

        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct DescribeSpotFleetInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActiveInstances", location: .body(locationName: "activeInstanceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string)
        ]

        /// The running instances. This list is refreshed periodically and might be out of date.
        public let activeInstances: [ActiveInstance]?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(activeInstances: [ActiveInstance]? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil) {
            self.activeInstances = activeInstances
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetRequestHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: true, type: .timestamp)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: EventType?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp

        public init(dryRun: Bool? = nil, eventType: EventType? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String, startTime: TimeStamp) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case eventType = "eventType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotFleetRequestHistoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HistoryRecords", location: .body(locationName: "historyRecordSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LastEvaluatedTime", location: .body(locationName: "lastEvaluatedTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp)
        ]

        /// Information about the events in the history of the Spot Fleet request.
        public let historyRecords: [HistoryRecord]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: TimeStamp?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?

        public init(historyRecords: [HistoryRecord]? = nil, lastEvaluatedTime: TimeStamp? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil, startTime: TimeStamp? = nil) {
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotFleetRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The IDs of the Spot Fleet requests.
        public let spotFleetRequestIds: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetRequestsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestConfigs", location: .body(locationName: "spotFleetRequestConfigSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the configuration of your Spot Fleet.
        public let spotFleetRequestConfigs: [SpotFleetRequestConfig]?

        public init(nextToken: String? = nil, spotFleetRequestConfigs: [SpotFleetRequestConfig]? = nil) {
            self.nextToken = nextToken
            self.spotFleetRequestConfigs = spotFleetRequestConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotFleetRequestConfigs = "spotFleetRequestConfigSet"
        }
    }

    public struct DescribeSpotInstanceRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: false, type: .list, encoding: .list(member:"SpotInstanceRequestId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide for Linux Instances.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more Spot Instance request IDs.
        public let spotInstanceRequestIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotInstanceRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct DescribeSpotInstanceRequestsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more Spot Instance requests.
        public let spotInstanceRequests: [SpotInstanceRequest]?

        public init(nextToken: String? = nil, spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.nextToken = nextToken
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DescribeSpotPriceHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "InstanceTypes", location: .body(locationName: "InstanceType"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ProductDescriptions", location: .body(locationName: "ProductDescription"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp)
        ]

        /// Filters the results by the specified Availability Zone.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let endTime: TimeStamp?
        /// One or more filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater than or less than comparison is not supported.  
        public let filters: [Filter]?
        /// Filters the results by the specified instance types.
        public let instanceTypes: [InstanceType]?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Filters the results by the specified basic product descriptions.
        public let productDescriptions: [String]?
        /// The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, endTime: TimeStamp? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil, productDescriptions: [String]? = nil, startTime: TimeStamp? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.endTime = endTime
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.productDescriptions = productDescriptions
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case dryRun = "dryRun"
            case endTime = "endTime"
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case productDescriptions = "ProductDescription"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotPriceHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPriceHistory", location: .body(locationName: "spotPriceHistorySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.
        public let nextToken: String?
        /// The historical Spot prices.
        public let spotPriceHistory: [SpotPrice]?

        public init(nextToken: String? = nil, spotPriceHistory: [SpotPrice]? = nil) {
            self.nextToken = nextToken
            self.spotPriceHistory = spotPriceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotPriceHistory = "spotPriceHistorySet"
        }
    }

    public struct DescribeStaleSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 255)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeStaleSecurityGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "StaleSecurityGroupSet", location: .body(locationName: "staleSecurityGroupSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the stale security groups.
        public let staleSecurityGroupSet: [StaleSecurityGroup]?

        public init(nextToken: String? = nil, staleSecurityGroupSet: [StaleSecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.staleSecurityGroupSet = staleSecurityGroupSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case staleSecurityGroupSet = "staleSecurityGroupSet"
        }
    }

    public struct DescribeSubnetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "SubnetId"), required: false, type: .list, encoding: .list(member:"SubnetId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    default-for-az - Indicates whether this is the default subnet for the Availability Zone. You can also use defaultForAz as the filter name.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    owner-id - The ID of the AWS account that owns the subnet.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more subnet IDs. Default: Describes all your subnets.
        public let subnetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, subnetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case subnetIds = "SubnetId"
        }
    }

    public struct DescribeSubnetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Subnets", location: .body(locationName: "subnetSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more subnets.
        public let subnets: [Subnet]?

        public init(nextToken: String? = nil, subnets: [Subnet]? = nil) {
            self.nextToken = nextToken
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subnets = "subnetSet"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type (customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet | fpga-image | host-reservation | image | instance | internet-gateway | key-pair | launch-template | natgateway | network-acl | network-interface | placement-group | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpc-endpoint | vpc-endpoint-service | vpc-peering-connection | vpn-connection | vpn-gateway).    tag:&lt;key&gt; - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeTagsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The tags.
        public let tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tagSet"
        }
    }

    public struct DescribeTrafficMirrorFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorFilterIds", location: .body(locationName: "TrafficMirrorFilterId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror filter description.    traffic-mirror-filter-id: The ID of the Traffic Mirror filter.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorFilterIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorFilterIds = trafficMirrorFilterIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorFilterIds = "TrafficMirrorFilterId"
        }
    }

    public struct DescribeTrafficMirrorFiltersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorFilters", location: .body(locationName: "trafficMirrorFilterSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror filters.
        public let trafficMirrorFilters: [TrafficMirrorFilter]?

        public init(nextToken: String? = nil, trafficMirrorFilters: [TrafficMirrorFilter]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorFilters = trafficMirrorFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorFilters = "trafficMirrorFilterSet"
        }
    }

    public struct DescribeTrafficMirrorSessionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorSessionIds", location: .body(locationName: "TrafficMirrorSessionId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror session description.    network-interface-id: The ID of the Traffic Mirror session network interface.    owner-id: The ID of the account that owns the Traffic Mirror session.    packet-length: The assigned number of packets to mirror.     session-number: The assigned session number.     traffic-mirror-filter-id: The ID of the Traffic Mirror filter.    traffic-mirror-session-id: The ID of the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.    virtual-network-id: The virtual network ID of the Traffic Mirror session.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorSessionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorSessionIds = trafficMirrorSessionIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorSessionIds = "TrafficMirrorSessionId"
        }
    }

    public struct DescribeTrafficMirrorSessionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorSessions", location: .body(locationName: "trafficMirrorSessionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
        public let trafficMirrorSessions: [TrafficMirrorSession]?

        public init(nextToken: String? = nil, trafficMirrorSessions: [TrafficMirrorSession]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorSessions = trafficMirrorSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorSessions = "trafficMirrorSessionSet"
        }
    }

    public struct DescribeTrafficMirrorTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTargetIds", location: .body(locationName: "TrafficMirrorTargetId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror target description.    network-interface-id: The ID of the Traffic Mirror session network interface.    network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.    owner-id: The ID of the account that owns the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror targets.
        public let trafficMirrorTargetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorTargetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorTargetIds = trafficMirrorTargetIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorTargetIds = "TrafficMirrorTargetId"
        }
    }

    public struct DescribeTrafficMirrorTargetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTargets", location: .body(locationName: "trafficMirrorTargetSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror targets.
        public let trafficMirrorTargets: [TrafficMirrorTarget]?

        public init(nextToken: String? = nil, trafficMirrorTargets: [TrafficMirrorTarget]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorTargets = trafficMirrorTargets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorTargets = "trafficMirrorTargetSet"
        }
    }

    public struct DescribeTransitGatewayAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentIds", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the AWS account that owns the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering.    state - The state of the attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the AWS account that owns the transit gateway.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        public let transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachments", location: .body(locationName: "transitGatewayAttachments"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the attachments.
        public let transitGatewayAttachments: [TransitGatewayAttachment]?

        public init(nextToken: String? = nil, transitGatewayAttachments: [TransitGatewayAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachments = transitGatewayAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayAttachments = "transitGatewayAttachments"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainIds", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the transit gateway multicast domain. Valid values are pending | available | deleting | deleted.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-multicast-domain-id - The ID of the transit gateway multicast domain.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainIds = transitGatewayMulticastDomainIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainIds = "TransitGatewayMulticastDomainIds"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomains", location: .body(locationName: "transitGatewayMulticastDomains"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway multicast domains.
        public let transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]?

        public init(nextToken: String? = nil, transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayMulticastDomains = transitGatewayMulticastDomains
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayMulticastDomains = "transitGatewayMulticastDomains"
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentIds", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the transit gateway attachment.    local-owner-id - The ID of your AWS account.    remote-owner-id - The ID of the AWS account in the remote Region that owns the transit gateway.    state - The state of the peering attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    transit-gateway-id - The ID of the transit gateway.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more IDs of the transit gateway peering attachments.
        public let transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayPeeringAttachments", location: .body(locationName: "transitGatewayPeeringAttachments"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The transit gateway peering attachments.
        public let transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]?

        public init(nextToken: String? = nil, transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPeeringAttachments = transitGatewayPeeringAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayPeeringAttachments = "transitGatewayPeeringAttachments"
        }
    }

    public struct DescribeTransitGatewayRouteTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableIds", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the route table (available | deleting | deleted | pending).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateway route tables.
        public let transitGatewayRouteTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableIds = transitGatewayRouteTableIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableIds = "TransitGatewayRouteTableIds"
        }
    }

    public struct DescribeTransitGatewayRouteTablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTables", location: .body(locationName: "transitGatewayRouteTables"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway route tables.
        public let transitGatewayRouteTables: [TransitGatewayRouteTable]?

        public init(nextToken: String? = nil, transitGatewayRouteTables: [TransitGatewayRouteTable]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTables = transitGatewayRouteTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayRouteTables = "transitGatewayRouteTables"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentIds", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        public let transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayVpcAttachments", location: .body(locationName: "transitGatewayVpcAttachments"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC attachments.
        public let transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]?

        public init(nextToken: String? = nil, transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayVpcAttachments = transitGatewayVpcAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayVpcAttachments = "transitGatewayVpcAttachments"
        }
    }

    public struct DescribeTransitGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayIds", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled (enable | disable).    owner-id - The ID of the AWS account that owns the transit gateway.    state - The state of the transit gateway (available | deleted | deleting | modifying | pending).    transit-gateway-id - The ID of the transit gateway.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateways.
        public let transitGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayIds = transitGatewayIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayIds = "TransitGatewayIds"
        }
    }

    public struct DescribeTransitGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGateways", location: .body(locationName: "transitGatewaySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateways.
        public let transitGateways: [TransitGateway]?

        public init(nextToken: String? = nil, transitGateways: [TransitGateway]? = nil) {
            self.nextToken = nextToken
            self.transitGateways = transitGateways
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGateways = "transitGatewaySet"
        }
    }

    public struct DescribeVolumeAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// The attribute of the volume. This parameter is required.
        public let attribute: VolumeAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(attribute: VolumeAttributeName, dryRun: Bool? = nil, volumeId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct DescribeVolumeAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoEnableIO", location: .body(locationName: "autoEnableIO"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]

        /// The state of autoEnableIO attribute.
        public let autoEnableIO: AttributeBooleanValue?
        /// A list of product codes.
        public let productCodes: [ProductCode]?
        /// The ID of the volume.
        public let volumeId: String?

        public init(autoEnableIO: AttributeBooleanValue? = nil, productCodes: [ProductCode]? = nil, volumeId: String? = nil) {
            self.autoEnableIO = autoEnableIO
            self.productCodes = productCodes
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO = "autoEnableIO"
            case productCodes = "productCodes"
            case volumeId = "volumeId"
        }
    }

    public struct DescribeVolumeStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .list, encoding: .list(member:"VolumeId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).  
        public let filters: [Filter]?
        /// The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The IDs of the volumes. Default: Describes all your volumes.
        public let volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumeStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatuses", location: .body(locationName: "volumeStatusSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the status of the volumes.
        public let volumeStatuses: [VolumeStatusItem]?

        public init(nextToken: String? = nil, volumeStatuses: [VolumeStatusItem]? = nil) {
            self.nextToken = nextToken
            self.volumeStatuses = volumeStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumeStatuses = "volumeStatusSet"
        }
    }

    public struct DescribeVolumesModificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .list, encoding: .list(member:"VolumeId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    modification-state - The current modification state (modifying | optimizing | completed | failed).    original-iops - The original IOPS rate of the volume.    original-size - The original size of the volume, in GiB.    original-volume-type - The original volume type of the volume (standard | io1 | io2 | gp2 | sc1 | st1).    originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).    start-time - The modification start time.    target-iops - The target IOPS rate of the volume.    target-size - The target size of the volume, in GiB.    target-volume-type - The target volume type of the volume (standard | io1 | io2 | gp2 | sc1 | st1).    targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).    volume-id - The ID of the volume.  
        public let filters: [Filter]?
        /// The maximum number of results (up to a limit of 500) to be returned in a paginated request.
        public let maxResults: Int?
        /// The nextToken value returned by a previous paginated request.
        public let nextToken: String?
        /// The IDs of the volumes.
        public let volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumesModifications", location: .body(locationName: "volumeModificationSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Token for pagination, null if there are no more results 
        public let nextToken: String?
        /// Information about the volume modifications.
        public let volumesModifications: [VolumeModification]?

        public init(nextToken: String? = nil, volumesModifications: [VolumeModification]? = nil) {
            self.nextToken = nextToken
            self.volumesModifications = volumesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumesModifications = "volumeModificationSet"
        }
    }

    public struct DescribeVolumesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .list, encoding: .list(member:"VolumeId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true | false)    fast-restored - Indicates whether the volume was created from a snapshot that is enabled for fast snapshot restore (true | false).    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.  
        public let filters: [Filter]?
        /// The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The volume IDs.
        public let volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumeSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the volumes.
        public let volumes: [Volume]?

        public init(nextToken: String? = nil, volumes: [Volume]? = nil) {
            self.nextToken = nextToken
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumes = "volumeSet"
        }
    }

    public struct DescribeVpcAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// The VPC attribute.
        public let attribute: VpcAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(attribute: VpcAttributeName, dryRun: Bool? = nil, vpcId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeVpcAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableDnsHostnames", location: .body(locationName: "enableDnsHostnames"), required: false, type: .structure), 
            AWSShapeMember(label: "EnableDnsSupport", location: .body(locationName: "enableDnsSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String? = nil) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames = "enableDnsHostnames"
            case enableDnsSupport = "enableDnsSupport"
            case vpcId = "vpcId"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcIds", required: false, type: .list, encoding: .list(member:"VpcId"))
        ]

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC IDs.
        public let vpcIds: [String]?

        public init(maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 255)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
            try validate(self.nextToken, name:"nextToken", parent: name, max: 1024)
            try validate(self.nextToken, name:"nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case vpcIds = "VpcIds"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcs"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the ClassicLink DNS support status of the VPCs.
        public let vpcs: [ClassicLinkDnsSupport]?

        public init(nextToken: String? = nil, vpcs: [ClassicLinkDnsSupport]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcs = "vpcs"
        }
    }

    public struct DescribeVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .list, encoding: .list(member:"VpcId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink (true | false).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// One or more VPCs for which you want to describe the ClassicLink status.
        public let vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpcIds = vpcIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ClassicLink status of one or more VPCs.
        public let vpcs: [VpcClassicLink]?

        public init(vpcs: [VpcClassicLink]? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotificationId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    connection-notification-arn - The ARN of the SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.  
        public let filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(connectionNotificationId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotificationSet", location: .body(locationName: "connectionNotificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// One or more notifications.
        public let connectionNotificationSet: [ConnectionNotification]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connectionNotificationSet: [ConnectionNotification]? = nil, nextToken: String? = nil) {
            self.connectionNotificationSet = connectionNotificationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationSet = "connectionNotificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-id - The ID of the service.    vpc-endpoint-owner - The AWS account number of the owner of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-id - The ID of the endpoint.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointConnections", location: .body(locationName: "vpcEndpointConnectionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more VPC endpoint connections.
        public let vpcEndpointConnections: [VpcEndpointConnection]?

        public init(nextToken: String? = nil, vpcEndpointConnections: [VpcEndpointConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpointConnections = vpcEndpointConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpointConnections = "vpcEndpointConnectionSet"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceIds", location: .body(locationName: "ServiceId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).     tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The IDs of one or more services.
        public let serviceIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceIds = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceConfigurations", location: .body(locationName: "serviceConfigurationSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more services.
        public let serviceConfigurations: [ServiceConfiguration]?

        public init(nextToken: String? = nil, serviceConfigurations: [ServiceConfiguration]? = nil) {
            self.nextToken = nextToken
            self.serviceConfigurations = serviceConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceConfigurations = "serviceConfigurationSet"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    principal - The ARN of the principal.    principal-type - The principal type (All | Service | OrganizationUnit | Account | User | Role).  
        public let filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedPrincipals", location: .body(locationName: "allowedPrincipals"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about one or more allowed principals.
        public let allowedPrincipals: [AllowedPrincipal]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(allowedPrincipals: [AllowedPrincipal]? = nil, nextToken: String? = nil) {
            self.allowedPrincipals = allowedPrincipals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPrincipals = "allowedPrincipals"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVpcEndpointServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceNames", location: .body(locationName: "ServiceName"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more service names.
        public let serviceNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceNames = "ServiceName"
        }
    }

    public struct DescribeVpcEndpointServicesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceDetails", location: .body(locationName: "serviceDetailSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServiceNames", location: .body(locationName: "serviceNameSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the service.
        public let serviceDetails: [ServiceDetail]?
        /// A list of supported services.
        public let serviceNames: [String]?

        public init(nextToken: String? = nil, serviceDetails: [ServiceDetail]? = nil, serviceNames: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceDetails = serviceDetails
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceDetails = "serviceDetailSet"
            case serviceNames = "serviceNameSet"
        }
    }

    public struct DescribeVpcEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    vpc-id - The ID of the VPC in which the endpoint resides.    vpc-endpoint-id - The ID of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more endpoint IDs.
        public let vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DescribeVpcEndpointsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpoints", location: .body(locationName: "vpcEndpointSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the endpoints.
        public let vpcEndpoints: [VpcEndpoint]?

        public init(nextToken: String? = nil, vpcEndpoints: [VpcEndpoint]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpoints = vpcEndpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpoints = "vpcEndpointSet"
        }
    }

    public struct DescribeVpcPeeringConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionIds", location: .body(locationName: "VpcPeeringConnectionId"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The AWS account ID of the owner of the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The AWS account ID of the owner of the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC peering connection IDs. Default: Describes all your VPC peering connections.
        public let vpcPeeringConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcPeeringConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcPeeringConnectionIds = "VpcPeeringConnectionId"
        }
    }

    public struct DescribeVpcPeeringConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnections", location: .body(locationName: "vpcPeeringConnectionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC peering connections.
        public let vpcPeeringConnections: [VpcPeeringConnection]?

        public init(nextToken: String? = nil, vpcPeeringConnections: [VpcPeeringConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcPeeringConnections = "vpcPeeringConnectionSet"
        }
    }

    public struct DescribeVpcsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .list, encoding: .list(member:"VpcId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    isDefault - Indicates whether the VPC is the default VPC.    owner-id - The ID of the AWS account that owns the VPC.    state - The state of the VPC (pending | available).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC IDs. Default: Describes all your VPCs.
        public let vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more VPCs.
        public let vpcs: [Vpc]?

        public init(nextToken: String? = nil, vpcs: [Vpc]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpnConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "VpnConnectionIds", location: .body(locationName: "VpnConnectionId"), required: false, type: .list, encoding: .list(member:"VpnConnectionId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.  
        public let filters: [Filter]?
        /// One or more VPN connection IDs. Default: Describes your VPN connections.
        public let vpnConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnConnectionIds = vpnConnectionIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpnConnectionIds = "VpnConnectionId"
        }
    }

    public struct DescribeVpnConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnections", location: .body(locationName: "vpnConnectionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about one or more VPN connections.
        public let vpnConnections: [VpnConnection]?

        public init(vpnConnections: [VpnConnection]? = nil) {
            self.vpnConnections = vpnConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnections = "vpnConnectionSet"
        }
    }

    public struct DescribeVpnGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "VpnGatewayIds", location: .body(locationName: "VpnGatewayId"), required: false, type: .list, encoding: .list(member:"VpnGatewayId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.  
        public let filters: [Filter]?
        /// One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
        public let vpnGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnGatewayIds = vpnGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpnGatewayIds = "VpnGatewayId"
        }
    }

    public struct DescribeVpnGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateways", location: .body(locationName: "vpnGatewaySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about one or more virtual private gateways.
        public let vpnGateways: [VpnGateway]?

        public init(vpnGateways: [VpnGateway]? = nil) {
            self.vpnGateways = vpnGateways
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateways = "vpnGatewaySet"
        }
    }

    public struct DetachClassicLinkVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to unlink from the VPC.
        public let instanceId: String
        /// The ID of the VPC to which the instance is linked.
        public let vpcId: String

        public init(dryRun: Bool? = nil, instanceId: String, vpcId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case vpcId = "vpcId"
        }
    }

    public struct DetachClassicLinkVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DetachInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
            case vpcId = "vpcId"
        }
    }

    public struct DetachNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean)
        ]

        /// The ID of the attachment.
        public let attachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether to force a detachment.    Use the Force parameter only as a last resort to detach a network interface from a failed instance.    If you use the Force parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.   If you force the detachment of a network interface, the instance metadata might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.   
        public let force: Bool?

        public init(attachmentId: String, dryRun: Bool? = nil, force: Bool? = nil) {
            self.attachmentId = attachmentId
            self.dryRun = dryRun
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case dryRun = "dryRun"
            case force = "force"
        }
    }

    public struct DetachVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// The device name.
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
        public let force: Bool?
        /// The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String

        public init(device: String? = nil, dryRun: Bool? = nil, force: Bool? = nil, instanceId: String? = nil, volumeId: String) {
            self.device = device
            self.dryRun = dryRun
            self.force = force
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case force = "Force"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct DetachVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DhcpConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "valueSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The name of a DHCP option.
        public let key: String?
        /// One or more values for the DHCP option.
        public let values: [AttributeValue]?

        public init(key: String? = nil, values: [AttributeValue]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "valueSet"
        }
    }

    public struct DhcpOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfigurationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more DHCP options in the set.
        public let dhcpConfigurations: [DhcpConfiguration]?
        /// The ID of the set of DHCP options.
        public let dhcpOptionsId: String?
        /// The ID of the AWS account that owns the DHCP options set.
        public let ownerId: String?
        /// Any tags assigned to the DHCP options set.
        public let tags: [Tag]?

        public init(dhcpConfigurations: [DhcpConfiguration]? = nil, dhcpOptionsId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dhcpOptionsId = dhcpOptionsId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfigurationSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case ownerId = "ownerId"
            case tags = "tagSet"
        }
    }

    public struct DirectoryServiceAuthentication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", location: .body(locationName: "directoryId"), required: false, type: .string)
        ]

        /// The ID of the Active Directory used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "directoryId"
        }
    }

    public struct DirectoryServiceAuthenticationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]

        /// The ID of the Active Directory to be used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct DisableEbsEncryptionByDefaultRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableEbsEncryptionByDefaultResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsEncryptionByDefault", location: .body(locationName: "ebsEncryptionByDefault"), required: false, type: .boolean)
        ]

        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
        }
    }

    public struct DisableFastSnapshotRestoreErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FastSnapshotRestoreStateErrors", location: .body(locationName: "fastSnapshotRestoreStateErrorSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string)
        ]

        /// The errors.
        public let fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId = "snapshotId"
        }
    }

    public struct DisableFastSnapshotRestoreStateError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DisableFastSnapshotRestoreStateErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: DisableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: DisableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case error = "error"
        }
    }

    public struct DisableFastSnapshotRestoreSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "DisabledTime", location: .body(locationName: "disabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DisablingTime", location: .body(locationName: "disablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnabledTime", location: .body(locationName: "enabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnablingTime", location: .body(locationName: "enablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OptimizingTime", location: .body(locationName: "optimizingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "stateTransitionReason"), required: false, type: .string)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: TimeStamp?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores for the snapshot.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.  
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: TimeStamp? = nil, disablingTime: TimeStamp? = nil, enabledTime: TimeStamp? = nil, enablingTime: TimeStamp? = nil, optimizingTime: TimeStamp? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct DisableFastSnapshotRestoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "AvailabilityZone"), required: true, type: .list, encoding: .list(member:"AvailabilityZone")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceSnapshotIds", location: .body(locationName: "SourceSnapshotId"), required: true, type: .list, encoding: .list(member:"SnapshotId"))
        ]

        /// One or more Availability Zones. For example, us-east-2a.
        public let availabilityZones: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0.
        public let sourceSnapshotIds: [String]

        public init(availabilityZones: [String], dryRun: Bool? = nil, sourceSnapshotIds: [String]) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct DisableFastSnapshotRestoresResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the snapshots for which fast snapshot restores were successfully disabled.
        public let successful: [DisableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be disabled.
        public let unsuccessful: [DisableFastSnapshotRestoreErrorItem]?

        public init(successful: [DisableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [DisableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Propagation", location: .body(locationName: "propagation"), required: false, type: .structure)
        ]

        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct DisableVgwRoutePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string), 
            AWSShapeMember(label: "RouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let gatewayId: String
        /// The ID of the route table.
        public let routeTableId: String

        public init(dryRun: Bool? = nil, gatewayId: String, routeTableId: String) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]

        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisableVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
        }
    }

    public struct DisableVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisassociateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string)
        ]

        /// [EC2-VPC] The association ID. Required for EC2-VPC.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?

        public init(associationId: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case dryRun = "dryRun"
            case publicIp = "PublicIp"
        }
    }

    public struct DisassociateClientVpnTargetNetworkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the target network association.
        public let associationId: String
        /// The ID of the Client VPN endpoint from which to disassociate the target network.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String, clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateClientVpnTargetNetworkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case status = "status"
        }
    }

    public struct DisassociateIamInstanceProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string)
        ]

        /// The ID of the IAM instance profile association.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct DisassociateIamInstanceProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]

        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct DisassociateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]

        /// The association ID representing the current association between the route table and subnet or gateway.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
        }
    }

    public struct DisassociateSubnetCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]

        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DisassociateSubnetCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets;
        public let subnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associations"), required: false, type: .structure)
        ]

        /// Information about the association.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct DisassociateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisassociateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]

        /// Information about the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DisassociateVpcCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]

        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DisassociateVpcCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlockAssociation", location: .body(locationName: "cidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case vpcId = "vpcId"
        }
    }

    public struct DiskImage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Image", required: false, type: .structure), 
            AWSShapeMember(label: "Volume", required: false, type: .structure)
        ]

        /// A description of the disk image.
        public let description: String?
        /// Information about the disk image.
        public let image: DiskImageDetail?
        /// Information about the volume.
        public let volume: VolumeDetail?

        public init(description: String? = nil, image: DiskImageDetail? = nil, volume: VolumeDetail? = nil) {
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case image = "Image"
            case volume = "Volume"
        }
    }

    public struct DiskImageDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Checksum", location: .body(locationName: "checksum"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .long)
        ]

        /// The checksum computed for the disk image.
        public let checksum: String?
        /// The disk image format.
        public let format: DiskImageFormat?
        /// A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String?
        /// The size of the disk image, in GiB.
        public let size: Int64?

        public init(checksum: String? = nil, format: DiskImageFormat? = nil, importManifestUrl: String? = nil, size: Int64? = nil) {
            self.checksum = checksum
            self.format = format
            self.importManifestUrl = importManifestUrl
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case checksum = "checksum"
            case format = "format"
            case importManifestUrl = "importManifestUrl"
            case size = "size"
        }
    }

    public struct DiskImageDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bytes", location: .body(locationName: "bytes"), required: true, type: .long), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: true, type: .string)
        ]

        /// The size of the disk image, in GiB.
        public let bytes: Int64
        /// The disk image format.
        public let format: DiskImageFormat
        /// A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String

        public init(bytes: Int64, format: DiskImageFormat, importManifestUrl: String) {
            self.bytes = bytes
            self.format = format
            self.importManifestUrl = importManifestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case bytes = "bytes"
            case format = "format"
            case importManifestUrl = "importManifestUrl"
        }
    }

    public struct DiskImageVolumeDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .long)
        ]

        /// The volume identifier.
        public let id: String?
        /// The size of the volume, in GiB.
        public let size: Int64?

        public init(id: String? = nil, size: Int64? = nil) {
            self.id = id
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case size = "size"
        }
    }

    public struct DiskInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "SizeInGB", location: .body(locationName: "sizeInGB"), required: false, type: .long), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// The number of disks with this configuration.
        public let count: Int?
        /// The size of the disk in GB.
        public let sizeInGB: Int64?
        /// The type of disk.
        public let `type`: DiskType?

        public init(count: Int? = nil, sizeInGB: Int64? = nil, type: DiskType? = nil) {
            self.count = count
            self.sizeInGB = sizeInGB
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case sizeInGB = "sizeInGB"
            case `type` = "type"
        }
    }

    public struct DnsEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "HostedZoneId", location: .body(locationName: "hostedZoneId"), required: false, type: .string)
        ]

        /// The DNS name.
        public let dnsName: String?
        /// The ID of the private hosted zone.
        public let hostedZoneId: String?

        public init(dnsName: String? = nil, hostedZoneId: String? = nil) {
            self.dnsName = dnsName
            self.hostedZoneId = hostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "dnsName"
            case hostedZoneId = "hostedZoneId"
        }
    }

    public struct DnsServersOptionsModifyStructure: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomDnsServers", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
        public let customDnsServers: [String]?
        /// Indicates whether DNS servers should be used. Specify False to delete the existing DNS servers.
        public let enabled: Bool?

        public init(customDnsServers: [String]? = nil, enabled: Bool? = nil) {
            self.customDnsServers = customDnsServers
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case customDnsServers = "CustomDnsServers"
            case enabled = "Enabled"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum)
        ]

        /// Indicates whether the EBS volume is deleted on instance termination. For more information, see Preserving Amazon EBS volumes on instance termination in the Amazon Elastic Compute Cloud User Guide.
        public let deleteOnTermination: Bool?
        /// Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide. In no case can you remove encryption from an encrypted volume. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types. This parameter is not returned by .
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1 and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-16,000 IOPS for gp2 volumes and 100 to 64,000 IOPS for io1 and io2 volumes in most Regions. Maximum io1 and io2 IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 and io2 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted. This parameter is only supported on BlockDeviceMapping objects called by RunInstances, RequestSpotFleet, and RequestSpotInstances.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size. Constraints: 1-16384 for General Purpose SSD (gp2), 4-16384 for Provisioned IOPS SSD (io1 and io2), 500-16384 for Throughput Optimized HDD (st1), 500-16384 for Cold HDD (sc1), and 1-1024 for Magnetic (standard) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.
        public let volumeSize: Int?
        /// The volume type. If you set the type to io1 or io2, you must also specify the Iops parameter. If you set the type to gp2, st1, sc1, or standard, you must omit the Iops parameter. Default: gp2 
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case encrypted = "encrypted"
            case iops = "iops"
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "snapshotId"
            case volumeSize = "volumeSize"
            case volumeType = "volumeType"
        }
    }

    public struct EbsInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsOptimizedInfo", location: .body(locationName: "ebsOptimizedInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimizedSupport", location: .body(locationName: "ebsOptimizedSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "EncryptionSupport", location: .body(locationName: "encryptionSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "NvmeSupport", location: .body(locationName: "nvmeSupport"), required: false, type: .enum)
        ]

        /// Describes the optimized EBS performance for the instance type.
        public let ebsOptimizedInfo: EbsOptimizedInfo?
        /// Indicates that the instance type is Amazon EBS-optimized. For more information, see Amazon EBS-Optimized Instances in Amazon EC2 User Guide for Linux Instances.
        public let ebsOptimizedSupport: EbsOptimizedSupport?
        /// Indicates whether Amazon EBS encryption is supported.
        public let encryptionSupport: EbsEncryptionSupport?
        /// Indicates whether non-volatile memory express (NVMe) is supported.
        public let nvmeSupport: EbsNvmeSupport?

        public init(ebsOptimizedInfo: EbsOptimizedInfo? = nil, ebsOptimizedSupport: EbsOptimizedSupport? = nil, encryptionSupport: EbsEncryptionSupport? = nil, nvmeSupport: EbsNvmeSupport? = nil) {
            self.ebsOptimizedInfo = ebsOptimizedInfo
            self.ebsOptimizedSupport = ebsOptimizedSupport
            self.encryptionSupport = encryptionSupport
            self.nvmeSupport = nvmeSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ebsOptimizedInfo = "ebsOptimizedInfo"
            case ebsOptimizedSupport = "ebsOptimizedSupport"
            case encryptionSupport = "encryptionSupport"
            case nvmeSupport = "nvmeSupport"
        }
    }

    public struct EbsInstanceBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]

        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, volumeId: String? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case status = "status"
            case volumeId = "volumeId"
        }
    }

    public struct EbsInstanceBlockDeviceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]

        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(deleteOnTermination: Bool? = nil, volumeId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case volumeId = "volumeId"
        }
    }

    public struct EbsOptimizedInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaselineBandwidthInMbps", location: .body(locationName: "baselineBandwidthInMbps"), required: false, type: .integer), 
            AWSShapeMember(label: "BaselineIops", location: .body(locationName: "baselineIops"), required: false, type: .integer), 
            AWSShapeMember(label: "BaselineThroughputInMBps", location: .body(locationName: "baselineThroughputInMBps"), required: false, type: .double), 
            AWSShapeMember(label: "MaximumBandwidthInMbps", location: .body(locationName: "maximumBandwidthInMbps"), required: false, type: .integer), 
            AWSShapeMember(label: "MaximumIops", location: .body(locationName: "maximumIops"), required: false, type: .integer), 
            AWSShapeMember(label: "MaximumThroughputInMBps", location: .body(locationName: "maximumThroughputInMBps"), required: false, type: .double)
        ]

        /// The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let baselineBandwidthInMbps: Int?
        /// The baseline input/output storage operations per seconds for an EBS-optimized instance type.
        public let baselineIops: Int?
        /// The baseline throughput performance for an EBS-optimized instance type, in MBps.
        public let baselineThroughputInMBps: Double?
        /// The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let maximumBandwidthInMbps: Int?
        /// The maximum input/output storage operations per second for an EBS-optimized instance type.
        public let maximumIops: Int?
        /// The maximum throughput performance for an EBS-optimized instance type, in MBps.
        public let maximumThroughputInMBps: Double?

        public init(baselineBandwidthInMbps: Int? = nil, baselineIops: Int? = nil, baselineThroughputInMBps: Double? = nil, maximumBandwidthInMbps: Int? = nil, maximumIops: Int? = nil, maximumThroughputInMBps: Double? = nil) {
            self.baselineBandwidthInMbps = baselineBandwidthInMbps
            self.baselineIops = baselineIops
            self.baselineThroughputInMBps = baselineThroughputInMBps
            self.maximumBandwidthInMbps = maximumBandwidthInMbps
            self.maximumIops = maximumIops
            self.maximumThroughputInMBps = maximumThroughputInMBps
        }

        private enum CodingKeys: String, CodingKey {
            case baselineBandwidthInMbps = "baselineBandwidthInMbps"
            case baselineIops = "baselineIops"
            case baselineThroughputInMBps = "baselineThroughputInMBps"
            case maximumBandwidthInMbps = "maximumBandwidthInMbps"
            case maximumIops = "maximumIops"
            case maximumThroughputInMBps = "maximumThroughputInMBps"
        }
    }

    public struct EgressOnlyInternetGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the attachment of the egress-only internet gateway.
        public let attachments: [InternetGatewayAttachment]?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The tags assigned to the egress-only internet gateway.
        public let tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, egressOnlyInternetGatewayId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case tags = "tagSet"
        }
    }

    public struct ElasticGpuAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticGpuAssociationId", location: .body(locationName: "elasticGpuAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuAssociationState", location: .body(locationName: "elasticGpuAssociationState"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuAssociationTime", location: .body(locationName: "elasticGpuAssociationTime"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuId", location: .body(locationName: "elasticGpuId"), required: false, type: .string)
        ]

        /// The ID of the association.
        public let elasticGpuAssociationId: String?
        /// The state of the association between the instance and the Elastic Graphics accelerator.
        public let elasticGpuAssociationState: String?
        /// The time the Elastic Graphics accelerator was associated with the instance.
        public let elasticGpuAssociationTime: String?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?

        public init(elasticGpuAssociationId: String? = nil, elasticGpuAssociationState: String? = nil, elasticGpuAssociationTime: String? = nil, elasticGpuId: String? = nil) {
            self.elasticGpuAssociationId = elasticGpuAssociationId
            self.elasticGpuAssociationState = elasticGpuAssociationState
            self.elasticGpuAssociationTime = elasticGpuAssociationTime
            self.elasticGpuId = elasticGpuId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuAssociationId = "elasticGpuAssociationId"
            case elasticGpuAssociationState = "elasticGpuAssociationState"
            case elasticGpuAssociationTime = "elasticGpuAssociationTime"
            case elasticGpuId = "elasticGpuId"
        }
    }

    public struct ElasticGpuHealth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The health status.
        public let status: ElasticGpuStatus?

        public init(status: ElasticGpuStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct ElasticGpuSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]

        /// The type of Elastic Graphics accelerator. For more information about the values to specify for Type, see Elastic Graphics Basics, specifically the Elastic Graphics accelerator column, in the Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public let `type`: String

        public init(type: String) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct ElasticGpuSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]

        /// The elastic GPU type.
        public let `type`: String?

        public init(type: String? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct ElasticGpus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuHealth", location: .body(locationName: "elasticGpuHealth"), required: false, type: .structure), 
            AWSShapeMember(label: "ElasticGpuId", location: .body(locationName: "elasticGpuId"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuState", location: .body(locationName: "elasticGpuState"), required: false, type: .enum), 
            AWSShapeMember(label: "ElasticGpuType", location: .body(locationName: "elasticGpuType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The Availability Zone in the which the Elastic Graphics accelerator resides.
        public let availabilityZone: String?
        /// The status of the Elastic Graphics accelerator.
        public let elasticGpuHealth: ElasticGpuHealth?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?
        /// The state of the Elastic Graphics accelerator.
        public let elasticGpuState: ElasticGpuState?
        /// The type of Elastic Graphics accelerator.
        public let elasticGpuType: String?
        /// The ID of the instance to which the Elastic Graphics accelerator is attached.
        public let instanceId: String?
        /// The tags assigned to the Elastic Graphics accelerator.
        public let tags: [Tag]?

        public init(availabilityZone: String? = nil, elasticGpuHealth: ElasticGpuHealth? = nil, elasticGpuId: String? = nil, elasticGpuState: ElasticGpuState? = nil, elasticGpuType: String? = nil, instanceId: String? = nil, tags: [Tag]? = nil) {
            self.availabilityZone = availabilityZone
            self.elasticGpuHealth = elasticGpuHealth
            self.elasticGpuId = elasticGpuId
            self.elasticGpuState = elasticGpuState
            self.elasticGpuType = elasticGpuType
            self.instanceId = instanceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case elasticGpuHealth = "elasticGpuHealth"
            case elasticGpuId = "elasticGpuId"
            case elasticGpuState = "elasticGpuState"
            case elasticGpuType = "elasticGpuType"
            case instanceId = "instanceId"
            case tags = "tagSet"
        }
    }

    public struct ElasticInferenceAccelerator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]

        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge. 
        public let `type`: String

        public init(count: Int? = nil, type: String) {
            self.count = count
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.count, name:"count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case `type` = "Type"
        }
    }

    public struct ElasticInferenceAcceleratorAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticInferenceAcceleratorArn", location: .body(locationName: "elasticInferenceAcceleratorArn"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationId", location: .body(locationName: "elasticInferenceAcceleratorAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationState", location: .body(locationName: "elasticInferenceAcceleratorAssociationState"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationTime", location: .body(locationName: "elasticInferenceAcceleratorAssociationTime"), required: false, type: .timestamp)
        ]

        ///  The Amazon Resource Name (ARN) of the elastic inference accelerator. 
        public let elasticInferenceAcceleratorArn: String?
        ///  The ID of the association. 
        public let elasticInferenceAcceleratorAssociationId: String?
        ///  The state of the elastic inference accelerator. 
        public let elasticInferenceAcceleratorAssociationState: String?
        ///  The time at which the elastic inference accelerator is associated with an instance. 
        public let elasticInferenceAcceleratorAssociationTime: TimeStamp?

        public init(elasticInferenceAcceleratorArn: String? = nil, elasticInferenceAcceleratorAssociationId: String? = nil, elasticInferenceAcceleratorAssociationState: String? = nil, elasticInferenceAcceleratorAssociationTime: TimeStamp? = nil) {
            self.elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn
            self.elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId
            self.elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState
            self.elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime
        }

        private enum CodingKeys: String, CodingKey {
            case elasticInferenceAcceleratorArn = "elasticInferenceAcceleratorArn"
            case elasticInferenceAcceleratorAssociationId = "elasticInferenceAcceleratorAssociationId"
            case elasticInferenceAcceleratorAssociationState = "elasticInferenceAcceleratorAssociationState"
            case elasticInferenceAcceleratorAssociationTime = "elasticInferenceAcceleratorAssociationTime"
        }
    }

    public struct EnableEbsEncryptionByDefaultRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableEbsEncryptionByDefaultResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsEncryptionByDefault", location: .body(locationName: "ebsEncryptionByDefault"), required: false, type: .boolean)
        ]

        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
        }
    }

    public struct EnableFastSnapshotRestoreErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FastSnapshotRestoreStateErrors", location: .body(locationName: "fastSnapshotRestoreStateErrorSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string)
        ]

        /// The errors.
        public let fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId = "snapshotId"
        }
    }

    public struct EnableFastSnapshotRestoreStateError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct EnableFastSnapshotRestoreStateErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: EnableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: EnableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case error = "error"
        }
    }

    public struct EnableFastSnapshotRestoreSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "DisabledTime", location: .body(locationName: "disabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DisablingTime", location: .body(locationName: "disablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnabledTime", location: .body(locationName: "enabledTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EnablingTime", location: .body(locationName: "enablingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OptimizingTime", location: .body(locationName: "optimizingTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "stateTransitionReason"), required: false, type: .string)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: TimeStamp?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: TimeStamp?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: TimeStamp?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.  
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: TimeStamp? = nil, disablingTime: TimeStamp? = nil, enabledTime: TimeStamp? = nil, enablingTime: TimeStamp? = nil, optimizingTime: TimeStamp? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct EnableFastSnapshotRestoresRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "AvailabilityZone"), required: true, type: .list, encoding: .list(member:"AvailabilityZone")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceSnapshotIds", location: .body(locationName: "SourceSnapshotId"), required: true, type: .list, encoding: .list(member:"SnapshotId"))
        ]

        /// One or more Availability Zones. For example, us-east-2a.
        public let availabilityZones: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You can specify a snapshot that was shared with you from another AWS account.
        public let sourceSnapshotIds: [String]

        public init(availabilityZones: [String], dryRun: Bool? = nil, sourceSnapshotIds: [String]) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct EnableFastSnapshotRestoresResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the snapshots for which fast snapshot restores were successfully enabled.
        public let successful: [EnableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be enabled.
        public let unsuccessful: [EnableFastSnapshotRestoreErrorItem]?

        public init(successful: [EnableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [EnableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Propagation", location: .body(locationName: "propagation"), required: false, type: .structure)
        ]

        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct EnableVgwRoutePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string), 
            AWSShapeMember(label: "RouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with. 
        public let gatewayId: String
        /// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to. 
        public let routeTableId: String

        public init(dryRun: Bool? = nil, gatewayId: String, routeTableId: String) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EnableVolumeIORequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(dryRun: Bool? = nil, volumeId: String) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "volumeId"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]

        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EnableVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
        }
    }

    public struct EnableVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EventInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventDescription", location: .body(locationName: "eventDescription"), required: false, type: .string), 
            AWSShapeMember(label: "EventSubType", location: .body(locationName: "eventSubType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]

        /// The description of the event.
        public let eventDescription: String?
        /// The event. The following are the error events:    iamFleetRoleInvalid - The EC2 Fleet or Spot Fleet did not have the required permissions either to launch or terminate an instance.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot Instances that you can launch.   The following are the fleetRequestChange events:    active - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.    cancelled - The EC2 Fleet or Spot Fleet request is canceled and has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances were terminated.    cancelled_running - The EC2 Fleet or Spot Fleet request is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.    cancelled_terminating - The EC2 Fleet or Spot Fleet request is canceled and its Spot Instances are terminating.    expired - The EC2 Fleet or Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with TerminateInstancesWithExpiration set.    modify_in_progress - A request to modify the EC2 Fleet or Spot Fleet request was accepted and is in progress.    modify_successful - The EC2 Fleet or Spot Fleet request was modified.    price_update - The price for a launch configuration was adjusted because it was too high. This change is permanent.    submitted - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.   The following are the instanceChange events:    launched - A request was fulfilled and a new instance was launched.    terminated - An instance was terminated by the user.   The following are the Information events:    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    launchSpecUnusable - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.    fleetProgressHalted - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.  
        public let eventSubType: String?
        /// The ID of the instance. This information is available only for instanceChange events.
        public let instanceId: String?

        public init(eventDescription: String? = nil, eventSubType: String? = nil, instanceId: String? = nil) {
            self.eventDescription = eventDescription
            self.eventSubType = eventSubType
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case eventDescription = "eventDescription"
            case eventSubType = "eventSubType"
            case instanceId = "instanceId"
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateRevocationList", location: .body(locationName: "certificateRevocationList"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// Information about the client certificate revocation list.
        public let certificateRevocationList: String?
        /// The current state of the client certificate revocation list.
        public let status: ClientCertificateRevocationListStatus?

        public init(certificateRevocationList: String? = nil, status: ClientCertificateRevocationListStatus? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList = "certificateRevocationList"
            case status = "status"
        }
    }

    public struct ExportClientVpnClientConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientConfiguration", location: .body(locationName: "clientConfiguration"), required: false, type: .string)
        ]

        /// The contents of the Client VPN endpoint configuration file.
        public let clientConfiguration: String?

        public init(clientConfiguration: String? = nil) {
            self.clientConfiguration = clientConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientConfiguration = "clientConfiguration"
        }
    }

    public struct ExportImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiskImageFormat", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "S3ExportLocation", required: true, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Token to enable idempotency for export image requests.
        public let clientToken: String?
        /// A description of the image being exported. The maximum length is 255 characters.
        public let description: String?
        /// The disk image format.
        public let diskImageFormat: DiskImageFormat
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the image.
        public let imageId: String
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
        public let roleName: String?
        /// Information about the destination Amazon S3 bucket. The bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3ExportLocation: ExportTaskS3LocationRequest
        /// The tags to apply to the image being exported.
        public let tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = ExportImageRequest.idempotencyToken(), description: String? = nil, diskImageFormat: DiskImageFormat, dryRun: Bool? = nil, imageId: String, roleName: String? = nil, s3ExportLocation: ExportTaskS3LocationRequest, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.dryRun = dryRun
            self.imageId = imageId
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case diskImageFormat = "DiskImageFormat"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case roleName = "RoleName"
            case s3ExportLocation = "S3ExportLocation"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ExportImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "ExportImageTaskId", location: .body(locationName: "exportImageTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "RoleName", location: .body(locationName: "roleName"), required: false, type: .string), 
            AWSShapeMember(label: "S3ExportLocation", location: .body(locationName: "s3ExportLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the image being exported.
        public let description: String?
        /// The disk image format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.
        public let roleName: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the image being exported.
        public let tags: [Tag]?

        public init(description: String? = nil, diskImageFormat: DiskImageFormat? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, roleName: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImageFormat = "diskImageFormat"
            case exportImageTaskId = "exportImageTaskId"
            case imageId = "imageId"
            case progress = "progress"
            case roleName = "roleName"
            case s3ExportLocation = "s3ExportLocation"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportImageTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ExportImageTaskId", location: .body(locationName: "exportImageTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "S3ExportLocation", location: .body(locationName: "s3ExportLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the image being exported.
        public let description: String?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the image being exported.
        public let tags: [Tag]?

        public init(description: String? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportImageTaskId = "exportImageTaskId"
            case imageId = "imageId"
            case progress = "progress"
            case s3ExportLocation = "s3ExportLocation"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceExportDetails", location: .body(locationName: "instanceExport"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the resource being exported.
        public let description: String?
        /// The ID of the export task.
        public let exportTaskId: String?
        /// Information about the export task.
        public let exportToS3Task: ExportToS3Task?
        /// Information about the instance to export.
        public let instanceExportDetails: InstanceExportDetails?
        /// The state of the export task.
        public let state: ExportTaskState?
        /// The status message related to the export task.
        public let statusMessage: String?
        /// The tags for the export task.
        public let tags: [Tag]?

        public init(description: String? = nil, exportTaskId: String? = nil, exportToS3Task: ExportToS3Task? = nil, instanceExportDetails: InstanceExportDetails? = nil, state: ExportTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportTaskId = exportTaskId
            self.exportToS3Task = exportToS3Task
            self.instanceExportDetails = instanceExportDetails
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportTaskId = "exportTaskId"
            case exportToS3Task = "exportToS3"
            case instanceExportDetails = "instanceExport"
            case state = "state"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportTaskS3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Prefix", location: .body(locationName: "s3Prefix"), required: false, type: .string)
        ]

        /// The destination Amazon S3 bucket.
        public let s3Bucket: String?
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Prefix = "s3Prefix"
        }
    }

    public struct ExportTaskS3LocationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: true, type: .string), 
            AWSShapeMember(label: "S3Prefix", required: false, type: .string)
        ]

        /// The destination Amazon S3 bucket.
        public let s3Bucket: String
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Prefix = "S3Prefix"
        }
    }

    public struct ExportToS3Task: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string)
        ]

        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?
        /// The encryption key for your S3 bucket.
        public let s3Key: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Key: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat = "containerFormat"
            case diskImageFormat = "diskImageFormat"
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct ExportToS3TaskSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Prefix", location: .body(locationName: "s3Prefix"), required: false, type: .string)
        ]

        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?
        /// The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
        public let s3Prefix: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat = "containerFormat"
            case diskImageFormat = "diskImageFormat"
            case s3Bucket = "s3Bucket"
            case s3Prefix = "s3Prefix"
        }
    }

    public struct ExportTransitGatewayRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "S3Bucket", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    transit-gateway-route-destination-cidr-block - The CIDR range.    type - The type of route (propagated | static).  
        public let filters: [Filter]?
        /// The name of the S3 bucket.
        public let s3Bucket: String
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, s3Bucket: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.s3Bucket = s3Bucket
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case s3Bucket = "S3Bucket"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ExportTransitGatewayRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Location", location: .body(locationName: "s3Location"), required: false, type: .string)
        ]

        /// The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
        public let s3Location: String?

        public init(s3Location: String? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public struct FailedQueuedPurchaseDeletion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]

        /// The error.
        public let error: DeleteQueuedReservedInstancesError?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(error: DeleteQueuedReservedInstancesError? = nil, reservedInstancesId: String? = nil) {
            self.error = error
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct FederatedAuthentication: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SamlProviderArn", location: .body(locationName: "samlProviderArn"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let samlProviderArn: String?

        public init(samlProviderArn: String? = nil) {
            self.samlProviderArn = samlProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case samlProviderArn = "samlProviderArn"
        }
    }

    public struct FederatedAuthenticationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SAMLProviderArn", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let sAMLProviderArn: String?

        public init(sAMLProviderArn: String? = nil) {
            self.sAMLProviderArn = sAMLProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case sAMLProviderArn = "SAMLProviderArn"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The name of the filter. Filter names are case-sensitive.
        public let name: String?
        /// The filter values. Filter values are case-sensitive.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Value"
        }
    }

    public struct FleetData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityStatus", location: .body(locationName: "activityStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "errorSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "FleetState", location: .body(locationName: "fleetState"), required: false, type: .enum), 
            AWSShapeMember(label: "FulfilledCapacity", location: .body(locationName: "fulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "FulfilledOnDemandCapacity", location: .body(locationName: "fulfilledOnDemandCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "fleetInstanceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "launchTemplateConfigs"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OnDemandOptions", location: .body(locationName: "onDemandOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", location: .body(locationName: "replaceUnhealthyInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotOptions", location: .body(locationName: "spotOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetCapacitySpecification", location: .body(locationName: "targetCapacitySpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", location: .body(locationName: "terminateInstancesWithExpiration"), required: false, type: .boolean), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp)
        ]

        /// The progress of the EC2 Fleet. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the EC2 Fleet is decreased, the status is pending_termination while instances are terminating.
        public let activityStatus: FleetActivityStatus?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The creation date and time of the EC2 Fleet.
        public let createTime: TimeStamp?
        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        public let errors: [DescribeFleetError]?
        /// Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The state of the EC2 Fleet.
        public let fleetState: FleetStateCode?
        /// The number of units fulfilled by this request compared to the set target capacity.
        public let fulfilledCapacity: Double?
        /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
        public let fulfilledOnDemandCapacity: Double?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        public let instances: [DescribeFleetsInstances]?
        /// The launch template and overrides.
        public let launchTemplateConfigs: [FleetLaunchTemplateConfig]?
        /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptions?
        /// Indicates whether EC2 Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptions?
        /// The tags for an EC2 Fleet resource.
        public let tags: [Tag]?
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacitySpecification: TargetCapacitySpecification?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires. 
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and it does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: maintain.
        public let `type`: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately. 
        public let validFrom: TimeStamp?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date. 
        public let validUntil: TimeStamp?

        public init(activityStatus: FleetActivityStatus? = nil, clientToken: String? = nil, createTime: TimeStamp? = nil, errors: [DescribeFleetError]? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String? = nil, fleetState: FleetStateCode? = nil, fulfilledCapacity: Double? = nil, fulfilledOnDemandCapacity: Double? = nil, instances: [DescribeFleetsInstances]? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfig]? = nil, onDemandOptions: OnDemandOptions? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptions? = nil, tags: [Tag]? = nil, targetCapacitySpecification: TargetCapacitySpecification? = nil, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: TimeStamp? = nil, validUntil: TimeStamp? = nil) {
            self.activityStatus = activityStatus
            self.clientToken = clientToken
            self.createTime = createTime
            self.errors = errors
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.fleetState = fleetState
            self.fulfilledCapacity = fulfilledCapacity
            self.fulfilledOnDemandCapacity = fulfilledOnDemandCapacity
            self.instances = instances
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tags = tags
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.`type` = `type`
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case clientToken = "clientToken"
            case createTime = "createTime"
            case errors = "errorSet"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case fleetId = "fleetId"
            case fleetState = "fleetState"
            case fulfilledCapacity = "fulfilledCapacity"
            case fulfilledOnDemandCapacity = "fulfilledOnDemandCapacity"
            case instances = "fleetInstanceSet"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case onDemandOptions = "onDemandOptions"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case spotOptions = "spotOptions"
            case tags = "tagSet"
            case targetCapacitySpecification = "targetCapacitySpecification"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case `type` = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct FleetLaunchTemplateConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: [FleetLaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [FleetLaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct FleetLaunchTemplateConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The launch template to use. You must specify either the launch template ID or launch template name in the request. 
        public let launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: [FleetLaunchTemplateOverridesRequest]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest? = nil, overrides: [FleetLaunchTemplateOverridesRequest]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
            try validate(self.overrides, name:"overrides", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "LaunchTemplateSpecification"
            case overrides = "Overrides"
        }
    }

    public struct FleetLaunchTemplateOverrides: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", location: .body(locationName: "maxPrice"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "Priority", location: .body(locationName: "priority"), required: false, type: .double), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double)
        ]

        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: PlacementResponse?
        /// The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the override has the lowest priority.
        public let priority: Double?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: PlacementResponse? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case maxPrice = "maxPrice"
            case placement = "placement"
            case priority = "priority"
            case subnetId = "subnetId"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct FleetLaunchTemplateOverridesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "Priority", required: false, type: .double), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .double)
        ]

        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
        public let priority: Double?
        /// The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, subnet-1234abcdeexample1, subnet-0987cdef6example2). A request of type instant can have only one subnet ID.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: Placement? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case instanceType = "InstanceType"
            case maxPrice = "MaxPrice"
            case placement = "Placement"
            case priority = "Priority"
            case subnetId = "SubnetId"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct FleetLaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string)
        ]

        /// The ID of the launch template. If you specify the template ID, you can't specify the template name.
        public let launchTemplateId: String?
        /// The name of the launch template. If you specify the template name, you can't specify the template ID.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case version = "version"
        }
    }

    public struct FleetLaunchTemplateSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// The ID of the launch template. If you specify the template ID, you can't specify the template name.
        public let launchTemplateId: String?
        /// The name of the launch template. If you specify the template name, you can't specify the template ID.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct FlowLog: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeliverLogsErrorMessage", location: .body(locationName: "deliverLogsErrorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", location: .body(locationName: "deliverLogsPermissionArn"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsStatus", location: .body(locationName: "deliverLogsStatus"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogId", location: .body(locationName: "flowLogId"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogStatus", location: .body(locationName: "flowLogStatus"), required: false, type: .string), 
            AWSShapeMember(label: "LogDestination", location: .body(locationName: "logDestination"), required: false, type: .string), 
            AWSShapeMember(label: "LogDestinationType", location: .body(locationName: "logDestinationType"), required: false, type: .enum), 
            AWSShapeMember(label: "LogFormat", location: .body(locationName: "logFormat"), required: false, type: .string), 
            AWSShapeMember(label: "LogGroupName", location: .body(locationName: "logGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "MaxAggregationInterval", location: .body(locationName: "maxAggregationInterval"), required: false, type: .integer), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficType", location: .body(locationName: "trafficType"), required: false, type: .enum)
        ]

        /// The date and time the flow log was created.
        public let creationTime: TimeStamp?
        /// Information about the error that occurred. Rate limited indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
        public let deliverLogsErrorMessage: String?
        /// The ARN of the IAM role that posts logs to CloudWatch Logs.
        public let deliverLogsPermissionArn: String?
        /// The status of the logs delivery (SUCCESS | FAILED).
        public let deliverLogsStatus: String?
        /// The flow log ID.
        public let flowLogId: String?
        /// The status of the flow log (ACTIVE).
        public let flowLogStatus: String?
        /// Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
        public let logDestination: String?
        /// Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
        public let logDestinationType: LogDestinationType?
        /// The format of the flow log record.
        public let logFormat: String?
        /// The name of the flow log group.
        public let logGroupName: String?
        /// The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds (1 minute) or less, regardless of the specified value. Valid Values: 60 | 600 
        public let maxAggregationInterval: Int?
        /// The ID of the resource on which the flow log was created.
        public let resourceId: String?
        /// The tags for the flow log.
        public let tags: [Tag]?
        /// The type of traffic captured for the flow log.
        public let trafficType: TrafficType?

        public init(creationTime: TimeStamp? = nil, deliverLogsErrorMessage: String? = nil, deliverLogsPermissionArn: String? = nil, deliverLogsStatus: String? = nil, flowLogId: String? = nil, flowLogStatus: String? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceId: String? = nil, tags: [Tag]? = nil, trafficType: TrafficType? = nil) {
            self.creationTime = creationTime
            self.deliverLogsErrorMessage = deliverLogsErrorMessage
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.deliverLogsStatus = deliverLogsStatus
            self.flowLogId = flowLogId
            self.flowLogStatus = flowLogStatus
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceId = resourceId
            self.tags = tags
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case deliverLogsErrorMessage = "deliverLogsErrorMessage"
            case deliverLogsPermissionArn = "deliverLogsPermissionArn"
            case deliverLogsStatus = "deliverLogsStatus"
            case flowLogId = "flowLogId"
            case flowLogStatus = "flowLogStatus"
            case logDestination = "logDestination"
            case logDestinationType = "logDestinationType"
            case logFormat = "logFormat"
            case logGroupName = "logGroupName"
            case maxAggregationInterval = "maxAggregationInterval"
            case resourceId = "resourceId"
            case tags = "tagSet"
            case trafficType = "trafficType"
        }
    }

    public struct FpgaDeviceInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Manufacturer", location: .body(locationName: "manufacturer"), required: false, type: .string), 
            AWSShapeMember(label: "MemoryInfo", location: .body(locationName: "memoryInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The count of FPGA accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the FPGA accelerator.
        public let manufacturer: String?
        /// Describes the memory for the FPGA accelerator for the instance type.
        public let memoryInfo: FpgaDeviceMemoryInfo?
        /// The name of the FPGA accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: FpgaDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct FpgaDeviceMemoryInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMiB", location: .body(locationName: "sizeInMiB"), required: false, type: .integer)
        ]

        /// The size (in MiB) for the memory available to the FPGA accelerator.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct FpgaImage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DataRetentionSupport", location: .body(locationName: "dataRetentionSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PciId", location: .body(locationName: "pciId"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Public", location: .body(locationName: "public"), required: false, type: .boolean), 
            AWSShapeMember(label: "ShellVersion", location: .body(locationName: "shellVersion"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp)
        ]

        /// The date and time the AFI was created.
        public let createTime: TimeStamp?
        /// Indicates whether data retention support is enabled for the AFI.
        public let dataRetentionSupport: Bool?
        /// The description of the AFI.
        public let description: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The name of the AFI.
        public let name: String?
        /// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
        public let ownerAlias: String?
        /// The AWS account ID of the AFI owner.
        public let ownerId: String?
        /// Information about the PCI bus.
        public let pciId: PciId?
        /// The product codes for the AFI.
        public let productCodes: [ProductCode]?
        /// Indicates whether the AFI is public.
        public let `public`: Bool?
        /// The version of the AWS Shell that was used to create the bitstream.
        public let shellVersion: String?
        /// Information about the state of the AFI.
        public let state: FpgaImageState?
        /// Any tags assigned to the AFI.
        public let tags: [Tag]?
        /// The time of the most recent update to the AFI.
        public let updateTime: TimeStamp?

        public init(createTime: TimeStamp? = nil, dataRetentionSupport: Bool? = nil, description: String? = nil, fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil, name: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, pciId: PciId? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, shellVersion: String? = nil, state: FpgaImageState? = nil, tags: [Tag]? = nil, updateTime: TimeStamp? = nil) {
            self.createTime = createTime
            self.dataRetentionSupport = dataRetentionSupport
            self.description = description
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
            self.name = name
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.pciId = pciId
            self.productCodes = productCodes
            self.`public` = `public`
            self.shellVersion = shellVersion
            self.state = state
            self.tags = tags
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "createTime"
            case dataRetentionSupport = "dataRetentionSupport"
            case description = "description"
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case fpgaImageId = "fpgaImageId"
            case name = "name"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case pciId = "pciId"
            case productCodes = "productCodes"
            case `public` = "public"
            case shellVersion = "shellVersion"
            case state = "state"
            case tags = "tags"
            case updateTime = "updateTime"
        }
    }

    public struct FpgaImageAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "LoadPermissions", location: .body(locationName: "loadPermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The description of the AFI.
        public let description: String?
        /// The ID of the AFI.
        public let fpgaImageId: String?
        /// The load permissions.
        public let loadPermissions: [LoadPermission]?
        /// The name of the AFI.
        public let name: String?
        /// The product codes.
        public let productCodes: [ProductCode]?

        public init(description: String? = nil, fpgaImageId: String? = nil, loadPermissions: [LoadPermission]? = nil, name: String? = nil, productCodes: [ProductCode]? = nil) {
            self.description = description
            self.fpgaImageId = fpgaImageId
            self.loadPermissions = loadPermissions
            self.name = name
            self.productCodes = productCodes
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case fpgaImageId = "fpgaImageId"
            case loadPermissions = "loadPermissions"
            case name = "name"
            case productCodes = "productCodes"
        }
    }

    public struct FpgaImageState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.  
        public let code: FpgaImageStateCode?
        /// If the state is failed, this is the error message.
        public let message: String?

        public init(code: FpgaImageStateCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct FpgaInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fpgas", location: .body(locationName: "fpgas"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalFpgaMemoryInMiB", location: .body(locationName: "totalFpgaMemoryInMiB"), required: false, type: .integer)
        ]

        /// Describes the FPGAs for the instance type.
        public let fpgas: [FpgaDeviceInfo]?
        /// The total memory of all FPGA accelerators for the instance type.
        public let totalFpgaMemoryInMiB: Int?

        public init(fpgas: [FpgaDeviceInfo]? = nil, totalFpgaMemoryInMiB: Int? = nil) {
            self.fpgas = fpgas
            self.totalFpgaMemoryInMiB = totalFpgaMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case fpgas = "fpgas"
            case totalFpgaMemoryInMiB = "totalFpgaMemoryInMiB"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the IPv6 address pool.
        public let poolId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrAssociations", location: .body(locationName: "ipv6CidrAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the IPv6 CIDR block associations.
        public let ipv6CidrAssociations: [Ipv6CidrAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6CidrAssociations: [Ipv6CidrAssociation]? = nil, nextToken: String? = nil) {
            self.ipv6CidrAssociations = ipv6CidrAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrAssociations = "ipv6CidrAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetCapacityReservationUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. Valid range: Minimum value of 1. Maximum value of 1000.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetCapacityReservationUsageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceUsages", location: .body(locationName: "instanceUsageSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TotalInstanceCount", location: .body(locationName: "totalInstanceCount"), required: false, type: .integer)
        ]

        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// Information about the Capacity Reservation usage.
        public let instanceUsages: [InstanceUsage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.  
        public let state: CapacityReservationState?
        /// The number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availableInstanceCount: Int? = nil, capacityReservationId: String? = nil, instanceType: String? = nil, instanceUsages: [InstanceUsage]? = nil, nextToken: String? = nil, state: CapacityReservationState? = nil, totalInstanceCount: Int? = nil) {
            self.availableInstanceCount = availableInstanceCount
            self.capacityReservationId = capacityReservationId
            self.instanceType = instanceType
            self.instanceUsages = instanceUsages
            self.nextToken = nextToken
            self.state = state
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCount = "availableInstanceCount"
            case capacityReservationId = "capacityReservationId"
            case instanceType = "instanceType"
            case instanceUsages = "instanceUsageSet"
            case nextToken = "nextToken"
            case state = "state"
            case totalInstanceCount = "totalInstanceCount"
        }
    }

    public struct GetCoipPoolUsageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:    coip-address-usage.allocation-id       coip-address-usage.aws-account-id       coip-address-usage.aws-service       coip-address-usage.co-ip   
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the address pool.
        public let poolId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetCoipPoolUsageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoipAddressUsages", location: .body(locationName: "coipAddressUsageSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "CoipPoolId", location: .body(locationName: "coipPoolId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string)
        ]

        /// Information about the address usage.
        public let coipAddressUsages: [CoipAddressUsage]?
        /// The ID of the customer-owned address pool.
        public let coipPoolId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?

        public init(coipAddressUsages: [CoipAddressUsage]? = nil, coipPoolId: String? = nil, localGatewayRouteTableId: String? = nil) {
            self.coipAddressUsages = coipAddressUsages
            self.coipPoolId = coipPoolId
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case coipAddressUsages = "coipAddressUsageSet"
            case coipPoolId = "coipPoolId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
        }
    }

    public struct GetConsoleOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "Latest", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// When enabled, retrieves the latest console output for the instance. Default: disabled (false)
        public let latest: Bool?

        public init(dryRun: Bool? = nil, instanceId: String, latest: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.latest = latest
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case latest = "Latest"
        }
    }

    public struct GetConsoleOutputResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Output", location: .body(locationName: "output"), required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// The ID of the instance.
        public let instanceId: String?
        /// The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.
        public let output: String?
        /// The time at which the output was last updated.
        public let timestamp: TimeStamp?

        public init(instanceId: String? = nil, output: String? = nil, timestamp: TimeStamp? = nil) {
            self.instanceId = instanceId
            self.output = output
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case output = "output"
            case timestamp = "timestamp"
        }
    }

    public struct GetConsoleScreenshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "WakeUp", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
        public let wakeUp: Bool?

        public init(dryRun: Bool? = nil, instanceId: String, wakeUp: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.wakeUp = wakeUp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
            case wakeUp = "WakeUp"
        }
    }

    public struct GetConsoleScreenshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageData", location: .body(locationName: "imageData"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]

        /// The data that comprises the image.
        public let imageData: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(imageData: String? = nil, instanceId: String? = nil) {
            self.imageData = imageData
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case imageData = "imageData"
            case instanceId = "instanceId"
        }
    }

    public struct GetDefaultCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceFamily", required: true, type: .enum)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily

        public init(dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily) {
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct GetDefaultCreditSpecificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFamilyCreditSpecification", location: .body(locationName: "instanceFamilyCreditSpecification"), required: false, type: .structure)
        ]

        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification = "instanceFamilyCreditSpecification"
        }
    }

    public struct GetEbsDefaultKmsKeyIdRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsDefaultKmsKeyIdResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct GetEbsEncryptionByDefaultRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsEncryptionByDefaultResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EbsEncryptionByDefault", location: .body(locationName: "ebsEncryptionByDefault"), required: false, type: .boolean)
        ]

        /// Indicates whether encryption by default is enabled.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
        }
    }

    public struct GetGroupsForCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupsForCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationGroups", location: .body(locationName: "capacityReservationGroupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the resource groups to which the Capacity Reservation has been added.
        public let capacityReservationGroups: [CapacityReservationGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservationGroups: [CapacityReservationGroup]? = nil, nextToken: String? = nil) {
            self.capacityReservationGroups = capacityReservationGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationGroups = "capacityReservationGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetHostReservationPurchasePreviewRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIdSet", required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string)
        ]

        /// The IDs of the Dedicated Hosts with which the reservation is associated.
        public let hostIdSet: [String]
        /// The offering ID of the reservation.
        public let offeringId: String

        public init(hostIdSet: [String], offeringId: String) {
            self.hostIdSet = hostIdSet
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case hostIdSet = "HostIdSet"
            case offeringId = "OfferingId"
        }
    }

    public struct GetHostReservationPurchasePreviewResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string)
        ]

        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.
        public let purchase: [Purchase]?
        /// The potential total hourly price of the reservation per hour.
        public let totalHourlyPrice: String?
        /// The potential total upfront price. This is billed immediately.
        public let totalUpfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case purchase = "purchase"
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
        }
    }

    public struct GetLaunchTemplateDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetLaunchTemplateDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateData", location: .body(locationName: "launchTemplateData"), required: false, type: .structure)
        ]

        /// The instance data.
        public let launchTemplateData: ResponseLaunchTemplateData?

        public init(launchTemplateData: ResponseLaunchTemplateData? = nil) {
            self.launchTemplateData = launchTemplateData
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateData = "launchTemplateData"
        }
    }

    public struct GetManagedPrefixListAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 255)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
        }
    }

    public struct GetManagedPrefixListAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListAssociations", location: .body(locationName: "prefixListAssociationSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the associations.
        public let prefixListAssociations: [PrefixListAssociation]?

        public init(nextToken: String? = nil, prefixListAssociations: [PrefixListAssociation]? = nil) {
            self.nextToken = nextToken
            self.prefixListAssociations = prefixListAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixListAssociations = "prefixListAssociationSet"
        }
    }

    public struct GetManagedPrefixListEntriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "TargetVersion", required: false, type: .long)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The version of the prefix list for which to return the entries. The default is the current version.
        public let targetVersion: Int64?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String, targetVersion: Int64? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
            self.targetVersion = targetVersion
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
            case targetVersion = "TargetVersion"
        }
    }

    public struct GetManagedPrefixListEntriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entries", location: .body(locationName: "entrySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the prefix list entries.
        public let entries: [PrefixListEntry]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(entries: [PrefixListEntry]? = nil, nextToken: String? = nil) {
            self.entries = entries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "entrySet"
            case nextToken = "nextToken"
        }
    }

    public struct GetPasswordDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Windows instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetPasswordDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "PasswordData", location: .body(locationName: "passwordData"), required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// The ID of the Windows instance.
        public let instanceId: String?
        /// The password of the instance. Returns an empty string if the password is not available.
        public let passwordData: String?
        /// The time the data was last updated.
        public let timestamp: TimeStamp?

        public init(instanceId: String? = nil, passwordData: String? = nil, timestamp: TimeStamp? = nil) {
            self.instanceId = instanceId
            self.passwordData = passwordData
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case passwordData = "passwordData"
            case timestamp = "timestamp"
        }
    }

    public struct GetReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .list, encoding: .list(member:"ReservedInstanceId")), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .list, encoding: .list(member:"TargetConfigurationRequest"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange.
        public let reservedInstanceIds: [String]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        public let targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct GetReservedInstancesExchangeQuoteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "IsValidExchange", location: .body(locationName: "isValidExchange"), required: false, type: .boolean), 
            AWSShapeMember(label: "OutputReservedInstancesWillExpireAt", location: .body(locationName: "outputReservedInstancesWillExpireAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PaymentDue", location: .body(locationName: "paymentDue"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstanceValueRollup", location: .body(locationName: "reservedInstanceValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstanceValueSet", location: .body(locationName: "reservedInstanceValueSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetConfigurationValueRollup", location: .body(locationName: "targetConfigurationValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetConfigurationValueSet", location: .body(locationName: "targetConfigurationValueSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ValidationFailureReason", location: .body(locationName: "validationFailureReason"), required: false, type: .string)
        ]

        /// The currency of the transaction.
        public let currencyCode: String?
        /// If true, the exchange is valid. If false, the exchange cannot be completed.
        public let isValidExchange: Bool?
        /// The new end date of the reservation term.
        public let outputReservedInstancesWillExpireAt: TimeStamp?
        /// The total true upfront charge for the exchange.
        public let paymentDue: String?
        /// The cost associated with the Reserved Instance.
        public let reservedInstanceValueRollup: ReservationValue?
        /// The configuration of your Convertible Reserved Instances.
        public let reservedInstanceValueSet: [ReservedInstanceReservationValue]?
        /// The cost associated with the Reserved Instance.
        public let targetConfigurationValueRollup: ReservationValue?
        /// The values of the target Convertible Reserved Instances.
        public let targetConfigurationValueSet: [TargetReservationValue]?
        /// Describes the reason why the exchange cannot be completed.
        public let validationFailureReason: String?

        public init(currencyCode: String? = nil, isValidExchange: Bool? = nil, outputReservedInstancesWillExpireAt: TimeStamp? = nil, paymentDue: String? = nil, reservedInstanceValueRollup: ReservationValue? = nil, reservedInstanceValueSet: [ReservedInstanceReservationValue]? = nil, targetConfigurationValueRollup: ReservationValue? = nil, targetConfigurationValueSet: [TargetReservationValue]? = nil, validationFailureReason: String? = nil) {
            self.currencyCode = currencyCode
            self.isValidExchange = isValidExchange
            self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
            self.paymentDue = paymentDue
            self.reservedInstanceValueRollup = reservedInstanceValueRollup
            self.reservedInstanceValueSet = reservedInstanceValueSet
            self.targetConfigurationValueRollup = targetConfigurationValueRollup
            self.targetConfigurationValueSet = targetConfigurationValueSet
            self.validationFailureReason = validationFailureReason
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case isValidExchange = "isValidExchange"
            case outputReservedInstancesWillExpireAt = "outputReservedInstancesWillExpireAt"
            case paymentDue = "paymentDue"
            case reservedInstanceValueRollup = "reservedInstanceValueRollup"
            case reservedInstanceValueSet = "reservedInstanceValueSet"
            case targetConfigurationValueRollup = "targetConfigurationValueRollup"
            case targetConfigurationValueSet = "targetConfigurationValueSet"
            case validationFailureReason = "validationFailureReason"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentPropagations", location: .body(locationName: "transitGatewayAttachmentPropagations"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the propagation route tables.
        public let transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]?

        public init(nextToken: String? = nil, transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachmentPropagations = transitGatewayAttachmentPropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayAttachmentPropagations = "transitGatewayAttachmentPropagations"
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The type of resource. The valid value is: vpc.    state - The state of the subnet association. Valid values are associated | associating | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MulticastDomainAssociations", location: .body(locationName: "multicastDomainAssociations"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the multicast domain associations.
        public let multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]? = nil, nextToken: String? = nil) {
            self.multicastDomainAssociations = multicastDomainAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastDomainAssociations = "multicastDomainAssociations"
            case nextToken = "nextToken"
        }
    }

    public struct GetTransitGatewayPrefixListReferencesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.resource-id - The ID of the resource for the attachment.    attachment.resource-type - The type of resource for the attachment. Valid values are vpc | vpn | direct-connect-gateway | peering.    attachment.transit-gateway-attachment-id - The ID of the attachment.    is-blackhole - Whether traffic matching the route is blocked (true | false).    prefix-list-id - The ID of the prefix list.    prefix-list-owner-id - The ID of the owner of the prefix list.    state - The state of the prefix list reference (pending | available | modifying | deleting).  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayPrefixListReferencesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayPrefixListReferences", location: .body(locationName: "transitGatewayPrefixListReferenceSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix list references.
        public let transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]?

        public init(nextToken: String? = nil, transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPrefixListReferences = transitGatewayPrefixListReferences
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayPrefixListReferences = "transitGatewayPrefixListReferenceSet"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering.    transit-gateway-attachment-id - The ID of the attachment.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associations"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the associations.
        public let associations: [TransitGatewayRouteTableAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(associations: [TransitGatewayRouteTableAssociation]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
            case nextToken = "nextToken"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering.    transit-gateway-attachment-id - The ID of the attachment.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTablePropagations", location: .body(locationName: "transitGatewayRouteTablePropagations"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the route table propagations.
        public let transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]?

        public init(nextToken: String? = nil, transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTablePropagations = transitGatewayRouteTablePropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayRouteTablePropagations = "transitGatewayRouteTablePropagations"
        }
    }

    public struct GpuDeviceInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Manufacturer", location: .body(locationName: "manufacturer"), required: false, type: .string), 
            AWSShapeMember(label: "MemoryInfo", location: .body(locationName: "memoryInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The number of GPUs for the instance type.
        public let count: Int?
        /// The manufacturer of the GPU accelerator.
        public let manufacturer: String?
        /// Describes the memory available to the GPU accelerator.
        public let memoryInfo: GpuDeviceMemoryInfo?
        /// The name of the GPU accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: GpuDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct GpuDeviceMemoryInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMiB", location: .body(locationName: "sizeInMiB"), required: false, type: .integer)
        ]

        /// The size (in MiB) for the memory available to the GPU accelerator.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct GpuInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Gpus", location: .body(locationName: "gpus"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalGpuMemoryInMiB", location: .body(locationName: "totalGpuMemoryInMiB"), required: false, type: .integer)
        ]

        /// Describes the GPU accelerators for the instance type.
        public let gpus: [GpuDeviceInfo]?
        /// The total size of the memory for the GPU accelerators for the instance type.
        public let totalGpuMemoryInMiB: Int?

        public init(gpus: [GpuDeviceInfo]? = nil, totalGpuMemoryInMiB: Int? = nil) {
            self.gpus = gpus
            self.totalGpuMemoryInMiB = totalGpuMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case gpus = "gpus"
            case totalGpuMemoryInMiB = "totalGpuMemoryInMiB"
        }
    }

    public struct GroupIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]

        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct HibernationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", location: .body(locationName: "configured"), required: false, type: .boolean)
        ]

        /// If this parameter is set to true, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct HibernationOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", required: false, type: .boolean)
        ]

        /// If you set this parameter to true, your instance is enabled for hibernation. Default: false 
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct HistoryRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventInformation", location: .body(locationName: "eventInformation"), required: false, type: .structure), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.    error - An error with the Spot Fleet request.    fleetRequestChange - A change in the status or configuration of the Spot Fleet request.    instanceChange - An instance was launched or terminated.    Information - An informational event.  
        public let eventType: EventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?

        public init(eventInformation: EventInformation? = nil, eventType: EventType? = nil, timestamp: TimeStamp? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct HistoryRecordEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventInformation", location: .body(locationName: "eventInformation"), required: false, type: .structure), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.
        public let eventType: FleetEventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?

        public init(eventInformation: EventInformation? = nil, eventType: FleetEventType? = nil, timestamp: TimeStamp? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct Host: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationTime", location: .body(locationName: "allocationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AllowsMultipleInstanceTypes", location: .body(locationName: "allowsMultipleInstanceTypes"), required: false, type: .enum), 
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", location: .body(locationName: "availabilityZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "HostProperties", location: .body(locationName: "hostProperties"), required: false, type: .structure), 
            AWSShapeMember(label: "HostRecovery", location: .body(locationName: "hostRecovery"), required: false, type: .enum), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instances"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MemberOfServiceLinkedResourceGroup", location: .body(locationName: "memberOfServiceLinkedResourceGroup"), required: false, type: .boolean), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "ReleaseTime", location: .body(locationName: "releaseTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The time that the Dedicated Host was allocated.
        public let allocationTime: TimeStamp?
        /// Indicates whether the Dedicated Host supports multiple instance types of the same instance family, or a specific instance type only. one indicates that the Dedicated Host supports multiple instance types in the instance family. off indicates that the Dedicated Host supports a single instance type only.
        public let allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes?
        /// Whether auto-placement is on or off.
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone of the Dedicated Host.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which the Dedicated Host is allocated.
        public let availabilityZoneId: String?
        /// Information about the instances running on the Dedicated Host.
        public let availableCapacity: AvailableCapacity?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Dedicated Host.
        public let hostId: String?
        /// The hardware specifications of the Dedicated Host.
        public let hostProperties: HostProperties?
        /// Indicates whether host recovery is enabled or disabled for the Dedicated Host.
        public let hostRecovery: HostRecovery?
        /// The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
        public let hostReservationId: String?
        /// The IDs and instance type that are currently running on the Dedicated Host.
        public let instances: [HostInstance]?
        /// Indicates whether the Dedicated Host is in a host resource group. If memberOfServiceLinkedResourceGroup is true, the host is in a host resource group; otherwise, it is not.
        public let memberOfServiceLinkedResourceGroup: Bool?
        /// The ID of the AWS account that owns the Dedicated Host.
        public let ownerId: String?
        /// The time that the Dedicated Host was released.
        public let releaseTime: TimeStamp?
        /// The Dedicated Host's state.
        public let state: AllocationState?
        /// Any tags assigned to the Dedicated Host.
        public let tags: [Tag]?

        public init(allocationTime: TimeStamp? = nil, allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes? = nil, autoPlacement: AutoPlacement? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableCapacity: AvailableCapacity? = nil, clientToken: String? = nil, hostId: String? = nil, hostProperties: HostProperties? = nil, hostRecovery: HostRecovery? = nil, hostReservationId: String? = nil, instances: [HostInstance]? = nil, memberOfServiceLinkedResourceGroup: Bool? = nil, ownerId: String? = nil, releaseTime: TimeStamp? = nil, state: AllocationState? = nil, tags: [Tag]? = nil) {
            self.allocationTime = allocationTime
            self.allowsMultipleInstanceTypes = allowsMultipleInstanceTypes
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableCapacity = availableCapacity
            self.clientToken = clientToken
            self.hostId = hostId
            self.hostProperties = hostProperties
            self.hostRecovery = hostRecovery
            self.hostReservationId = hostReservationId
            self.instances = instances
            self.memberOfServiceLinkedResourceGroup = memberOfServiceLinkedResourceGroup
            self.ownerId = ownerId
            self.releaseTime = releaseTime
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationTime = "allocationTime"
            case allowsMultipleInstanceTypes = "allowsMultipleInstanceTypes"
            case autoPlacement = "autoPlacement"
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableCapacity = "availableCapacity"
            case clientToken = "clientToken"
            case hostId = "hostId"
            case hostProperties = "hostProperties"
            case hostRecovery = "hostRecovery"
            case hostReservationId = "hostReservationId"
            case instances = "instances"
            case memberOfServiceLinkedResourceGroup = "memberOfServiceLinkedResourceGroup"
            case ownerId = "ownerId"
            case releaseTime = "releaseTime"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct HostInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string)
        ]

        /// The ID of instance that is running on the Dedicated Host.
        public let instanceId: String?
        /// The instance type (for example, m3.medium) of the running instance.
        public let instanceType: String?
        /// The ID of the AWS account that owns the instance.
        public let ownerId: String?

        public init(instanceId: String? = nil, instanceType: String? = nil, ownerId: String? = nil) {
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case instanceType = "instanceType"
            case ownerId = "ownerId"
        }
    }

    public struct HostOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string)
        ]

        /// The currency of the offering.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the offering (in seconds).
        public let duration: Int?
        /// The hourly price of the offering.
        public let hourlyPrice: String?
        /// The instance family of the offering.
        public let instanceFamily: String?
        /// The ID of the offering.
        public let offeringId: String?
        /// The available payment option.
        public let paymentOption: PaymentOption?
        /// The upfront price of the offering. Does not apply to No Upfront offerings.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case offeringId = "offeringId"
            case paymentOption = "paymentOption"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct HostProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", location: .body(locationName: "cores"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "Sockets", location: .body(locationName: "sockets"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalVCpus", location: .body(locationName: "totalVCpus"), required: false, type: .integer)
        ]

        /// The number of cores on the Dedicated Host.
        public let cores: Int?
        /// The instance family supported by the Dedicated Host. For example, m5.
        public let instanceFamily: String?
        /// The instance type supported by the Dedicated Host. For example, m5.large. If the host supports multiple instance types, no instanceType is returned.
        public let instanceType: String?
        /// The number of sockets on the Dedicated Host.
        public let sockets: Int?
        /// The total number of vCPUs on the Dedicated Host.
        public let totalVCpus: Int?

        public init(cores: Int? = nil, instanceFamily: String? = nil, instanceType: String? = nil, sockets: Int? = nil, totalVCpus: Int? = nil) {
            self.cores = cores
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.sockets = sockets
            self.totalVCpus = totalVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "cores"
            case instanceFamily = "instanceFamily"
            case instanceType = "instanceType"
            case sockets = "sockets"
            case totalVCpus = "totalVCpus"
        }
    }

    public struct HostReservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string)
        ]

        /// The number of Dedicated Hosts the reservation is associated with.
        public let count: Int?
        /// The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
        public let duration: Int?
        /// The date and time that the reservation ends.
        public let end: TimeStamp?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: [String]?
        /// The ID of the reservation that specifies the associated Dedicated Hosts.
        public let hostReservationId: String?
        /// The hourly price of the reservation.
        public let hourlyPrice: String?
        /// The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
        public let instanceFamily: String?
        /// The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
        public let offeringId: String?
        /// The payment option selected for this reservation.
        public let paymentOption: PaymentOption?
        /// The date and time that the reservation started.
        public let start: TimeStamp?
        /// The state of the reservation.
        public let state: ReservationState?
        /// Any tags assigned to the Dedicated Host Reservation.
        public let tags: [Tag]?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(count: Int? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, end: TimeStamp? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, start: TimeStamp? = nil, state: ReservationState? = nil, tags: [Tag]? = nil, upfrontPrice: String? = nil) {
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.start = start
            self.state = state
            self.tags = tags
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case end = "end"
            case hostIdSet = "hostIdSet"
            case hostReservationId = "hostReservationId"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case offeringId = "offeringId"
            case paymentOption = "paymentOption"
            case start = "start"
            case state = "state"
            case tags = "tagSet"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct IKEVersionsListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct IKEVersionsRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The ID of the instance profile.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct IamInstanceProfileAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// The ID of the association.
        public let associationId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the instance.
        public let instanceId: String?
        /// The state of the association.
        public let state: IamInstanceProfileAssociationState?
        /// The time the IAM instance profile was associated with the instance.
        public let timestamp: TimeStamp?

        public init(associationId: String? = nil, iamInstanceProfile: IamInstanceProfile? = nil, instanceId: String? = nil, state: IamInstanceProfileAssociationState? = nil, timestamp: TimeStamp? = nil) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
            self.state = state
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case iamInstanceProfile = "iamInstanceProfile"
            case instanceId = "instanceId"
            case state = "state"
            case timestamp = "timestamp"
        }
    }

    public struct IamInstanceProfileSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct IcmpTypeCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .integer)
        ]

        /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
        public let code: Int?
        /// The ICMP type. A value of -1 means all types.
        public let `type`: Int?

        public init(code: Int? = nil, type: Int? = nil) {
            self.code = code
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case `type` = "type"
        }
    }

    public struct IdFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deadline", location: .body(locationName: "deadline"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string), 
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: false, type: .boolean)
        ]

        /// The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
        public let deadline: TimeStamp?
        /// The type of resource.
        public let resource: String?
        /// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
        public let useLongIds: Bool?

        public init(deadline: TimeStamp? = nil, resource: String? = nil, useLongIds: Bool? = nil) {
            self.deadline = deadline
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case deadline = "deadline"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct Image: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "CreationDate", location: .body(locationName: "creationDate"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageLocation", location: .body(locationName: "imageLocation"), required: false, type: .string), 
            AWSShapeMember(label: "ImageOwnerAlias", location: .body(locationName: "imageOwnerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "ImageType", location: .body(locationName: "imageType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "imageOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "PlatformDetails", location: .body(locationName: "platformDetails"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Public", location: .body(locationName: "isPublic"), required: false, type: .boolean), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "imageState"), required: false, type: .enum), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UsageOperation", location: .body(locationName: "usageOperation"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum)
        ]

        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The date and time the image was created.
        public let creationDate: String?
        /// The description of the AMI that was provided during image creation.
        public let description: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// The hypervisor type of the image.
        public let hypervisor: HypervisorType?
        /// The ID of the AMI.
        public let imageId: String?
        /// The location of the AMI.
        public let imageLocation: String?
        /// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
        public let imageOwnerAlias: String?
        /// The type of image.
        public let imageType: ImageTypeValues?
        /// The kernel associated with the image, if any. Only applicable for machine images.
        public let kernelId: String?
        /// The name of the AMI that was provided during image creation.
        public let name: String?
        /// The AWS account ID of the image owner.
        public let ownerId: String?
        /// This value is set to windows for Windows AMIs; otherwise, it is blank.
        public let platform: PlatformValues?
        /// The platform details associated with the billing code of the AMI. For more information, see Obtaining Billing Information in the Amazon Elastic Compute Cloud User Guide.
        public let platformDetails: String?
        /// Any product codes associated with the AMI.
        public let productCodes: [ProductCode]?
        /// Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
        public let `public`: Bool?
        /// The RAM disk associated with the image, if any. Only applicable for machine images.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
        public let state: ImageState?
        /// The reason for the state change.
        public let stateReason: StateReason?
        /// Any tags assigned to the image.
        public let tags: [Tag]?
        /// The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. usageOperation corresponds to the lineitem/Operation column on your AWS Cost and Usage Report and in the AWS Price List API. For the list of UsageOperation codes, see Platform Details and Usage Operation Billing Codes in the Amazon Elastic Compute Cloud User Guide.
        public let usageOperation: String?
        /// The type of virtualization of the AMI.
        public let virtualizationType: VirtualizationType?

        public init(architecture: ArchitectureValues? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, creationDate: String? = nil, description: String? = nil, enaSupport: Bool? = nil, hypervisor: HypervisorType? = nil, imageId: String? = nil, imageLocation: String? = nil, imageOwnerAlias: String? = nil, imageType: ImageTypeValues? = nil, kernelId: String? = nil, name: String? = nil, ownerId: String? = nil, platform: PlatformValues? = nil, platformDetails: String? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, sriovNetSupport: String? = nil, state: ImageState? = nil, stateReason: StateReason? = nil, tags: [Tag]? = nil, usageOperation: String? = nil, virtualizationType: VirtualizationType? = nil) {
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.creationDate = creationDate
            self.description = description
            self.enaSupport = enaSupport
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.imageLocation = imageLocation
            self.imageOwnerAlias = imageOwnerAlias
            self.imageType = imageType
            self.kernelId = kernelId
            self.name = name
            self.ownerId = ownerId
            self.platform = platform
            self.platformDetails = platformDetails
            self.productCodes = productCodes
            self.`public` = `public`
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.tags = tags
            self.usageOperation = usageOperation
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case blockDeviceMappings = "blockDeviceMapping"
            case creationDate = "creationDate"
            case description = "description"
            case enaSupport = "enaSupport"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case imageLocation = "imageLocation"
            case imageOwnerAlias = "imageOwnerAlias"
            case imageType = "imageType"
            case kernelId = "kernelId"
            case name = "name"
            case ownerId = "imageOwnerId"
            case platform = "platform"
            case platformDetails = "platformDetails"
            case productCodes = "productCodes"
            case `public` = "isPublic"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case rootDeviceType = "rootDeviceType"
            case sriovNetSupport = "sriovNetSupport"
            case state = "imageState"
            case stateReason = "stateReason"
            case tags = "tagSet"
            case usageOperation = "usageOperation"
            case virtualizationType = "virtualizationType"
        }
    }

    public struct ImageAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchPermissions", location: .body(locationName: "launchPermission"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure)
        ]

        /// The block device mapping entries.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// A description for the AMI.
        public let description: AttributeValue?
        /// The ID of the AMI.
        public let imageId: String?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// The launch permissions.
        public let launchPermissions: [LaunchPermission]?
        /// The product codes.
        public let productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, description: AttributeValue? = nil, imageId: String? = nil, kernelId: AttributeValue? = nil, launchPermissions: [LaunchPermission]? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, sriovNetSupport: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.imageId = imageId
            self.kernelId = kernelId
            self.launchPermissions = launchPermissions
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.sriovNetSupport = sriovNetSupport
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case description = "description"
            case imageId = "imageId"
            case kernelId = "kernel"
            case launchPermissions = "launchPermission"
            case productCodes = "productCodes"
            case ramdiskId = "ramdisk"
            case sriovNetSupport = "sriovNetSupport"
        }
    }

    public struct ImageDiskContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", required: false, type: .structure)
        ]

        /// The description of the disk image.
        public let description: String?
        /// The block device mapping for the disk.
        public let deviceName: String?
        /// The format of the disk image being imported. Valid values: OVA | VHD | VHDX |VMDK 
        public let format: String?
        /// The ID of the EBS snapshot to be used for importing the snapshot.
        public let snapshotId: String?
        /// The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
        public let url: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, deviceName: String? = nil, format: String? = nil, snapshotId: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.format = format
            self.snapshotId = snapshotId
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case deviceName = "DeviceName"
            case format = "Format"
            case snapshotId = "SnapshotId"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateRevocationList", required: true, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the AWS Client VPN Administrator Guide.
        public let certificateRevocationList: String
        /// The ID of the Client VPN endpoint to which the client certificate revocation list applies.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(certificateRevocationList: String, clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList = "CertificateRevocationList"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ImportImageLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]

        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct ImportImageLicenseConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", location: .body(locationName: "licenseConfigurationArn"), required: false, type: .string)
        ]

        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct ImportImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Architecture", required: false, type: .string), 
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiskContainers", location: .body(locationName: "DiskContainer"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Hypervisor", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LicenseSpecifications", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LicenseType", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64 
        public let architecture: String?
        /// The client-specific data.
        public let clientData: ClientData?
        /// The token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// A description string for the import image task.
        public let description: String?
        /// Information about the disk containers.
        public let diskContainers: [ImageDiskContainer]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The target hypervisor platform. Valid values: xen 
        public let hypervisor: String?
        /// An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        public let licenseSpecifications: [ImportImageLicenseConfigurationRequest]?
        /// The license type to be used for the Amazon Machine Image (AMI) after importing. By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify AWS to replace the source-system license with an AWS license, if appropriate. Specify BYOL to retain the source-system license, if appropriate. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see Prerequisites in the VM Import/Export User Guide.
        public let licenseType: String?
        /// The operating system of the virtual machine. Valid values: Windows | Linux 
        public let platform: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the image being imported.
        public let tagSpecifications: [TagSpecification]?

        public init(architecture: String? = nil, clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainers: [ImageDiskContainer]? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationRequest]? = nil, licenseType: String? = nil, platform: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.architecture = architecture
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainers = diskContainers
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "Architecture"
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainers = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case hypervisor = "Hypervisor"
            case kmsKeyId = "KmsKeyId"
            case licenseSpecifications = "LicenseSpecifications"
            case licenseType = "LicenseType"
            case platform = "Platform"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "licenseSpecifications"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The architecture of the virtual machine.
        public let architecture: String?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the AMI is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor of the import task.
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) created by the import task.
        public let imageId: String?
        /// The task ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        public let licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The operating system of the virtual machine.
        public let platform: String?
        /// The progress of the task.
        public let progress: String?
        /// Information about the snapshots.
        public let snapshotDetails: [SnapshotDetail]?
        /// A brief status of the task.
        public let status: String?
        /// A detailed status message of the import task.
        public let statusMessage: String?
        /// Any tags assigned to the image being imported.
        public let tags: [Tag]?

        public init(architecture: String? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.architecture = architecture
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case description = "description"
            case encrypted = "encrypted"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case kmsKeyId = "kmsKeyId"
            case licenseSpecifications = "licenseSpecifications"
            case licenseType = "licenseType"
            case platform = "platform"
            case progress = "progress"
            case snapshotDetails = "snapshotDetailSet"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ImportImageTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "licenseSpecifications"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64 
        public let architecture: String?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the image is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor for the import task. Valid values: xen 
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public let imageId: String?
        /// The ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations that are associated with the import image task.
        public let licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The description string for the import image task.
        public let platform: String?
        /// The percentage of progress of the import image task.
        public let progress: String?
        /// Information about the snapshots.
        public let snapshotDetails: [SnapshotDetail]?
        /// A brief status for the import image task.
        public let status: String?
        /// A descriptive status message for the import image task.
        public let statusMessage: String?
        /// The tags for the import image task.
        public let tags: [Tag]?

        public init(architecture: String? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.architecture = architecture
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case description = "description"
            case encrypted = "encrypted"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case kmsKeyId = "kmsKeyId"
            case licenseSpecifications = "licenseSpecifications"
            case licenseType = "licenseType"
            case platform = "platform"
            case progress = "progress"
            case snapshotDetails = "snapshotDetailSet"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ImportInstanceLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .list, encoding: .list(member:"SecurityGroup")), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .boolean), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure)
        ]

        /// Reserved.
        public let additionalInfo: String?
        /// The architecture of the instance.
        public let architecture: ArchitectureValues?
        /// The security group IDs.
        public let groupIds: [String]?
        /// The security group names.
        public let groupNames: [String]?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
        public let instanceType: InstanceType?
        /// Indicates whether monitoring is enabled.
        public let monitoring: Bool?
        /// The placement information for the instance.
        public let placement: Placement?
        /// [EC2-VPC] An available IP address from the IP address range of the subnet.
        public let privateIpAddress: String?
        /// [EC2-VPC] The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data to make available to the instance.
        public let userData: UserData?

        public init(additionalInfo: String? = nil, architecture: ArchitectureValues? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceType: InstanceType? = nil, monitoring: Bool? = nil, placement: Placement? = nil, privateIpAddress: String? = nil, subnetId: String? = nil, userData: UserData? = nil) {
            self.additionalInfo = additionalInfo
            self.architecture = architecture
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.monitoring = monitoring
            self.placement = placement
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case architecture = "architecture"
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case monitoring = "monitoring"
            case placement = "placement"
            case privateIpAddress = "privateIpAddress"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct ImportInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImages", location: .body(locationName: "diskImage"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: true, type: .enum)
        ]

        /// A description for the instance being imported.
        public let description: String?
        /// The disk image.
        public let diskImages: [DiskImage]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification.
        public let launchSpecification: ImportInstanceLaunchSpecification?
        /// The instance operating system.
        public let platform: PlatformValues

        public init(description: String? = nil, diskImages: [DiskImage]? = nil, dryRun: Bool? = nil, launchSpecification: ImportInstanceLaunchSpecification? = nil, platform: PlatformValues) {
            self.description = description
            self.diskImages = diskImages
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImages = "diskImage"
            case dryRun = "dryRun"
            case launchSpecification = "launchSpecification"
            case platform = "platform"
        }
    }

    public struct ImportInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]

        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct ImportInstanceTaskDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumes"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the task.
        public let description: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance operating system.
        public let platform: PlatformValues?
        /// The volumes.
        public let volumes: [ImportInstanceVolumeDetailItem]?

        public init(description: String? = nil, instanceId: String? = nil, platform: PlatformValues? = nil, volumes: [ImportInstanceVolumeDetailItem]? = nil) {
            self.description = description
            self.instanceId = instanceId
            self.platform = platform
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case instanceId = "instanceId"
            case platform = "platform"
            case volumes = "volumes"
        }
    }

    public struct ImportInstanceVolumeDetailItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: false, type: .long), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: false, type: .structure)
        ]

        /// The Availability Zone where the resulting instance will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// A description of the task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The status of the import of this particular disk image.
        public let status: String?
        /// The status information or errors related to the disk image.
        public let statusMessage: String?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, status: String? = nil, statusMessage: String? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.status = status
            self.statusMessage = statusMessage
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case bytesConverted = "bytesConverted"
            case description = "description"
            case image = "image"
            case status = "status"
            case statusMessage = "statusMessage"
            case volume = "volume"
        }
    }

    public struct ImportKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: true, type: .string), 
            AWSShapeMember(label: "PublicKeyMaterial", location: .body(locationName: "publicKeyMaterial"), required: true, type: .blob), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair.
        public let keyName: String
        /// The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
        public let publicKeyMaterial: Data
        /// The tags to apply to the imported key pair.
        public let tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyName: String, publicKeyMaterial: Data, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.publicKeyMaterial = publicKeyMaterial
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyName = "keyName"
            case publicKeyMaterial = "publicKeyMaterial"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "KeyPairId", location: .body(locationName: "keyPairId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        public let keyFingerprint: String?
        /// The key pair name you provided.
        public let keyName: String?
        /// The ID of the resulting key pair.
        public let keyPairId: String?
        /// The tags applied to the imported key pair.
        public let tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DiskContainer", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The client-specific data.
        public let clientData: ClientData?
        /// Token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The description string for the import snapshot task.
        public let description: String?
        /// Information about the disk container.
        public let diskContainer: SnapshotDiskContainer?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the Region that the snapshot is being copied to. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the snapshot being imported.
        public let tagSpecifications: [TagSpecification]?

        public init(clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainer: SnapshotDiskContainer? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainer = diskContainer
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainer = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case kmsKeyId = "KmsKeyId"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Information about the import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// Any tags assigned to the snapshot being imported.
        public let tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Describes an import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// The tags for the import snapshot task.
        public let tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case tags = "tagSet"
        }
    }

    public struct ImportVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: true, type: .structure)
        ]

        /// The Availability Zone for the resulting EBS volume.
        public let availabilityZone: String
        /// A description of the volume.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The disk image.
        public let image: DiskImageDetail
        /// The volume size.
        public let volume: VolumeDetail

        public init(availabilityZone: String, description: String? = nil, dryRun: Bool? = nil, image: DiskImageDetail, volume: VolumeDetail) {
            self.availabilityZone = availabilityZone
            self.description = description
            self.dryRun = dryRun
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case description = "description"
            case dryRun = "dryRun"
            case image = "image"
            case volume = "volume"
        }
    }

    public struct ImportVolumeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]

        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct ImportVolumeTaskDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: false, type: .long), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: false, type: .structure), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: false, type: .structure)
        ]

        /// The Availability Zone where the resulting volume will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// The description you provided when starting the import volume task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case bytesConverted = "bytesConverted"
            case description = "description"
            case image = "image"
            case volume = "volume"
        }
    }

    public struct InferenceAcceleratorInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Accelerators", location: .body(locationName: "accelerators"), required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Describes the Inference accelerators for the instance type.
        public let accelerators: [InferenceDeviceInfo]?

        public init(accelerators: [InferenceDeviceInfo]? = nil) {
            self.accelerators = accelerators
        }

        private enum CodingKeys: String, CodingKey {
            case accelerators = "accelerators"
        }
    }

    public struct InferenceDeviceInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Manufacturer", location: .body(locationName: "manufacturer"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The number of Inference accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the Inference accelerator.
        public let manufacturer: String?
        /// The name of the Inference accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case name = "name"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmiLaunchIndex", location: .body(locationName: "amiLaunchIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationSpecification", location: .body(locationName: "capacityReservationSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CpuOptions", location: .body(locationName: "cpuOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuAssociations", location: .body(locationName: "elasticGpuAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociations", location: .body(locationName: "elasticInferenceAcceleratorAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "HibernationOptions", location: .body(locationName: "hibernationOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceLifecycle", location: .body(locationName: "instanceLifecycle"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Licenses", location: .body(locationName: "licenseSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MetadataOptions", location: .body(locationName: "metadataOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "reason"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The AMI launch index, which can be used to find this instance in the launch group.
        public let amiLaunchIndex: Int?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries for the instance.
        public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecificationResponse?
        /// The idempotency token you provided when you launched the instance, if applicable.
        public let clientToken: String?
        /// The CPU options for the instance.
        public let cpuOptions: CpuOptions?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: Bool?
        /// The Elastic GPU associated with the instance.
        public let elasticGpuAssociations: [ElasticGpuAssociation]?
        ///  The elastic inference accelerator associated with the instance.
        public let elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// Indicates whether the instance is enabled for hibernation.
        public let hibernationOptions: HibernationOptions?
        /// The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.
        public let hypervisor: HypervisorType?
        /// The IAM instance profile associated with the instance, if applicable.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the AMI used to launch the instance.
        public let imageId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether this is a Spot Instance or a Scheduled Instance.
        public let instanceLifecycle: InstanceLifecycleType?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The kernel associated with this instance, if applicable.
        public let kernelId: String?
        /// The name of the key pair, if this instance was launched with an associated key pair.
        public let keyName: String?
        /// The time the instance was launched.
        public let launchTime: TimeStamp?
        /// The license configurations.
        public let licenses: [LicenseConfiguration]?
        /// The metadata options for the instance.
        public let metadataOptions: InstanceMetadataOptionsResponse?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// [EC2-VPC] The network interfaces for the instance.
        public let networkInterfaces: [InstanceNetworkInterface]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
        public let privateDnsName: String?
        /// The private IPv4 address assigned to the instance.
        public let privateIpAddress: String?
        /// The product codes attached to this instance, if applicable.
        public let productCodes: [ProductCode]?
        /// (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
        public let publicDnsName: String?
        /// The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
        public let publicIpAddress: String?
        /// The RAM disk associated with this instance, if applicable.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The security groups for the instance.
        public let securityGroups: [GroupIdentifier]?
        /// Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: Bool?
        /// If the request is a Spot Instance request, the ID of the request.
        public let spotInstanceRequestId: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the instance.
        public let state: InstanceState?
        /// The reason for the most recent state transition.
        public let stateReason: StateReason?
        /// The reason for the most recent state transition. This might be an empty string.
        public let stateTransitionReason: String?
        /// [EC2-VPC] The ID of the subnet in which the instance is running.
        public let subnetId: String?
        /// Any tags assigned to the instance.
        public let tags: [Tag]?
        /// The virtualization type of the instance.
        public let virtualizationType: VirtualizationType?
        /// [EC2-VPC] The ID of the VPC in which the instance is running.
        public let vpcId: String?

        public init(amiLaunchIndex: Int? = nil, architecture: ArchitectureValues? = nil, blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, capacityReservationId: String? = nil, capacityReservationSpecification: CapacityReservationSpecificationResponse? = nil, clientToken: String? = nil, cpuOptions: CpuOptions? = nil, ebsOptimized: Bool? = nil, elasticGpuAssociations: [ElasticGpuAssociation]? = nil, elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]? = nil, enaSupport: Bool? = nil, hibernationOptions: HibernationOptions? = nil, hypervisor: HypervisorType? = nil, iamInstanceProfile: IamInstanceProfile? = nil, imageId: String? = nil, instanceId: String? = nil, instanceLifecycle: InstanceLifecycleType? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, launchTime: TimeStamp? = nil, licenses: [LicenseConfiguration]? = nil, metadataOptions: InstanceMetadataOptionsResponse? = nil, monitoring: Monitoring? = nil, networkInterfaces: [InstanceNetworkInterface]? = nil, outpostArn: String? = nil, placement: Placement? = nil, platform: PlatformValues? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, productCodes: [ProductCode]? = nil, publicDnsName: String? = nil, publicIpAddress: String? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, securityGroups: [GroupIdentifier]? = nil, sourceDestCheck: Bool? = nil, spotInstanceRequestId: String? = nil, sriovNetSupport: String? = nil, state: InstanceState? = nil, stateReason: StateReason? = nil, stateTransitionReason: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, virtualizationType: VirtualizationType? = nil, vpcId: String? = nil) {
            self.amiLaunchIndex = amiLaunchIndex
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationId = capacityReservationId
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.ebsOptimized = ebsOptimized
            self.elasticGpuAssociations = elasticGpuAssociations
            self.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations
            self.enaSupport = enaSupport
            self.hibernationOptions = hibernationOptions
            self.hypervisor = hypervisor
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceId = instanceId
            self.instanceLifecycle = instanceLifecycle
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTime = launchTime
            self.licenses = licenses
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.outpostArn = outpostArn
            self.placement = placement
            self.platform = platform
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.productCodes = productCodes
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.securityGroups = securityGroups
            self.sourceDestCheck = sourceDestCheck
            self.spotInstanceRequestId = spotInstanceRequestId
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.stateTransitionReason = stateTransitionReason
            self.subnetId = subnetId
            self.tags = tags
            self.virtualizationType = virtualizationType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amiLaunchIndex = "amiLaunchIndex"
            case architecture = "architecture"
            case blockDeviceMappings = "blockDeviceMapping"
            case capacityReservationId = "capacityReservationId"
            case capacityReservationSpecification = "capacityReservationSpecification"
            case clientToken = "clientToken"
            case cpuOptions = "cpuOptions"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuAssociations = "elasticGpuAssociationSet"
            case elasticInferenceAcceleratorAssociations = "elasticInferenceAcceleratorAssociationSet"
            case enaSupport = "enaSupport"
            case hibernationOptions = "hibernationOptions"
            case hypervisor = "hypervisor"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceId = "instanceId"
            case instanceLifecycle = "instanceLifecycle"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case launchTime = "launchTime"
            case licenses = "licenseSet"
            case metadataOptions = "metadataOptions"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case outpostArn = "outpostArn"
            case placement = "placement"
            case platform = "platform"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case productCodes = "productCodes"
            case publicDnsName = "dnsName"
            case publicIpAddress = "ipAddress"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case rootDeviceType = "rootDeviceType"
            case securityGroups = "groupSet"
            case sourceDestCheck = "sourceDestCheck"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case sriovNetSupport = "sriovNetSupport"
            case state = "instanceState"
            case stateReason = "stateReason"
            case stateTransitionReason = "reason"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case virtualizationType = "virtualizationType"
            case vpcId = "vpcId"
        }
    }

    public struct InstanceAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure)
        ]

        /// The block device mapping of the instance.
        public let blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
        public let disableApiTermination: AttributeBooleanValue?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: AttributeBooleanValue?
        /// Indicates whether enhanced networking with ENA is enabled.
        public let enaSupport: AttributeBooleanValue?
        /// The security groups associated with the instance.
        public let groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// The instance type.
        public let instanceType: AttributeValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// A list of product codes.
        public let productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: AttributeValue?
        /// Indicates whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// The user data.
        public let userData: AttributeValue?

        public init(blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, disableApiTermination: AttributeBooleanValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, groups: [GroupIdentifier]? = nil, instanceId: String? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernelId: AttributeValue? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, rootDeviceName: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiTermination = "disableApiTermination"
            case ebsOptimized = "ebsOptimized"
            case enaSupport = "enaSupport"
            case groups = "groupSet"
            case instanceId = "instanceId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case kernelId = "kernel"
            case productCodes = "productCodes"
            case ramdiskId = "ramdisk"
            case rootDeviceName = "rootDeviceName"
            case sourceDestCheck = "sourceDestCheck"
            case sriovNetSupport = "sriovNetSupport"
            case userData = "userData"
        }
    }

    public struct InstanceBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDevice?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDevice? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
        }
    }

    public struct InstanceBlockDeviceMappingSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDeviceSpecification?
        /// suppress the specified device included in the block device mapping.
        public let noDevice: String?
        /// The virtual device name.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDeviceSpecification? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct InstanceCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "TotalCapacity", location: .body(locationName: "totalCapacity"), required: false, type: .integer)
        ]

        /// The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
        public let availableCapacity: Int?
        /// The instance type supported by the Dedicated Host.
        public let instanceType: String?
        /// The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
        public let totalCapacity: Int?

        public init(availableCapacity: Int? = nil, instanceType: String? = nil, totalCapacity: Int? = nil) {
            self.availableCapacity = availableCapacity
            self.instanceType = instanceType
            self.totalCapacity = totalCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availableCapacity = "availableCapacity"
            case instanceType = "instanceType"
            case totalCapacity = "totalCapacity"
        }
    }

    public struct InstanceCount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// The number of listed Reserved Instances in the state specified by the state.
        public let instanceCount: Int?
        /// The states of the listed Reserved Instances.
        public let state: ListingState?

        public init(instanceCount: Int? = nil, state: ListingState? = nil) {
            self.instanceCount = instanceCount
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "instanceCount"
            case state = "state"
        }
    }

    public struct InstanceCreditSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", location: .body(locationName: "cpuCredits"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]

        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
            case instanceId = "instanceId"
        }
    }

    public struct InstanceCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]

        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceExportDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum)
        ]

        /// The ID of the resource being exported.
        public let instanceId: String?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(instanceId: String? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.instanceId = instanceId
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case targetEnvironment = "targetEnvironment"
        }
    }

    public struct InstanceFamilyCreditSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", location: .body(locationName: "cpuCredits"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .enum)
        ]

        /// The default credit option for CPU usage of the instance family. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily?

        public init(cpuCredits: String? = nil, instanceFamily: UnlimitedSupportedInstanceFamily? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
            case instanceFamily = "instanceFamily"
        }
    }

    public struct InstanceIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]

        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct InstanceIpv6AddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]

        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct InstanceMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MarketType", required: false, type: .enum), 
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure)
        ]

        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: SpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: SpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct InstanceMetadataOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpEndpoint", required: false, type: .enum), 
            AWSShapeMember(label: "HttpPutResponseHopLimit", required: false, type: .integer), 
            AWSShapeMember(label: "HttpTokens", required: false, type: .enum)
        ]

        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata. 
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
        }
    }

    public struct InstanceMetadataOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpEndpoint", location: .body(locationName: "httpEndpoint"), required: false, type: .enum), 
            AWSShapeMember(label: "HttpPutResponseHopLimit", location: .body(locationName: "httpPutResponseHopLimit"), required: false, type: .integer), 
            AWSShapeMember(label: "HttpTokens", location: .body(locationName: "httpTokens"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata. 
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: InstanceMetadataOptionsState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, state: InstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "httpEndpoint"
            case httpPutResponseHopLimit = "httpPutResponseHopLimit"
            case httpTokens = "httpTokens"
            case state = "state"
        }
    }

    public struct InstanceMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure)
        ]

        /// The ID of the instance.
        public let instanceId: String?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?

        public init(instanceId: String? = nil, monitoring: Monitoring? = nil) {
            self.instanceId = instanceId
            self.monitoring = monitoring
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case monitoring = "monitoring"
        }
    }

    public struct InstanceNetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InterfaceType", location: .body(locationName: "interfaceType"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The association information for an Elastic IPv4 associated with the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: InstanceNetworkInterfaceAttachment?
        /// The description.
        public let description: String?
        /// One or more security groups.
        public let groups: [GroupIdentifier]?
        /// Describes the type of network interface. Valid values: interface | efa 
        public let interfaceType: String?
        /// One or more IPv6 addresses associated with the network interface.
        public let ipv6Addresses: [InstanceIpv6Address]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the AWS account that created the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: [InstancePrivateIpAddress]?
        /// Indicates whether to validate network traffic to or from this network interface.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, attachment: InstanceNetworkInterfaceAttachment? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: String? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [InstancePrivateIpAddress]? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6Addresses = ipv6Addresses
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case attachment = "attachment"
            case description = "description"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv6Addresses = "ipv6AddressesSet"
            case macAddress = "macAddress"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case sourceDestCheck = "sourceDestCheck"
            case status = "status"
            case subnetId = "subnetId"
            case vpcId = "vpcId"
        }
    }

    public struct InstanceNetworkInterfaceAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierIp", location: .body(locationName: "carrierIp"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]

        /// The carrier IP address associated with the network interface.
        public let carrierIp: String?
        /// The ID of the owner of the Elastic IP address.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The public IP address or Elastic IP address bound to the network interface.
        public let publicIp: String?

        public init(carrierIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.carrierIp = carrierIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case carrierIp = "carrierIp"
            case ipOwnerId = "ipOwnerId"
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
        }
    }

    public struct InstanceNetworkInterfaceAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The index of the device on the instance for the network interface attachment.
        public let deviceIndex: Int?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case status = "status"
        }
    }

    public struct InstanceNetworkInterfaceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociateCarrierIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "AssociatePublicIpAddress", location: .body(locationName: "associatePublicIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "InterfaceType", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public let deleteOnTermination: Bool?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public let description: String?
        /// The position of the network interface in the attachment order. A primary network interface has a device index of 0. If you specify a network interface when launching an instance, you must specify the device index.
        public let deviceIndex: Int?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        public let groups: [String]?
        /// The type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. If you are not creating an EFA, specify interface or omit this parameter. Valid values: interface | efa 
        public let interfaceType: String?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int?
        /// One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public let ipv6Addresses: [InstanceIpv6Address]?
        /// The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
        public let networkInterfaceId: String?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case deleteOnTermination = "deleteOnTermination"
            case description = "description"
            case deviceIndex = "deviceIndex"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6AddressesSet"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
        }
    }

    public struct InstancePrivateIpAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]

        /// The association information for an Elastic IP address for the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IP address of the network interface.
        public let primary: Bool?
        /// The private IPv4 DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address of the network interface.
        public let privateIpAddress: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case primary = "primary"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct InstanceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExcludeBootVolume", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]

        /// Excludes the root volume from being snapshotted.
        public let excludeBootVolume: Bool?
        /// The instance to specify which volumes should be snapshotted.
        public let instanceId: String?

        public init(excludeBootVolume: Bool? = nil, instanceId: String? = nil) {
            self.excludeBootVolume = excludeBootVolume
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case excludeBootVolume = "ExcludeBootVolume"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum)
        ]

        /// The state of the instance as a 16-bit unsigned integer.  The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored. The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.  The valid values for instance-state-code will all be in the range of the low byte and they are:    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped    You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.
        public let code: Int?
        /// The current state of the instance.
        public let name: InstanceStateName?

        public init(code: Int? = nil, name: InstanceStateName? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case name = "name"
        }
    }

    public struct InstanceStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentState", location: .body(locationName: "currentState"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .structure)
        ]

        /// The current state of the instance.
        public let currentState: InstanceState?
        /// The ID of the instance.
        public let instanceId: String?
        /// The previous state of the instance.
        public let previousState: InstanceState?

        public init(currentState: InstanceState? = nil, instanceId: String? = nil, previousState: InstanceState? = nil) {
            self.currentState = currentState
            self.instanceId = instanceId
            self.previousState = previousState
        }

        private enum CodingKeys: String, CodingKey {
            case currentState = "currentState"
            case instanceId = "instanceId"
            case previousState = "previousState"
        }
    }

    public struct InstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceStatus", location: .body(locationName: "instanceStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "SystemStatus", location: .body(locationName: "systemStatus"), required: false, type: .structure)
        ]

        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// Any scheduled events associated with the instance.
        public let events: [InstanceStatusEvent]?
        /// The ID of the instance.
        public let instanceId: String?
        /// The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
        public let instanceState: InstanceState?
        /// Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
        public let instanceStatus: InstanceStatusSummary?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
        public let systemStatus: InstanceStatusSummary?

        public init(availabilityZone: String? = nil, events: [InstanceStatusEvent]? = nil, instanceId: String? = nil, instanceState: InstanceState? = nil, instanceStatus: InstanceStatusSummary? = nil, outpostArn: String? = nil, systemStatus: InstanceStatusSummary? = nil) {
            self.availabilityZone = availabilityZone
            self.events = events
            self.instanceId = instanceId
            self.instanceState = instanceState
            self.instanceStatus = instanceStatus
            self.outpostArn = outpostArn
            self.systemStatus = systemStatus
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case events = "eventsSet"
            case instanceId = "instanceId"
            case instanceState = "instanceState"
            case instanceStatus = "instanceStatus"
            case outpostArn = "outpostArn"
            case systemStatus = "systemStatus"
        }
    }

    public struct InstanceStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImpairedSince", location: .body(locationName: "impairedSince"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
        public let impairedSince: TimeStamp?
        /// The type of instance status.
        public let name: StatusName?
        /// The status.
        public let status: StatusType?

        public init(impairedSince: TimeStamp? = nil, name: StatusName? = nil, status: StatusType? = nil) {
            self.impairedSince = impairedSince
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case impairedSince = "impairedSince"
            case name = "name"
            case status = "status"
        }
    }

    public struct InstanceStatusEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceEventId", location: .body(locationName: "instanceEventId"), required: false, type: .string), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotBeforeDeadline", location: .body(locationName: "notBeforeDeadline"), required: false, type: .timestamp)
        ]

        /// The event code.
        public let code: EventCode?
        /// A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
        public let description: String?
        /// The ID of the event.
        public let instanceEventId: String?
        /// The latest scheduled end time for the event.
        public let notAfter: TimeStamp?
        /// The earliest scheduled start time for the event.
        public let notBefore: TimeStamp?
        /// The deadline for starting the event.
        public let notBeforeDeadline: TimeStamp?

        public init(code: EventCode? = nil, description: String? = nil, instanceEventId: String? = nil, notAfter: TimeStamp? = nil, notBefore: TimeStamp? = nil, notBeforeDeadline: TimeStamp? = nil) {
            self.code = code
            self.description = description
            self.instanceEventId = instanceEventId
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.notBeforeDeadline = notBeforeDeadline
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case description = "description"
            case instanceEventId = "instanceEventId"
            case notAfter = "notAfter"
            case notBefore = "notBefore"
            case notBeforeDeadline = "notBeforeDeadline"
        }
    }

    public struct InstanceStatusSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The system instance health or application instance health.
        public let details: [InstanceStatusDetails]?
        /// The status.
        public let status: SummaryStatus?

        public init(details: [InstanceStatusDetails]? = nil, status: SummaryStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct InstanceStorageInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Disks", location: .body(locationName: "disks"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalSizeInGB", location: .body(locationName: "totalSizeInGB"), required: false, type: .long)
        ]

        /// Array describing the disks that are available for the instance type.
        public let disks: [DiskInfo]?
        /// The total size of the disks, in GB.
        public let totalSizeInGB: Int64?

        public init(disks: [DiskInfo]? = nil, totalSizeInGB: Int64? = nil) {
            self.disks = disks
            self.totalSizeInGB = totalSizeInGB
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "disks"
            case totalSizeInGB = "totalSizeInGB"
        }
    }

    public struct InstanceTagNotificationAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeAllTagsOfInstance", location: .body(locationName: "includeAllTagsOfInstance"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTagKeys", location: .body(locationName: "instanceTagKeySet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. true indicates that all tag keys in the current Region are registered.
        public let includeAllTagsOfInstance: Bool?
        /// The registered tag keys.
        public let instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "includeAllTagsOfInstance"
            case instanceTagKeys = "instanceTagKeySet"
        }
    }

    public struct InstanceTypeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoRecoverySupported", location: .body(locationName: "autoRecoverySupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "BareMetal", location: .body(locationName: "bareMetal"), required: false, type: .boolean), 
            AWSShapeMember(label: "BurstablePerformanceSupported", location: .body(locationName: "burstablePerformanceSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "CurrentGeneration", location: .body(locationName: "currentGeneration"), required: false, type: .boolean), 
            AWSShapeMember(label: "DedicatedHostsSupported", location: .body(locationName: "dedicatedHostsSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "EbsInfo", location: .body(locationName: "ebsInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "FpgaInfo", location: .body(locationName: "fpgaInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "FreeTierEligible", location: .body(locationName: "freeTierEligible"), required: false, type: .boolean), 
            AWSShapeMember(label: "GpuInfo", location: .body(locationName: "gpuInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "HibernationSupported", location: .body(locationName: "hibernationSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "InferenceAcceleratorInfo", location: .body(locationName: "inferenceAcceleratorInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceStorageInfo", location: .body(locationName: "instanceStorageInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceStorageSupported", location: .body(locationName: "instanceStorageSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "MemoryInfo", location: .body(locationName: "memoryInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInfo", location: .body(locationName: "networkInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "PlacementGroupInfo", location: .body(locationName: "placementGroupInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "ProcessorInfo", location: .body(locationName: "processorInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "SupportedRootDeviceTypes", location: .body(locationName: "supportedRootDeviceTypes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SupportedUsageClasses", location: .body(locationName: "supportedUsageClasses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SupportedVirtualizationTypes", location: .body(locationName: "supportedVirtualizationTypes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VCpuInfo", location: .body(locationName: "vCpuInfo"), required: false, type: .structure)
        ]

        /// Indicates whether auto recovery is supported.
        public let autoRecoverySupported: Bool?
        /// Indicates whether the instance is bare metal.
        public let bareMetal: Bool?
        /// Indicates whether the instance type is a burstable performance instance type.
        public let burstablePerformanceSupported: Bool?
        /// Indicates whether the instance type is a current generation.
        public let currentGeneration: Bool?
        /// Indicates whether Dedicated Hosts are supported on the instance type.
        public let dedicatedHostsSupported: Bool?
        /// Describes the Amazon EBS settings for the instance type.
        public let ebsInfo: EbsInfo?
        /// Describes the FPGA accelerator settings for the instance type.
        public let fpgaInfo: FpgaInfo?
        /// Indicates whether the instance type is eligible for the free tier.
        public let freeTierEligible: Bool?
        /// Describes the GPU accelerator settings for the instance type.
        public let gpuInfo: GpuInfo?
        /// Indicates whether On-Demand hibernation is supported.
        public let hibernationSupported: Bool?
        /// Indicates the hypervisor used for the instance type.
        public let hypervisor: InstanceTypeHypervisor?
        /// Describes the Inference accelerator settings for the instance type.
        public let inferenceAcceleratorInfo: InferenceAcceleratorInfo?
        /// Describes the disks for the instance type.
        public let instanceStorageInfo: InstanceStorageInfo?
        /// Indicates whether instance storage is supported.
        public let instanceStorageSupported: Bool?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// Describes the memory for the instance type.
        public let memoryInfo: MemoryInfo?
        /// Describes the network settings for the instance type.
        public let networkInfo: NetworkInfo?
        /// Describes the placement group settings for the instance type.
        public let placementGroupInfo: PlacementGroupInfo?
        /// Describes the processor.
        public let processorInfo: ProcessorInfo?
        /// Indicates the supported root device types.
        public let supportedRootDeviceTypes: [RootDeviceType]?
        /// Indicates whether the instance type is offered for spot or On-Demand.
        public let supportedUsageClasses: [UsageClassType]?
        /// The supported virtualization types.
        public let supportedVirtualizationTypes: [VirtualizationType]?
        /// Describes the vCPU configurations for the instance type.
        public let vCpuInfo: VCpuInfo?

        public init(autoRecoverySupported: Bool? = nil, bareMetal: Bool? = nil, burstablePerformanceSupported: Bool? = nil, currentGeneration: Bool? = nil, dedicatedHostsSupported: Bool? = nil, ebsInfo: EbsInfo? = nil, fpgaInfo: FpgaInfo? = nil, freeTierEligible: Bool? = nil, gpuInfo: GpuInfo? = nil, hibernationSupported: Bool? = nil, hypervisor: InstanceTypeHypervisor? = nil, inferenceAcceleratorInfo: InferenceAcceleratorInfo? = nil, instanceStorageInfo: InstanceStorageInfo? = nil, instanceStorageSupported: Bool? = nil, instanceType: InstanceType? = nil, memoryInfo: MemoryInfo? = nil, networkInfo: NetworkInfo? = nil, placementGroupInfo: PlacementGroupInfo? = nil, processorInfo: ProcessorInfo? = nil, supportedRootDeviceTypes: [RootDeviceType]? = nil, supportedUsageClasses: [UsageClassType]? = nil, supportedVirtualizationTypes: [VirtualizationType]? = nil, vCpuInfo: VCpuInfo? = nil) {
            self.autoRecoverySupported = autoRecoverySupported
            self.bareMetal = bareMetal
            self.burstablePerformanceSupported = burstablePerformanceSupported
            self.currentGeneration = currentGeneration
            self.dedicatedHostsSupported = dedicatedHostsSupported
            self.ebsInfo = ebsInfo
            self.fpgaInfo = fpgaInfo
            self.freeTierEligible = freeTierEligible
            self.gpuInfo = gpuInfo
            self.hibernationSupported = hibernationSupported
            self.hypervisor = hypervisor
            self.inferenceAcceleratorInfo = inferenceAcceleratorInfo
            self.instanceStorageInfo = instanceStorageInfo
            self.instanceStorageSupported = instanceStorageSupported
            self.instanceType = instanceType
            self.memoryInfo = memoryInfo
            self.networkInfo = networkInfo
            self.placementGroupInfo = placementGroupInfo
            self.processorInfo = processorInfo
            self.supportedRootDeviceTypes = supportedRootDeviceTypes
            self.supportedUsageClasses = supportedUsageClasses
            self.supportedVirtualizationTypes = supportedVirtualizationTypes
            self.vCpuInfo = vCpuInfo
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecoverySupported = "autoRecoverySupported"
            case bareMetal = "bareMetal"
            case burstablePerformanceSupported = "burstablePerformanceSupported"
            case currentGeneration = "currentGeneration"
            case dedicatedHostsSupported = "dedicatedHostsSupported"
            case ebsInfo = "ebsInfo"
            case fpgaInfo = "fpgaInfo"
            case freeTierEligible = "freeTierEligible"
            case gpuInfo = "gpuInfo"
            case hibernationSupported = "hibernationSupported"
            case hypervisor = "hypervisor"
            case inferenceAcceleratorInfo = "inferenceAcceleratorInfo"
            case instanceStorageInfo = "instanceStorageInfo"
            case instanceStorageSupported = "instanceStorageSupported"
            case instanceType = "instanceType"
            case memoryInfo = "memoryInfo"
            case networkInfo = "networkInfo"
            case placementGroupInfo = "placementGroupInfo"
            case processorInfo = "processorInfo"
            case supportedRootDeviceTypes = "supportedRootDeviceTypes"
            case supportedUsageClasses = "supportedUsageClasses"
            case supportedVirtualizationTypes = "supportedVirtualizationTypes"
            case vCpuInfo = "vCpuInfo"
        }
    }

    public struct InstanceTypeOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "LocationType", location: .body(locationName: "locationType"), required: false, type: .enum)
        ]

        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The identifier for the location. This depends on the location type. For example, if the location type is region, the location is the Region code (for example, us-east-2.)
        public let location: String?
        /// The location type.
        public let locationType: LocationType?

        public init(instanceType: InstanceType? = nil, location: String? = nil, locationType: LocationType? = nil) {
            self.instanceType = instanceType
            self.location = location
            self.locationType = locationType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case location = "location"
            case locationType = "locationType"
        }
    }

    public struct InstanceUsage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "UsedInstanceCount", location: .body(locationName: "usedInstanceCount"), required: false, type: .integer)
        ]

        /// The ID of the AWS account that is making use of the Capacity Reservation.
        public let accountId: String?
        /// The number of instances the AWS account currently has in the Capacity Reservation.
        public let usedInstanceCount: Int?

        public init(accountId: String? = nil, usedInstanceCount: Int? = nil) {
            self.accountId = accountId
            self.usedInstanceCount = usedInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case usedInstanceCount = "usedInstanceCount"
        }
    }

    public struct InternetGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Any VPCs attached to the internet gateway.
        public let attachments: [InternetGatewayAttachment]?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// The ID of the AWS account that owns the internet gateway.
        public let ownerId: String?
        /// Any tags assigned to the internet gateway.
        public let tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, internetGatewayId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.internetGatewayId = internetGatewayId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case internetGatewayId = "internetGatewayId"
            case ownerId = "ownerId"
            case tags = "tagSet"
        }
    }

    public struct InternetGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The current state of the attachment. For an internet gateway, the state is available when attached to a VPC; otherwise, this value is not returned.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct IpPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Ipv6Ranges", location: .body(locationName: "ipv6Ranges"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers). [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
        public let ipProtocol: String?
        /// The IPv4 ranges.
        public let ipRanges: [IpRange]?
        /// [VPC only] The IPv6 ranges.
        public let ipv6Ranges: [Ipv6Range]?
        /// [VPC only] The prefix list IDs.
        public let prefixListIds: [PrefixListId]?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int?
        /// The security group and AWS account ID pairs.
        public let userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [IpRange]? = nil, ipv6Ranges: [Ipv6Range]? = nil, prefixListIds: [PrefixListId]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.ipv6Ranges = ipv6Ranges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case ipRanges = "ipRanges"
            case ipv6Ranges = "ipv6Ranges"
            case prefixListIds = "prefixListIds"
            case toPort = "toPort"
            case userIdGroupPairs = "groups"
        }
    }

    public struct IpRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        /// The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIp: String?
        /// A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String?

        public init(cidrIp: String? = nil, description: String? = nil) {
            self.cidrIp = cidrIp
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case description = "description"
        }
    }

    public struct Ipv6CidrAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedResource", location: .body(locationName: "associatedResource"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Cidr", location: .body(locationName: "ipv6Cidr"), required: false, type: .string)
        ]

        /// The resource that's associated with the IPv6 CIDR block.
        public let associatedResource: String?
        /// The IPv6 CIDR block.
        public let ipv6Cidr: String?

        public init(associatedResource: String? = nil, ipv6Cidr: String? = nil) {
            self.associatedResource = associatedResource
            self.ipv6Cidr = ipv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case associatedResource = "associatedResource"
            case ipv6Cidr = "ipv6Cidr"
        }
    }

    public struct Ipv6CidrBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]

        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?

        public init(ipv6CidrBlock: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct Ipv6Pool: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PoolCidrBlocks", location: .body(locationName: "poolCidrBlockSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PoolId", location: .body(locationName: "poolId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The description for the address pool.
        public let description: String?
        /// The CIDR blocks for the address pool.
        public let poolCidrBlocks: [PoolCidrBlock]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        public let tags: [Tag]?

        public init(description: String? = nil, poolCidrBlocks: [PoolCidrBlock]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.poolCidrBlocks = poolCidrBlocks
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case poolCidrBlocks = "poolCidrBlockSet"
            case poolId = "poolId"
            case tags = "tagSet"
        }
    }

    public struct Ipv6Range: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIpv6", location: .body(locationName: "cidrIpv6"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        /// The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?
        /// A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String?

        public init(cidrIpv6: String? = nil, description: String? = nil) {
            self.cidrIpv6 = cidrIpv6
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv6 = "cidrIpv6"
            case description = "description"
        }
    }

    public struct KeyPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyMaterial", location: .body(locationName: "keyMaterial"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "KeyPairId", location: .body(locationName: "keyPairId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The SHA-1 digest of the DER encoded private key.
        public let keyFingerprint: String?
        /// An unencrypted PEM encoded RSA private key.
        public let keyMaterial: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Any tags applied to the key pair.
        public let tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyMaterial: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyMaterial = keyMaterial
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyMaterial = "keyMaterial"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case tags = "tagSet"
        }
    }

    public struct KeyPairInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "KeyPairId", location: .body(locationName: "keyPairId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// If you used CreateKeyPair to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used ImportKeyPair to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Any tags applied to the key pair.
        public let tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case tags = "tagSet"
        }
    }

    public struct LastError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code for the VPC endpoint error.
        public let code: String?
        /// The error message for the VPC endpoint error.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct LaunchPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]

        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct LaunchPermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Remove", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The AWS account ID to add to the list of launch permissions for the AMI.
        public let add: [LaunchPermission]?
        /// The AWS account ID to remove from the list of launch permissions for the AMI.
        public let remove: [LaunchPermission]?

        public init(add: [LaunchPermission]? = nil, remove: [LaunchPermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string)
        ]

        /// Deprecated.
        public let addressingType: String?
        /// One or more block device mapping entries.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        public let monitoring: RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: [GroupIdentifier]?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data for the instance.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroups = "groupSet"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct LaunchTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedBy", location: .body(locationName: "createdBy"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultVersionNumber", location: .body(locationName: "defaultVersionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "LatestVersionNumber", location: .body(locationName: "latestVersionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The principal that created the launch template. 
        public let createdBy: String?
        /// The time launch template was created.
        public let createTime: TimeStamp?
        /// The version number of the default version of the launch template.
        public let defaultVersionNumber: Int64?
        /// The version number of the latest version of the launch template.
        public let latestVersionNumber: Int64?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The tags for the launch template.
        public let tags: [Tag]?

        public init(createdBy: String? = nil, createTime: TimeStamp? = nil, defaultVersionNumber: Int64? = nil, latestVersionNumber: Int64? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, tags: [Tag]? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersionNumber = defaultVersionNumber
            self.latestVersionNumber = latestVersionNumber
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "createdBy"
            case createTime = "createTime"
            case defaultVersionNumber = "defaultVersionNumber"
            case latestVersionNumber = "latestVersionNumber"
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateAndOverridesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .structure)
        ]

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverrides?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: FleetLaunchTemplateOverrides? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct LaunchTemplateBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string)
        ]

        /// The device name.
        public let deviceName: String?
        /// Information about the block device for an EBS volume.
        public let ebs: LaunchTemplateEbsBlockDevice?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN).
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct LaunchTemplateBlockDeviceMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Ebs", required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", required: false, type: .string)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: LaunchTemplateEbsBlockDeviceRequest?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDeviceRequest? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", required: false, type: .structure)
        ]

        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", location: .body(locationName: "capacityReservationPreference"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", location: .body(locationName: "capacityReservationTarget"), required: false, type: .structure)
        ]

        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct LaunchTemplateConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: [LaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [LaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct LaunchTemplateCpuOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", location: .body(locationName: "coreCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", location: .body(locationName: "threadsPerCore"), required: false, type: .integer)
        ]

        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct LaunchTemplateCpuOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", required: false, type: .integer)
        ]

        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct LaunchTemplateEbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum)
        ]

        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. 
        public let iops: Int?
        /// The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case encrypted = "encrypted"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case snapshotId = "snapshotId"
            case volumeSize = "volumeSize"
            case volumeType = "volumeType"
        }
    }

    public struct LaunchTemplateEbsBlockDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum)
        ]

        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for an io1 or io2 volume, with a maximum ratio of 50 IOPS/GiB for io1, and 500 IOPS/GiB for io2. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. This parameter is valid only for Provisioned IOPS SSD (io1 and io2) volumes.
        public let iops: Int?
        /// The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "SnapshotId"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct LaunchTemplateElasticInferenceAccelerator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]

        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
        public let `type`: String

        public init(count: Int? = nil, type: String) {
            self.count = count
            self.`type` = `type`
        }

        public func validate(name: String) throws {
            try validate(self.count, name:"count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case `type` = "Type"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]

        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
        public let `type`: String?

        public init(count: Int? = nil, type: String? = nil) {
            self.count = count
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case `type` = "type"
        }
    }

    public struct LaunchTemplateHibernationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", location: .body(locationName: "configured"), required: false, type: .boolean)
        ]

        /// If this parameter is set to true, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct LaunchTemplateHibernationOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", required: false, type: .boolean)
        ]

        /// If you set this parameter to true, the instance is enabled for hibernation. Default: false 
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct LaunchTemplateInstanceMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MarketType", location: .body(locationName: "marketType"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotOptions", location: .body(locationName: "spotOptions"), required: false, type: .structure)
        ]

        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "marketType"
            case spotOptions = "spotOptions"
        }
    }

    public struct LaunchTemplateInstanceMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MarketType", required: false, type: .enum), 
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure)
        ]

        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptionsRequest?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptionsRequest? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct LaunchTemplateInstanceMetadataOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpEndpoint", location: .body(locationName: "httpEndpoint"), required: false, type: .enum), 
            AWSShapeMember(label: "HttpPutResponseHopLimit", location: .body(locationName: "httpPutResponseHopLimit"), required: false, type: .integer), 
            AWSShapeMember(label: "HttpTokens", location: .body(locationName: "httpTokens"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.  
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: LaunchTemplateHttpTokensState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: LaunchTemplateInstanceMetadataOptionsState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil, state: LaunchTemplateInstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "httpEndpoint"
            case httpPutResponseHopLimit = "httpPutResponseHopLimit"
            case httpTokens = "httpTokens"
            case state = "state"
        }
    }

    public struct LaunchTemplateInstanceMetadataOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpEndpoint", required: false, type: .enum), 
            AWSShapeMember(label: "HttpPutResponseHopLimit", required: false, type: .integer), 
            AWSShapeMember(label: "HttpTokens", required: false, type: .enum)
        ]

        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.  
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: LaunchTemplateHttpTokensState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociateCarrierIpAddress", location: .body(locationName: "associateCarrierIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "AssociatePublicIpAddress", location: .body(locationName: "associatePublicIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"groupId")), 
            AWSShapeMember(label: "InterfaceType", location: .body(locationName: "interfaceType"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of one or more security groups.
        public let groups: [String]?
        /// The type of network interface.
        public let interfaceType: String?
        /// The number of IPv6 addresses for the network interface.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses for the network interface.
        public let ipv6Addresses: [InstanceIpv6Address]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses for the network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "associateCarrierIpAddress"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case deleteOnTermination = "deleteOnTermination"
            case description = "description"
            case deviceIndex = "deviceIndex"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6AddressesSet"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociateCarrierIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DeviceIndex", required: false, type: .integer), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "InterfaceType", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", required: false, type: .list, encoding: .list(member:"InstanceIpv6Address")), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]

        /// Associates a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Associates a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of one or more security groups.
        public let groups: [String]?
        /// The type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. If you are not creating an EFA, specify interface or omit this parameter. Valid values: interface | efa 
        public let interfaceType: String?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: [InstanceIpv6AddressRequest]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6AddressRequest]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Addresses"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddresses = "PrivateIpAddresses"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct LaunchTemplateLicenseConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", location: .body(locationName: "licenseConfigurationArn"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct LaunchTemplateLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct LaunchTemplateOverrides: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Priority", location: .body(locationName: "priority"), required: false, type: .double), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double)
        ]

        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The priority for the launch template override. If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
        public let priority: Double?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, priority: Double? = nil, spotPrice: String? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.priority = priority
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case priority = "priority"
            case spotPrice = "spotPrice"
            case subnetId = "subnetId"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct LaunchTemplatePlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "HostResourceGroupArn", location: .body(locationName: "hostResourceGroupArn"), required: false, type: .string), 
            AWSShapeMember(label: "PartitionNumber", location: .body(locationName: "partitionNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "SpreadDomain", location: .body(locationName: "spreadDomain"), required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]

        /// The affinity setting for the instance on the Dedicated Host.
        public let affinity: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. 
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. 
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "hostResourceGroupArn"
            case partitionNumber = "partitionNumber"
            case spreadDomain = "spreadDomain"
            case tenancy = "tenancy"
        }
    }

    public struct LaunchTemplatePlacementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "HostId", required: false, type: .string), 
            AWSShapeMember(label: "HostResourceGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "PartitionNumber", required: false, type: .integer), 
            AWSShapeMember(label: "SpreadDomain", required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", required: false, type: .enum)
        ]

        /// The affinity setting for an instance on a Dedicated Host.
        public let affinity: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "Affinity"
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
            case hostId = "HostId"
            case hostResourceGroupArn = "HostResourceGroupArn"
            case partitionNumber = "PartitionNumber"
            case spreadDomain = "SpreadDomain"
            case tenancy = "Tenancy"
        }
    }

    public struct LaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]

        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template. Default: The default version for the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct LaunchTemplateSpotMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", location: .body(locationName: "maxPrice"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceType", location: .body(locationName: "spotInstanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp)
        ]

        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
        public let validUntil: TimeStamp?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: TimeStamp? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "blockDurationMinutes"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case maxPrice = "maxPrice"
            case spotInstanceType = "spotInstanceType"
            case validUntil = "validUntil"
        }
    }

    public struct LaunchTemplateSpotMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp)
        ]

        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: TimeStamp? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct LaunchTemplateTagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The type of resource.
        public let resourceType: ResourceType?
        /// The tags for the resource.
        public let tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateTagSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The type of resource to tag. Currently, the resource types that support tagging on creation are instance and volume. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        public let tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tags = "Tag"
        }
    }

    public struct LaunchTemplateVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedBy", location: .body(locationName: "createdBy"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultVersion", location: .body(locationName: "defaultVersion"), required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateData", location: .body(locationName: "launchTemplateData"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "VersionDescription", location: .body(locationName: "versionDescription"), required: false, type: .string), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long)
        ]

        /// The principal that created the version.
        public let createdBy: String?
        /// The time the version was created.
        public let createTime: TimeStamp?
        /// Indicates whether the version is the default version.
        public let defaultVersion: Bool?
        /// Information about the launch template.
        public let launchTemplateData: ResponseLaunchTemplateData?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The description for the version.
        public let versionDescription: String?
        /// The version number.
        public let versionNumber: Int64?

        public init(createdBy: String? = nil, createTime: TimeStamp? = nil, defaultVersion: Bool? = nil, launchTemplateData: ResponseLaunchTemplateData? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionDescription: String? = nil, versionNumber: Int64? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersion = defaultVersion
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionDescription = versionDescription
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "createdBy"
            case createTime = "createTime"
            case defaultVersion = "defaultVersion"
            case launchTemplateData = "launchTemplateData"
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case versionDescription = "versionDescription"
            case versionNumber = "versionNumber"
        }
    }

    public struct LaunchTemplatesMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: false, type: .boolean)
        ]

        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct LaunchTemplatesMonitoringRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LicenseConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", location: .body(locationName: "licenseConfigurationArn"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct LicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct LoadBalancersConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLoadBalancersConfig", location: .body(locationName: "classicLoadBalancersConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetGroupsConfig", location: .body(locationName: "targetGroupsConfig"), required: false, type: .structure)
        ]

        /// The Classic Load Balancers.
        public let classicLoadBalancersConfig: ClassicLoadBalancersConfig?
        /// The target groups.
        public let targetGroupsConfig: TargetGroupsConfig?

        public init(classicLoadBalancersConfig: ClassicLoadBalancersConfig? = nil, targetGroupsConfig: TargetGroupsConfig? = nil) {
            self.classicLoadBalancersConfig = classicLoadBalancersConfig
            self.targetGroupsConfig = targetGroupsConfig
        }

        public func validate(name: String) throws {
            try self.classicLoadBalancersConfig?.validate(name: "\(name).classicLoadBalancersConfig")
            try self.targetGroupsConfig?.validate(name: "\(name).targetGroupsConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancersConfig = "classicLoadBalancersConfig"
            case targetGroupsConfig = "targetGroupsConfig"
        }
    }

    public struct LoadPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]

        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct LoadPermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Remove", required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The load permissions to add.
        public let add: [LoadPermissionRequest]?
        /// The load permissions to remove.
        public let remove: [LoadPermissionRequest]?

        public init(add: [LoadPermissionRequest]? = nil, remove: [LoadPermissionRequest]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LoadPermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .enum), 
            AWSShapeMember(label: "UserId", required: false, type: .string)
        ]

        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
            case userId = "UserId"
        }
    }

    public struct LocalGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the AWS account ID that owns the local gateway.
        public let ownerId: String?
        /// The state of the local gateway.
        public let state: String?
        /// The tags assigned to the local gateway.
        public let tags: [Tag]?

        public init(localGatewayId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroupId", location: .body(locationName: "localGatewayVirtualInterfaceGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The state of the route.
        public let state: LocalGatewayRouteState?
        /// The route type.
        public let `type`: LocalGatewayRouteType?

        public init(destinationCidrBlock: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, state: LocalGatewayRouteState? = nil, type: LocalGatewayRouteType? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.state = state
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case state = "state"
            case `type` = "type"
        }
    }

    public struct LocalGatewayRouteTable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The state of the local gateway route table.
        public let state: String?
        /// The tags assigned to the local gateway route table.
        public let tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableId: String? = nil, outpostArn: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.outpostArn = outpostArn
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case outpostArn = "outpostArn"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVirtualInterfaceGroupAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId", location: .body(locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroupId", location: .body(locationName: "localGatewayVirtualInterfaceGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociationId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        public let tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationId = localGatewayRouteTableVirtualInterfaceGroupAssociationId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationId = "localGatewayRouteTableVirtualInterfaceGroupAssociationId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVpcAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", location: .body(locationName: "localGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayRouteTableVpcAssociationId", location: .body(locationName: "localGatewayRouteTableVpcAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        public let tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(localGatewayId: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVpcAssociationId: String? = nil, state: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayRouteTableVpcAssociationId = "localGatewayRouteTableVpcAssociationId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct LocalGatewayVirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalAddress", location: .body(locationName: "localAddress"), required: false, type: .string), 
            AWSShapeMember(label: "LocalBgpAsn", location: .body(locationName: "localBgpAsn"), required: false, type: .integer), 
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceId", location: .body(locationName: "localGatewayVirtualInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PeerAddress", location: .body(locationName: "peerAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PeerBgpAsn", location: .body(locationName: "peerBgpAsn"), required: false, type: .integer), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Vlan", location: .body(locationName: "vlan"), required: false, type: .integer)
        ]

        /// The local address.
        public let localAddress: String?
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.
        public let localBgpAsn: Int?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface.
        public let localGatewayVirtualInterfaceId: String?
        /// The peer address.
        public let peerAddress: String?
        /// The peer BGP ASN.
        public let peerBgpAsn: Int?
        /// The tags assigned to the virtual interface.
        public let tags: [Tag]?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(localAddress: String? = nil, localBgpAsn: Int? = nil, localGatewayId: String? = nil, localGatewayVirtualInterfaceId: String? = nil, peerAddress: String? = nil, peerBgpAsn: Int? = nil, tags: [Tag]? = nil, vlan: Int? = nil) {
            self.localAddress = localAddress
            self.localBgpAsn = localBgpAsn
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceId = localGatewayVirtualInterfaceId
            self.peerAddress = peerAddress
            self.peerBgpAsn = peerBgpAsn
            self.tags = tags
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case localAddress = "localAddress"
            case localBgpAsn = "localBgpAsn"
            case localGatewayId = "localGatewayId"
            case localGatewayVirtualInterfaceId = "localGatewayVirtualInterfaceId"
            case peerAddress = "peerAddress"
            case peerBgpAsn = "peerBgpAsn"
            case tags = "tagSet"
            case vlan = "vlan"
        }
    }

    public struct LocalGatewayVirtualInterfaceGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceGroupId", location: .body(locationName: "localGatewayVirtualInterfaceGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayVirtualInterfaceIds", location: .body(locationName: "localGatewayVirtualInterfaceIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The IDs of the virtual interfaces.
        public let localGatewayVirtualInterfaceIds: [String]?
        /// The tags assigned to the virtual interface group.
        public let tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case localGatewayVirtualInterfaceIds = "localGatewayVirtualInterfaceIdSet"
            case tags = "tagSet"
        }
    }

    public struct ManagedPrefixList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressFamily", location: .body(locationName: "addressFamily"), required: false, type: .string), 
            AWSShapeMember(label: "MaxEntries", location: .body(locationName: "maxEntries"), required: false, type: .integer), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListArn", location: .body(locationName: "prefixListArn"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListName", location: .body(locationName: "prefixListName"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StateMessage", location: .body(locationName: "stateMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .long)
        ]

        /// The IP address version.
        public let addressFamily: String?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int?
        /// The ID of the owner of the prefix list.
        public let ownerId: String?
        /// The Amazon Resource Name (ARN) for the prefix list.
        public let prefixListArn: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The name of the prefix list.
        public let prefixListName: String?
        /// The state of the prefix list.
        public let state: PrefixListState?
        /// The state message.
        public let stateMessage: String?
        /// The tags for the prefix list.
        public let tags: [Tag]?
        /// The version of the prefix list.
        public let version: Int64?

        public init(addressFamily: String? = nil, maxEntries: Int? = nil, ownerId: String? = nil, prefixListArn: String? = nil, prefixListId: String? = nil, prefixListName: String? = nil, state: PrefixListState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, version: Int64? = nil) {
            self.addressFamily = addressFamily
            self.maxEntries = maxEntries
            self.ownerId = ownerId
            self.prefixListArn = prefixListArn
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "addressFamily"
            case maxEntries = "maxEntries"
            case ownerId = "ownerId"
            case prefixListArn = "prefixListArn"
            case prefixListId = "prefixListId"
            case prefixListName = "prefixListName"
            case state = "state"
            case stateMessage = "stateMessage"
            case tags = "tagSet"
            case version = "version"
        }
    }

    public struct MemoryInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMiB", location: .body(locationName: "sizeInMiB"), required: false, type: .long)
        ]

        /// Size of the memory, in MiB.
        public let sizeInMiB: Int64?

        public init(sizeInMiB: Int64? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct ModifyAvailabilityZoneGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "OptInStatus", required: true, type: .enum)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.
        public let groupName: String
        /// Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is opted-in. You must contact AWS Support to opt out of a Local Zone group, or Wavelength Zone group.
        public let optInStatus: ModifyAvailabilityZoneOptInStatus

        public init(dryRun: Bool? = nil, groupName: String, optInStatus: ModifyAvailabilityZoneOptInStatus) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupName = "GroupName"
            case optInStatus = "OptInStatus"
        }
    }

    public struct ModifyAvailabilityZoneGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndDateType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer)
        ]

        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited.
        public let endDate: TimeStamp?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate value if EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if EndDateType is limited.  
        public let endDateType: EndDateType?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int?

        public init(capacityReservationId: String, dryRun: Bool? = nil, endDate: TimeStamp? = nil, endDateType: EndDateType? = nil, instanceCount: Int? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.endDate = endDate
            self.endDateType = endDateType
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case instanceCount = "InstanceCount"
        }
    }

    public struct ModifyCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyClientVpnEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "ConnectionLogOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DnsServers", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServerCertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "SplitTunnel", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "VpnPort", required: false, type: .integer)
        ]

        /// The ID of the Client VPN endpoint to modify.
        public let clientVpnEndpointId: String
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time  
        public let connectionLogOptions: ConnectionLogOptions?
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.
        public let dnsServers: DnsServersOptionsModifyStructure?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network.
        public let securityGroupIds: [String]?
        /// The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).
        public let serverCertificateArn: String?
        /// Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The ID of the VPC to associate with the Client VPN endpoint.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443 
        public let vpnPort: Int?

        public init(clientVpnEndpointId: String, connectionLogOptions: ConnectionLogOptions? = nil, description: String? = nil, dnsServers: DnsServersOptionsModifyStructure? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, serverCertificateArn: String? = nil, splitTunnel: Bool? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case serverCertificateArn = "ServerCertificateArn"
            case splitTunnel = "SplitTunnel"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct ModifyClientVpnEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyDefaultCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceFamily", required: true, type: .enum)
        ]

        /// The credit option for CPU usage of the instance family. Valid Values: standard | unlimited 
        public let cpuCredits: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily

        public init(cpuCredits: String, dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily) {
            self.cpuCredits = cpuCredits
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct ModifyDefaultCreditSpecificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceFamilyCreditSpecification", location: .body(locationName: "instanceFamilyCreditSpecification"), required: false, type: .structure)
        ]

        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification = "instanceFamilyCreditSpecification"
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String

        public init(dryRun: Bool? = nil, kmsKeyId: String) {
            self.dryRun = dryRun
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct ModifyFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "LaunchTemplateConfig"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetCapacitySpecification", required: true, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The launch template and overrides.
        public let launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]?
        /// The size of the EC2 Fleet.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest

        public init(dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest) {
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.launchTemplateConfigs = launchTemplateConfigs
            self.targetCapacitySpecification = targetCapacitySpecification
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try validate(self.launchTemplateConfigs, name:"launchTemplateConfigs", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case fleetId = "FleetId"
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case targetCapacitySpecification = "TargetCapacitySpecification"
        }
    }

    public struct ModifyFleetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "LoadPermission", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "ProductCode"), required: false, type: .list, encoding: .list(member:"ProductCode")), 
            AWSShapeMember(label: "UserGroups", location: .body(locationName: "UserGroup"), required: false, type: .list, encoding: .list(member:"UserGroup")), 
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .list, encoding: .list(member:"UserId"))
        ]

        /// The name of the attribute.
        public let attribute: FpgaImageAttributeName?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// The load permission for the AFI.
        public let loadPermission: LoadPermissionModifications?
        /// A name for the AFI.
        public let name: String?
        /// The operation type.
        public let operationType: OperationType?
        /// The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the productCodes attribute.
        public let productCodes: [String]?
        /// The user groups. This parameter is valid only when modifying the loadPermission attribute.
        public let userGroups: [String]?
        /// The AWS account IDs. This parameter is valid only when modifying the loadPermission attribute.
        public let userIds: [String]?

        public init(attribute: FpgaImageAttributeName? = nil, description: String? = nil, dryRun: Bool? = nil, fpgaImageId: String, loadPermission: LoadPermissionModifications? = nil, name: String? = nil, operationType: OperationType? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
            self.loadPermission = loadPermission
            self.name = name
            self.operationType = operationType
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
            case loadPermission = "LoadPermission"
            case name = "Name"
            case operationType = "OperationType"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
        }
    }

    public struct ModifyFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageAttribute", location: .body(locationName: "fpgaImageAttribute"), required: false, type: .structure)
        ]

        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct ModifyHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HostRecovery", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFamily", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string)
        ]

        /// Specify whether to enable or disable auto-placement.
        public let autoPlacement: AutoPlacement?
        /// The IDs of the Dedicated Hosts to modify.
        public let hostIds: [String]
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see  Host Recovery in the Amazon Elastic Compute Cloud User Guide.
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family. If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type. If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?

        public init(autoPlacement: AutoPlacement? = nil, hostIds: [String], hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil) {
            self.autoPlacement = autoPlacement
            self.hostIds = hostIds
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement = "autoPlacement"
            case hostIds = "hostId"
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType = "InstanceType"
        }
    }

    public struct ModifyHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The IDs of the Dedicated Hosts that were successfully modified.
        public let successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct ModifyIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: true, type: .string), 
            AWSShapeMember(label: "UseLongIds", required: true, type: .boolean)
        ]

        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String
        /// Indicate whether the resource should use longer IDs (17-character IDs).
        public let useLongIds: Bool

        public init(resource: String, useLongIds: Bool) {
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case useLongIds = "UseLongIds"
        }
    }

    public struct ModifyIdentityIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .string), 
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: true, type: .boolean)
        ]

        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String
        /// Indicates whether the resource should use longer IDs (17-character IDs)
        public let useLongIds: Bool

        public init(principalArn: String, resource: String, useLongIds: Bool) {
            self.principalArn = principalArn
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct ModifyImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "LaunchPermission", required: false, type: .structure), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "ProductCode"), required: false, type: .list, encoding: .list(member:"ProductCode")), 
            AWSShapeMember(label: "UserGroups", location: .body(locationName: "UserGroup"), required: false, type: .list, encoding: .list(member:"UserGroup")), 
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .list, encoding: .list(member:"UserId")), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The name of the attribute to modify. The valid values are description, launchPermission, and productCodes.
        public let attribute: String?
        /// A new description for the AMI.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String
        /// A new launch permission for the AMI.
        public let launchPermission: LaunchPermissionModifications?
        /// The operation type. This parameter can be used only when the Attribute parameter is launchPermission.
        public let operationType: OperationType?
        /// The DevPay product codes. After you add a product code to an AMI, it can't be removed.
        public let productCodes: [String]?
        /// The user groups. This parameter can be used only when the Attribute parameter is launchPermission.
        public let userGroups: [String]?
        /// The AWS account IDs. This parameter can be used only when the Attribute parameter is launchPermission.
        public let userIds: [String]?
        /// The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or productCodes.
        public let value: String?

        public init(attribute: String? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, imageId: String, launchPermission: LaunchPermissionModifications? = nil, operationType: OperationType? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil, value: String? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.imageId = imageId
            self.launchPermission = launchPermission
            self.operationType = operationType
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun = "dryRun"
            case imageId = "ImageId"
            case launchPermission = "LaunchPermission"
            case operationType = "OperationType"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
            case value = "Value"
        }
    }

    public struct ModifyInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "GroupId"), required: false, type: .list, encoding: .list(member:"groupId")), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "Kernel", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "Ramdisk", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The name of the attribute.
        public let attribute: InstanceAttributeName?
        /// Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the block device mapping when launching an instance in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]?
        /// If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
        public let disableApiTermination: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: AttributeBooleanValue?
        /// Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let enaSupport: AttributeBooleanValue?
        /// [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
        public let groups: [String]?
        /// The ID of the instance.
        public let instanceId: String
        /// Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// Changes the instance type to the specified value. For more information, see Instance types. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
        public let instanceType: AttributeValue?
        /// Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let kernel: AttributeValue?
        /// Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let ramdisk: AttributeValue?
        /// Specifies whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let sriovNetSupport: AttributeValue?
        /// Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
        public let userData: BlobAttributeValue?
        /// A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
        public let value: String?

        public init(attribute: InstanceAttributeName? = nil, blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]? = nil, disableApiTermination: AttributeBooleanValue? = nil, dryRun: Bool? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, groups: [String]? = nil, instanceId: String, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernel: AttributeValue? = nil, ramdisk: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: BlobAttributeValue? = nil, value: String? = nil) {
            self.attribute = attribute
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernel = kernel
            self.ramdisk = ramdisk
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiTermination = "disableApiTermination"
            case dryRun = "dryRun"
            case ebsOptimized = "ebsOptimized"
            case enaSupport = "enaSupport"
            case groups = "GroupId"
            case instanceId = "instanceId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case kernel = "kernel"
            case ramdisk = "ramdisk"
            case sourceDestCheck = "SourceDestCheck"
            case sriovNetSupport = "sriovNetSupport"
            case userData = "userData"
            case value = "value"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecification
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to be modified.
        public let instanceId: String

        public init(capacityReservationSpecification: CapacityReservationSpecification, dryRun: Bool? = nil, instanceId: String) {
            self.capacityReservationSpecification = capacityReservationSpecification
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyInstanceCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCreditSpecifications", location: .body(locationName: "InstanceCreditSpecification"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the credit option for CPU usage.
        public let instanceCreditSpecifications: [InstanceCreditSpecificationRequest]

        public init(clientToken: String? = nil, dryRun: Bool? = nil, instanceCreditSpecifications: [InstanceCreditSpecificationRequest]) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCreditSpecifications = instanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCreditSpecifications = "InstanceCreditSpecification"
        }
    }

    public struct ModifyInstanceCreditSpecificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulInstanceCreditSpecifications", location: .body(locationName: "successfulInstanceCreditSpecificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UnsuccessfulInstanceCreditSpecifications", location: .body(locationName: "unsuccessfulInstanceCreditSpecificationSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the instances whose credit option for CPU usage was successfully modified.
        public let successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]?
        /// Information about the instances whose credit option for CPU usage was not modified.
        public let unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]?

        public init(successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]? = nil, unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]? = nil) {
            self.successfulInstanceCreditSpecifications = successfulInstanceCreditSpecifications
            self.unsuccessfulInstanceCreditSpecifications = unsuccessfulInstanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case successfulInstanceCreditSpecifications = "successfulInstanceCreditSpecificationSet"
            case unsuccessfulInstanceCreditSpecifications = "unsuccessfulInstanceCreditSpecificationSet"
        }
    }

    public struct ModifyInstanceEventStartTimeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceEventId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "NotBefore", required: true, type: .timestamp)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event whose date and time you are modifying.
        public let instanceEventId: String
        /// The ID of the instance with the scheduled event.
        public let instanceId: String
        /// The new date and time when the event will take place.
        public let notBefore: TimeStamp

        public init(dryRun: Bool? = nil, instanceEventId: String, instanceId: String, notBefore: TimeStamp) {
            self.dryRun = dryRun
            self.instanceEventId = instanceEventId
            self.instanceId = instanceId
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceEventId = "InstanceEventId"
            case instanceId = "InstanceId"
            case notBefore = "NotBefore"
        }
    }

    public struct ModifyInstanceEventStartTimeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", location: .body(locationName: "event"), required: false, type: .structure)
        ]

        public let event: InstanceStatusEvent?

        public init(event: InstanceStatusEvent? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "event"
        }
    }

    public struct ModifyInstanceMetadataOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "HttpEndpoint", required: false, type: .enum), 
            AWSShapeMember(label: "HttpPutResponseHopLimit", required: false, type: .integer), 
            AWSShapeMember(label: "HttpTokens", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained.  If you specify a value of disabled, you will not be able to access your instance metadata. 
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceMetadataOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceMetadataOptions", location: .body(locationName: "instanceMetadataOptions"), required: false, type: .structure)
        ]

        /// The ID of the instance.
        public let instanceId: String?
        /// The metadata options for the instance.
        public let instanceMetadataOptions: InstanceMetadataOptionsResponse?

        public init(instanceId: String? = nil, instanceMetadataOptions: InstanceMetadataOptionsResponse? = nil) {
            self.instanceId = instanceId
            self.instanceMetadataOptions = instanceMetadataOptions
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case instanceMetadataOptions = "instanceMetadataOptions"
        }
    }

    public struct ModifyInstancePlacementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "HostResourceGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "PartitionNumber", required: false, type: .integer), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]

        /// The affinity setting for the instance.
        public let affinity: Affinity?
        /// The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
        public let groupName: String?
        /// The ID of the Dedicated Host with which to associate the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to place the instance.
        public let hostResourceGroupArn: String?
        /// The ID of the instance that you are modifying.
        public let instanceId: String
        /// Reserved for future use.
        public let partitionNumber: Int?
        /// The tenancy for the instance.
        public let tenancy: HostTenancy?

        public init(affinity: Affinity? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, instanceId: String, partitionNumber: Int? = nil, tenancy: HostTenancy? = nil) {
            self.affinity = affinity
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.instanceId = instanceId
            self.partitionNumber = partitionNumber
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case groupName = "GroupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "HostResourceGroupArn"
            case instanceId = "instanceId"
            case partitionNumber = "PartitionNumber"
            case tenancy = "tenancy"
        }
    }

    public struct ModifyInstancePlacementResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", location: .body(locationName: "SetDefaultVersion"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string)
        ]

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// The version number of the launch template to set as the default version.
        public let defaultVersion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?

        public init(clientToken: String? = nil, defaultVersion: String? = nil, dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.clientToken = clientToken
            self.defaultVersion = defaultVersion
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, max: 128)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, min: 3)
            try validate(self.launchTemplateName, name:"launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case defaultVersion = "SetDefaultVersion"
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct ModifyLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure)
        ]

        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct ModifyManagedPrefixListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddEntries", location: .body(locationName: "AddEntry"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "CurrentVersion", required: false, type: .long), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "PrefixListName", required: false, type: .string), 
            AWSShapeMember(label: "RemoveEntries", location: .body(locationName: "RemoveEntry"), required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// One or more entries to add to the prefix list.
        public let addEntries: [AddPrefixListEntry]?
        /// The current version of the prefix list.
        public let currentVersion: Int64?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// A name for the prefix list.
        public let prefixListName: String?
        /// One or more entries to remove from the prefix list.
        public let removeEntries: [RemovePrefixListEntry]?

        public init(addEntries: [AddPrefixListEntry]? = nil, currentVersion: Int64? = nil, dryRun: Bool? = nil, prefixListId: String, prefixListName: String? = nil, removeEntries: [RemovePrefixListEntry]? = nil) {
            self.addEntries = addEntries
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.removeEntries = removeEntries
        }

        public func validate(name: String) throws {
            try validate(self.addEntries, name:"addEntries", parent: name, max: 1000)
            try validate(self.addEntries, name:"addEntries", parent: name, min: 0)
            try validate(self.removeEntries, name:"removeEntries", parent: name, max: 1000)
            try validate(self.removeEntries, name:"removeEntries", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addEntries = "AddEntry"
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case prefixListName = "PrefixListName"
            case removeEntries = "RemoveEntry"
        }
    }

    public struct ModifyManagedPrefixListResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixList", location: .body(locationName: "prefixList"), required: false, type: .structure)
        ]

        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct ModifyNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure)
        ]

        /// Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.
        public let attachment: NetworkInterfaceAttachmentChanges?
        /// A description for the network interface.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
        public let groups: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachmentChanges? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, groups: [String]? = nil, networkInterfaceId: String, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.description = description
            self.dryRun = dryRun
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment = "attachment"
            case description = "description"
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ModifyReservedInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: true, type: .list, encoding: .list(member:"ReservedInstancesId")), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "ReservedInstancesConfigurationSetItemType"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The IDs of the Reserved Instances to modify.
        public let reservedInstancesIds: [String]
        /// The configuration settings for the Reserved Instances to modify.
        public let targetConfigurations: [ReservedInstancesConfiguration]

        public init(clientToken: String? = nil, reservedInstancesIds: [String], targetConfigurations: [ReservedInstancesConfiguration]) {
            self.clientToken = clientToken
            self.reservedInstancesIds = reservedInstancesIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case reservedInstancesIds = "ReservedInstancesId"
            case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
        }
    }

    public struct ModifyReservedInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string)
        ]

        /// The ID for the modification.
        public let reservedInstancesModificationId: String?

        public init(reservedInstancesModificationId: String? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "reservedInstancesModificationId"
        }
    }

    public struct ModifySnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "CreateVolumePermission", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "UserGroup"), required: false, type: .list, encoding: .list(member:"GroupName")), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .list, encoding: .list(member:"UserId"))
        ]

        /// The snapshot attribute to modify. Only volume creation permissions can be modified.
        public let attribute: SnapshotAttributeName?
        /// A JSON representation of the snapshot attribute modification.
        public let createVolumePermission: CreateVolumePermissionModifications?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The group to modify for the snapshot.
        public let groupNames: [String]?
        /// The type of operation to perform to the attribute.
        public let operationType: OperationType?
        /// The ID of the snapshot.
        public let snapshotId: String
        /// The account ID to modify for the snapshot.
        public let userIds: [String]?

        public init(attribute: SnapshotAttributeName? = nil, createVolumePermission: CreateVolumePermissionModifications? = nil, dryRun: Bool? = nil, groupNames: [String]? = nil, operationType: OperationType? = nil, snapshotId: String, userIds: [String]? = nil) {
            self.attribute = attribute
            self.createVolumePermission = createVolumePermission
            self.dryRun = dryRun
            self.groupNames = groupNames
            self.operationType = operationType
            self.snapshotId = snapshotId
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case createVolumePermission = "CreateVolumePermission"
            case dryRun = "dryRun"
            case groupNames = "UserGroup"
            case operationType = "OperationType"
            case snapshotId = "SnapshotId"
            case userIds = "UserId"
        }
    }

    public struct ModifySpotFleetRequestRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "LaunchTemplateConfig"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OnDemandTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: false, type: .integer)
        ]

        /// Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The launch template and overrides. You can only use this parameter if you specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request. If you specified LaunchSpecifications in your Spot Fleet request, then omit this parameter.
        public let launchTemplateConfigs: [LaunchTemplateConfig]?
        /// The number of On-Demand Instances in the fleet.
        public let onDemandTargetCapacity: Int?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The size of the fleet.
        public let targetCapacity: Int?

        public init(excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, onDemandTargetCapacity: Int? = nil, spotFleetRequestId: String, targetCapacity: Int? = nil) {
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotFleetRequestId = spotFleetRequestId
            self.targetCapacity = targetCapacity
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotFleetRequestId = "spotFleetRequestId"
            case targetCapacity = "targetCapacity"
        }
    }

    public struct ModifySpotFleetRequestResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifySubnetAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", required: false, type: .structure), 
            AWSShapeMember(label: "CustomerOwnedIpv4Pool", required: false, type: .string), 
            AWSShapeMember(label: "MapCustomerOwnedIpOnLaunch", required: false, type: .structure), 
            AWSShapeMember(label: "MapPublicIpOnLaunch", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]

        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
        public let assignIpv6AddressOnCreation: AttributeBooleanValue?
        /// The customer-owned IPv4 address pool associated with the subnet. You must set this value when you specify true for MapCustomerOwnedIpOnLaunch.
        public let customerOwnedIpv4Pool: String?
        /// Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address. When this value is true, you must specify the customer-owned IP pool using CustomerOwnedIpv4Pool.
        public let mapCustomerOwnedIpOnLaunch: AttributeBooleanValue?
        /// Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
        public let mapPublicIpOnLaunch: AttributeBooleanValue?
        /// The ID of the subnet.
        public let subnetId: String

        public init(assignIpv6AddressOnCreation: AttributeBooleanValue? = nil, customerOwnedIpv4Pool: String? = nil, mapCustomerOwnedIpOnLaunch: AttributeBooleanValue? = nil, mapPublicIpOnLaunch: AttributeBooleanValue? = nil, subnetId: String) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case mapCustomerOwnedIpOnLaunch = "MapCustomerOwnedIpOnLaunch"
            case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
            case subnetId = "subnetId"
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddNetworkServices", location: .body(locationName: "AddNetworkService"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveNetworkServices", location: .body(locationName: "RemoveNetworkService"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficMirrorFilterId", required: true, type: .string)
        ]

        /// The network service, for example Amazon DNS, that you want to mirror.
        public let addNetworkServices: [TrafficMirrorNetworkService]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The network service, for example Amazon DNS, that you no longer want to mirror.
        public let removeNetworkServices: [TrafficMirrorNetworkService]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String

        public init(addNetworkServices: [TrafficMirrorNetworkService]? = nil, dryRun: Bool? = nil, removeNetworkServices: [TrafficMirrorNetworkService]? = nil, trafficMirrorFilterId: String) {
            self.addNetworkServices = addNetworkServices
            self.dryRun = dryRun
            self.removeNetworkServices = removeNetworkServices
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case addNetworkServices = "AddNetworkService"
            case dryRun = "DryRun"
            case removeNetworkServices = "RemoveNetworkService"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorFilter", location: .body(locationName: "trafficMirrorFilter"), required: false, type: .structure)
        ]

        /// The Traffic Mirror filter that the network service is associated with.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilter = "trafficMirrorFilter"
        }
    }

    public struct ModifyTrafficMirrorFilterRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPortRange", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Protocol", required: false, type: .integer), 
            AWSShapeMember(label: "RemoveFields", location: .body(locationName: "RemoveField"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "RuleAction", required: false, type: .enum), 
            AWSShapeMember(label: "RuleNumber", required: false, type: .integer), 
            AWSShapeMember(label: "SourceCidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "SourcePortRange", required: false, type: .structure), 
            AWSShapeMember(label: "TrafficDirection", required: false, type: .enum), 
            AWSShapeMember(label: "TrafficMirrorFilterRuleId", required: true, type: .string)
        ]

        /// The description to assign to the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination ports that are associated with the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example TCP, to assign to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The properties that you want to remove from the Traffic Mirror filter rule. When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
        public let removeFields: [TrafficMirrorFilterRuleField]?
        /// The action to assign to the rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int?
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The port range to assign to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic (ingress | egress) to assign to the rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, removeFields: [TrafficMirrorFilterRuleField]? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterRuleId: String) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.removeFields = removeFields
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case removeFields = "RemoveField"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct ModifyTrafficMirrorFilterRuleResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorFilterRule", location: .body(locationName: "trafficMirrorFilterRule"), required: false, type: .structure)
        ]

        /// Modifies a Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRule = "trafficMirrorFilterRule"
        }
    }

    public struct ModifyTrafficMirrorSessionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PacketLength", required: false, type: .integer), 
            AWSShapeMember(label: "RemoveFields", location: .body(locationName: "RemoveField"), required: false, type: .list, encoding: .list(member:"member")), 
            AWSShapeMember(label: "SessionNumber", required: false, type: .integer), 
            AWSShapeMember(label: "TrafficMirrorFilterId", required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorSessionId", required: true, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTargetId", required: false, type: .string), 
            AWSShapeMember(label: "VirtualNetworkId", required: false, type: .integer)
        ]

        /// The description to assign to the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
        public let packetLength: Int?
        /// The properties that you want to remove from the Traffic Mirror session. When you remove a property from a Traffic Mirror session, the property is set to the default.
        public let removeFields: [TrafficMirrorSessionField]?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String
        /// The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID of the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, dryRun: Bool? = nil, packetLength: Int? = nil, removeFields: [TrafficMirrorSessionField]? = nil, sessionNumber: Int? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.packetLength = packetLength
            self.removeFields = removeFields
            self.sessionNumber = sessionNumber
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case packetLength = "PacketLength"
            case removeFields = "RemoveField"
            case sessionNumber = "SessionNumber"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct ModifyTrafficMirrorSessionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficMirrorSession", location: .body(locationName: "trafficMirrorSession"), required: false, type: .structure)
        ]

        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSession = "trafficMirrorSession"
        }
    }

    public struct ModifyTransitGatewayOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationDefaultRouteTableId", required: false, type: .string), 
            AWSShapeMember(label: "AutoAcceptSharedAttachments", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTableAssociation", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTablePropagation", required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum), 
            AWSShapeMember(label: "PropagationDefaultRouteTableId", required: false, type: .string), 
            AWSShapeMember(label: "VpnEcmpSupport", required: false, type: .enum)
        ]

        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Enable or disable automatic acceptance of attachment requests.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support.
        public let dnsSupport: DnsSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// Enable or disable Equal Cost Multipath Protocol support.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case associationDefaultRouteTableId = "AssociationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case propagationDefaultRouteTableId = "PropagationDefaultRouteTableId"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPrefixListReference", location: .body(locationName: "transitGatewayPrefixListReference"), required: false, type: .structure)
        ]

        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct ModifyTransitGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string)
        ]

        /// The description for the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options to modify.
        public let options: ModifyTransitGatewayOptions?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(description: String? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayOptions? = nil, transitGatewayId: String) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct ModifyTransitGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateway", location: .body(locationName: "transitGateway"), required: false, type: .structure)
        ]

        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddSubnetIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveSubnetIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
        public let addSubnetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The new VPC attachment options.  You cannot modify the IPv6 options. 
        public let options: ModifyTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets to remove.
        public let removeSubnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(addSubnetIds: [String]? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayVpcAttachmentRequestOptions? = nil, removeSubnetIds: [String]? = nil, transitGatewayAttachmentId: String) {
            self.addSubnetIds = addSubnetIds
            self.dryRun = dryRun
            self.options = options
            self.removeSubnetIds = removeSubnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case addSubnetIds = "AddSubnetIds"
            case dryRun = "DryRun"
            case options = "Options"
            case removeSubnetIds = "RemoveSubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6Support", required: false, type: .enum)
        ]

        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?

        public init(dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]

        /// Information about the modified attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct ModifyVolumeAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoEnableIO", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]

        /// Indicates whether the volume should be auto-enabled for I/O operations.
        public let autoEnableIO: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(autoEnableIO: AttributeBooleanValue? = nil, dryRun: Bool? = nil, volumeId: String) {
            self.autoEnableIO = autoEnableIO
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO = "AutoEnableIO"
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct ModifyVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The target IOPS rate of the volume. This is only valid for Provisioned IOPS SSD (io1 and io2) volumes. For moreinformation, see  Provisioned IOPS SSD (io1 and io2) volumes. Default: If no IOPS value is specified, the existing value is retained.
        public let iops: Int?
        /// The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see Amazon EBS Volume Types. Default: If no size is specified, the existing size is retained.
        public let size: Int?
        /// The ID of the volume.
        public let volumeId: String
        /// The target EBS volume type of the volume. Default: If no type is specified, the existing type is retained.
        public let volumeType: VolumeType?

        public init(dryRun: Bool? = nil, iops: Int? = nil, size: Int? = nil, volumeId: String, volumeType: VolumeType? = nil) {
            self.dryRun = dryRun
            self.iops = iops
            self.size = size
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case iops = "Iops"
            case size = "Size"
            case volumeId = "VolumeId"
            case volumeType = "VolumeType"
        }
    }

    public struct ModifyVolumeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeModification", location: .body(locationName: "volumeModification"), required: false, type: .structure)
        ]

        /// Information about the volume modification.
        public let volumeModification: VolumeModification?

        public init(volumeModification: VolumeModification? = nil) {
            self.volumeModification = volumeModification
        }

        private enum CodingKeys: String, CodingKey {
            case volumeModification = "volumeModification"
        }
    }

    public struct ModifyVpcAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableDnsHostnames", required: false, type: .structure), 
            AWSShapeMember(label: "EnableDnsSupport", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string)
        ]

        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames = "EnableDnsHostnames"
            case enableDnsSupport = "EnableDnsSupport"
            case vpcId = "vpcId"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionEvents", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ConnectionNotificationArn", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// One or more events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: [String]?
        /// The ARN for the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String, dryRun: Bool? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddRouteTableIds", location: .body(locationName: "AddRouteTableId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AddSecurityGroupIds", location: .body(locationName: "AddSecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AddSubnetIds", location: .body(locationName: "AddSubnetId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveRouteTableIds", location: .body(locationName: "RemoveRouteTableId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RemoveSecurityGroupIds", location: .body(locationName: "RemoveSecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RemoveSubnetIds", location: .body(locationName: "RemoveSubnetId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ResetPolicy", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcEndpointId", required: true, type: .string)
        ]

        /// (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
        public let addRouteTableIds: [String]?
        /// (Interface endpoint) One or more security group IDs to associate with the network interface.
        public let addSecurityGroupIds: [String]?
        /// (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
        public let addSubnetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
        public let removeRouteTableIds: [String]?
        /// (Interface endpoint) One or more security group IDs to disassociate from the network interface.
        public let removeSecurityGroupIds: [String]?
        /// (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
        public let removeSubnetIds: [String]?
        /// (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
        public let resetPolicy: Bool?
        /// The ID of the endpoint.
        public let vpcEndpointId: String

        public init(addRouteTableIds: [String]? = nil, addSecurityGroupIds: [String]? = nil, addSubnetIds: [String]? = nil, dryRun: Bool? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, removeRouteTableIds: [String]? = nil, removeSecurityGroupIds: [String]? = nil, removeSubnetIds: [String]? = nil, resetPolicy: Bool? = nil, vpcEndpointId: String) {
            self.addRouteTableIds = addRouteTableIds
            self.addSecurityGroupIds = addSecurityGroupIds
            self.addSubnetIds = addSubnetIds
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.removeRouteTableIds = removeRouteTableIds
            self.removeSecurityGroupIds = removeSecurityGroupIds
            self.removeSubnetIds = removeSubnetIds
            self.resetPolicy = resetPolicy
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case addRouteTableIds = "AddRouteTableId"
            case addSecurityGroupIds = "AddSecurityGroupId"
            case addSubnetIds = "AddSubnetId"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case removeRouteTableIds = "RemoveRouteTableId"
            case removeSecurityGroupIds = "RemoveSecurityGroupId"
            case removeSubnetIds = "RemoveSubnetId"
            case resetPolicy = "ResetPolicy"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct ModifyVpcEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "AddNetworkLoadBalancerArns", location: .body(locationName: "AddNetworkLoadBalancerArn"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", required: false, type: .string), 
            AWSShapeMember(label: "RemoveNetworkLoadBalancerArns", location: .body(locationName: "RemoveNetworkLoadBalancerArn"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RemovePrivateDnsName", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]

        /// Indicates whether requests to create an endpoint to your service must be accepted.
        public let acceptanceRequired: Bool?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
        public let addNetworkLoadBalancerArns: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The private DNS name to assign to the endpoint service.
        public let privateDnsName: String?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
        public let removeNetworkLoadBalancerArns: [String]?
        /// Removes the private DNS name of the endpoint service.
        public let removePrivateDnsName: Bool?
        /// The ID of the service.
        public let serviceId: String

        public init(acceptanceRequired: Bool? = nil, addNetworkLoadBalancerArns: [String]? = nil, dryRun: Bool? = nil, privateDnsName: String? = nil, removeNetworkLoadBalancerArns: [String]? = nil, removePrivateDnsName: Bool? = nil, serviceId: String) {
            self.acceptanceRequired = acceptanceRequired
            self.addNetworkLoadBalancerArns = addNetworkLoadBalancerArns
            self.dryRun = dryRun
            self.privateDnsName = privateDnsName
            self.removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns
            self.removePrivateDnsName = removePrivateDnsName
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case addNetworkLoadBalancerArns = "AddNetworkLoadBalancerArn"
            case dryRun = "DryRun"
            case privateDnsName = "PrivateDnsName"
            case removeNetworkLoadBalancerArns = "RemoveNetworkLoadBalancerArn"
            case removePrivateDnsName = "RemovePrivateDnsName"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddAllowedPrincipals", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveAllowedPrincipals", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]

        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
        public let addAllowedPrincipals: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
        public let removeAllowedPrincipals: [String]?
        /// The ID of the service.
        public let serviceId: String

        public init(addAllowedPrincipals: [String]? = nil, dryRun: Bool? = nil, removeAllowedPrincipals: [String]? = nil, serviceId: String) {
            self.addAllowedPrincipals = addAllowedPrincipals
            self.dryRun = dryRun
            self.removeAllowedPrincipals = removeAllowedPrincipals
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrincipals = "AddAllowedPrincipals"
            case dryRun = "DryRun"
            case removeAllowedPrincipals = "RemoveAllowedPrincipals"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "VpcPeeringConnectionId", required: true, type: .string)
        ]

        /// The VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, dryRun: Bool? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, vpcPeeringConnectionId: String) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.dryRun = dryRun
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "AccepterPeeringConnectionOptions"
            case dryRun = "DryRun"
            case requesterPeeringConnectionOptions = "RequesterPeeringConnectionOptions"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", location: .body(locationName: "accepterPeeringConnectionOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", location: .body(locationName: "requesterPeeringConnectionOptions"), required: false, type: .structure)
        ]

        /// Information about the VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
        /// Information about the VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptions? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptions? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "accepterPeeringConnectionOptions"
            case requesterPeeringConnectionOptions = "requesterPeeringConnectionOptions"
        }
    }

    public struct ModifyVpcTenancyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTenancy", required: true, type: .enum), 
            AWSShapeMember(label: "VpcId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance tenancy attribute for the VPC. 
        public let instanceTenancy: VpcTenancy
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, instanceTenancy: VpcTenancy, vpcId: String) {
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTenancy = "InstanceTenancy"
            case vpcId = "VpcId"
        }
    }

    public struct ModifyVpcTenancyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpnConnectionOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalIpv4NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "LocalIpv6NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv4NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv6NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0 
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0 
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection. Default: 0.0.0.0/0 
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection. Default: ::/0 
        public let remoteIpv6NetworkCidr: String?
        /// The ID of the Site-to-Site VPN VPN connection. 
        public let vpnConnectionId: String

        public init(dryRun: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, vpnConnectionId: String) {
            self.dryRun = dryRun
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct ModifyVpnConnectionOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]

        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: false, type: .string)
        ]

        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String? = nil, dryRun: Bool? = nil, transitGatewayId: String? = nil, vpnConnectionId: String, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
            case vpnConnectionId = "VpnConnectionId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct ModifyVpnConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]

        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "VpnTunnelOutsideIpAddress", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AWS Site-to-Site VPN connection.
        public let vpnConnectionId: String
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String

        public init(dryRun: Bool? = nil, vpnConnectionId: String, vpnTunnelOutsideIpAddress: String) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelCertificateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]

        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TunnelOptions", required: true, type: .structure), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "VpnTunnelOutsideIpAddress", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tunnel options to modify.
        public let tunnelOptions: ModifyVpnTunnelOptionsSpecification
        /// The ID of the AWS Site-to-Site VPN connection.
        public let vpnConnectionId: String
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String

        public init(dryRun: Bool? = nil, tunnelOptions: ModifyVpnTunnelOptionsSpecification, vpnConnectionId: String, vpnTunnelOutsideIpAddress: String) {
            self.dryRun = dryRun
            self.tunnelOptions = tunnelOptions
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tunnelOptions = "TunnelOptions"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]

        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelOptionsSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DPDTimeoutAction", required: false, type: .string), 
            AWSShapeMember(label: "DPDTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "IKEVersions", location: .body(locationName: "IKEVersion"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1DHGroupNumbers", location: .body(locationName: "Phase1DHGroupNumber"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1EncryptionAlgorithms", location: .body(locationName: "Phase1EncryptionAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1IntegrityAlgorithms", location: .body(locationName: "Phase1IntegrityAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1LifetimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Phase2DHGroupNumbers", location: .body(locationName: "Phase2DHGroupNumber"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2EncryptionAlgorithms", location: .body(locationName: "Phase2EncryptionAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2IntegrityAlgorithms", location: .body(locationName: "Phase2IntegrityAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2LifetimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "PreSharedKey", required: false, type: .string), 
            AWSShapeMember(label: "RekeyFuzzPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "RekeyMarginTimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "ReplayWindowSize", required: false, type: .integer), 
            AWSShapeMember(label: "StartupAction", required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideCidr", required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideIpv6Cidr", required: false, type: .string)
        ]

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear 
        public let dPDTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: 30 
        public let dPDTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2 
        public let iKEVersions: [IKEVersionsRequestListValue]?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 
        public let phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16 
        public let phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512 
        public let phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800 
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 
        public let phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16 
        public let phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512 
        public let phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600 
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100 
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 540 
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024 
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid Values: add | start  Default: add 
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30   
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dPDTimeoutAction: String? = nil, dPDTimeoutSeconds: Int? = nil, iKEVersions: [IKEVersionsRequestListValue]? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dPDTimeoutAction = dPDTimeoutAction
            self.dPDTimeoutSeconds = dPDTimeoutSeconds
            self.iKEVersions = iKEVersions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dPDTimeoutAction = "DPDTimeoutAction"
            case dPDTimeoutSeconds = "DPDTimeoutSeconds"
            case iKEVersions = "IKEVersion"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct MonitorInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        public let instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct MonitorInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The monitoring information.
        public let instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct Monitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let state: MonitoringState?

        public init(state: MonitoringState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct MoveAddressToVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct MoveAddressToVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The allocation ID for the Elastic IP address.
        public let allocationId: String?
        /// The status of the move of the IP address.
        public let status: Status?

        public init(allocationId: String? = nil, status: Status? = nil) {
            self.allocationId = allocationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case status = "status"
        }
    }

    public struct MovingAddressStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MoveStatus", location: .body(locationName: "moveStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]

        /// The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
        public let moveStatus: MoveStatus?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(moveStatus: MoveStatus? = nil, publicIp: String? = nil) {
            self.moveStatus = moveStatus
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case moveStatus = "moveStatus"
            case publicIp = "publicIp"
        }
    }

    public struct NatGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteTime", location: .body(locationName: "deleteTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureCode", location: .body(locationName: "failureCode"), required: false, type: .string), 
            AWSShapeMember(label: "FailureMessage", location: .body(locationName: "failureMessage"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayAddresses", location: .body(locationName: "natGatewayAddressSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedBandwidth", location: .body(locationName: "provisionedBandwidth"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The date and time the NAT gateway was created.
        public let createTime: TimeStamp?
        /// The date and time the NAT gateway was deleted, if applicable.
        public let deleteTime: TimeStamp?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public let failureCode: String?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."  
        public let failureMessage: String?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        public let natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionedBandwidth: ProvisionedBandwidth?
        /// The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.  
        public let state: NatGatewayState?
        /// The ID of the subnet in which the NAT gateway is located.
        public let subnetId: String?
        /// The tags for the NAT gateway.
        public let tags: [Tag]?
        /// The ID of the VPC in which the NAT gateway is located.
        public let vpcId: String?

        public init(createTime: TimeStamp? = nil, deleteTime: TimeStamp? = nil, failureCode: String? = nil, failureMessage: String? = nil, natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil, provisionedBandwidth: ProvisionedBandwidth? = nil, state: NatGatewayState? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.createTime = createTime
            self.deleteTime = deleteTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
            self.provisionedBandwidth = provisionedBandwidth
            self.state = state
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "createTime"
            case deleteTime = "deleteTime"
            case failureCode = "failureCode"
            case failureMessage = "failureMessage"
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
            case provisionedBandwidth = "provisionedBandwidth"
            case state = "state"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NatGatewayAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIp", location: .body(locationName: "privateIp"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]

        /// The allocation ID of the Elastic IP address that's associated with the NAT gateway.
        public let allocationId: String?
        /// The ID of the network interface associated with the NAT gateway.
        public let networkInterfaceId: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIp: String?
        /// The Elastic IP address associated with the NAT gateway.
        public let publicIp: String?

        public init(allocationId: String? = nil, networkInterfaceId: String? = nil, privateIp: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.networkInterfaceId = networkInterfaceId
            self.privateIp = privateIp
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case networkInterfaceId = "networkInterfaceId"
            case privateIp = "privateIp"
            case publicIp = "publicIp"
        }
    }

    public struct NetworkAcl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Entries", location: .body(locationName: "entrySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "default"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Any associations between the network ACL and one or more subnets
        public let associations: [NetworkAclAssociation]?
        /// One or more entries (rules) in the network ACL.
        public let entries: [NetworkAclEntry]?
        /// Indicates whether this is the default network ACL for the VPC.
        public let isDefault: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the AWS account that owns the network ACL.
        public let ownerId: String?
        /// Any tags assigned to the network ACL.
        public let tags: [Tag]?
        /// The ID of the VPC for the network ACL.
        public let vpcId: String?

        public init(associations: [NetworkAclAssociation]? = nil, entries: [NetworkAclEntry]? = nil, isDefault: Bool? = nil, networkAclId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.entries = entries
            self.isDefault = isDefault
            self.networkAclId = networkAclId
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case entries = "entrySet"
            case isDefault = "default"
            case networkAclId = "networkAclId"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NetworkAclAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAclAssociationId", location: .body(locationName: "networkAclAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// The ID of the association between a network ACL and a subnet.
        public let networkAclAssociationId: String?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkAclAssociationId: String? = nil, networkAclId: String? = nil, subnetId: String? = nil) {
            self.networkAclAssociationId = networkAclAssociationId
            self.networkAclId = networkAclId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclAssociationId = "networkAclAssociationId"
            case networkAclId = "networkAclId"
            case subnetId = "subnetId"
        }
    }

    public struct NetworkAclEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: false, type: .boolean), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "icmpTypeCode"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: false, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: false, type: .integer)
        ]

        /// The IPv4 network range to allow or deny, in CIDR notation.
        public let cidrBlock: String?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public let egress: Bool?
        /// ICMP protocol: The ICMP type and code.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public let ruleNumber: Int?

        public init(cidrBlock: String? = nil, egress: Bool? = nil, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int? = nil) {
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case egress = "egress"
            case icmpTypeCode = "icmpTypeCode"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct NetworkInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EfaSupported", location: .body(locationName: "efaSupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv4AddressesPerInterface", location: .body(locationName: "ipv4AddressesPerInterface"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6AddressesPerInterface", location: .body(locationName: "ipv6AddressesPerInterface"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Supported", location: .body(locationName: "ipv6Supported"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaximumNetworkInterfaces", location: .body(locationName: "maximumNetworkInterfaces"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkPerformance", location: .body(locationName: "networkPerformance"), required: false, type: .string)
        ]

        /// Indicates whether Elastic Fabric Adapter (EFA) is supported.
        public let efaSupported: Bool?
        /// Indicates whether Elastic Network Adapter (ENA) is supported.
        public let enaSupport: EnaSupport?
        /// The maximum number of IPv4 addresses per network interface.
        public let ipv4AddressesPerInterface: Int?
        /// The maximum number of IPv6 addresses per network interface.
        public let ipv6AddressesPerInterface: Int?
        /// Indicates whether IPv6 is supported.
        public let ipv6Supported: Bool?
        /// The maximum number of network interfaces for the instance type.
        public let maximumNetworkInterfaces: Int?
        /// Describes the network performance.
        public let networkPerformance: String?

        public init(efaSupported: Bool? = nil, enaSupport: EnaSupport? = nil, ipv4AddressesPerInterface: Int? = nil, ipv6AddressesPerInterface: Int? = nil, ipv6Supported: Bool? = nil, maximumNetworkInterfaces: Int? = nil, networkPerformance: String? = nil) {
            self.efaSupported = efaSupported
            self.enaSupport = enaSupport
            self.ipv4AddressesPerInterface = ipv4AddressesPerInterface
            self.ipv6AddressesPerInterface = ipv6AddressesPerInterface
            self.ipv6Supported = ipv6Supported
            self.maximumNetworkInterfaces = maximumNetworkInterfaces
            self.networkPerformance = networkPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case efaSupported = "efaSupported"
            case enaSupport = "enaSupport"
            case ipv4AddressesPerInterface = "ipv4AddressesPerInterface"
            case ipv6AddressesPerInterface = "ipv6AddressesPerInterface"
            case ipv6Supported = "ipv6Supported"
            case maximumNetworkInterfaces = "maximumNetworkInterfaces"
            case networkPerformance = "networkPerformance"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "InterfaceType", location: .body(locationName: "interfaceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterManaged", location: .body(locationName: "requesterManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "TagSet", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: NetworkInterfaceAttachment?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// A description.
        public let description: String?
        /// Any security groups for the network interface.
        public let groups: [GroupIdentifier]?
        /// The type of network interface.
        public let interfaceType: NetworkInterfaceType?
        /// The IPv6 addresses associated with the network interface.
        public let ipv6Addresses: [NetworkInterfaceIpv6Address]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The AWS account ID of the owner of the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: [NetworkInterfacePrivateIpAddress]?
        /// The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?
        /// Indicates whether the network interface is being managed by AWS.
        public let requesterManaged: Bool?
        /// Indicates whether traffic to or from the instance is validated.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the network interface.
        public let tagSet: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: NetworkInterfaceAssociation? = nil, attachment: NetworkInterfaceAttachment? = nil, availabilityZone: String? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: NetworkInterfaceType? = nil, ipv6Addresses: [NetworkInterfaceIpv6Address]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [NetworkInterfacePrivateIpAddress]? = nil, requesterId: String? = nil, requesterManaged: Bool? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, tagSet: [Tag]? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.availabilityZone = availabilityZone
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6Addresses = ipv6Addresses
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.requesterId = requesterId
            self.requesterManaged = requesterManaged
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.tagSet = tagSet
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case attachment = "attachment"
            case availabilityZone = "availabilityZone"
            case description = "description"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv6Addresses = "ipv6AddressesSet"
            case macAddress = "macAddress"
            case networkInterfaceId = "networkInterfaceId"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case requesterId = "requesterId"
            case requesterManaged = "requesterManaged"
            case sourceDestCheck = "sourceDestCheck"
            case status = "status"
            case subnetId = "subnetId"
            case tagSet = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NetworkInterfaceAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "CarrierIp", location: .body(locationName: "carrierIp"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIp", location: .body(locationName: "customerOwnedIp"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]

        /// The allocation ID.
        public let allocationId: String?
        /// The association ID.
        public let associationId: String?
        /// The carrier IP address associated with the network interface. This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.
        public let carrierIp: String?
        /// The customer-owned IP address associated with the network interface.
        public let customerOwnedIp: String?
        /// The ID of the Elastic IP address owner.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The address of the Elastic IP address or Carrier IP address bound to the network interface.
        public let publicIp: String?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case associationId = "associationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case ipOwnerId = "ipOwnerId"
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
        }
    }

    public struct NetworkInterfaceAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The timestamp indicating when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The device index of the network interface attachment on the instance.
        public let deviceIndex: Int?
        /// The ID of the instance.
        public let instanceId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case instanceId = "instanceId"
            case instanceOwnerId = "instanceOwnerId"
            case status = "status"
        }
    }

    public struct NetworkInterfaceAttachmentChanges: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean)
        ]

        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?

        public init(attachmentId: String? = nil, deleteOnTermination: Bool? = nil) {
            self.attachmentId = attachmentId
            self.deleteOnTermination = deleteOnTermination
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case deleteOnTermination = "deleteOnTermination"
        }
    }

    public struct NetworkInterfaceIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]

        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct NetworkInterfacePermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsAccountId", location: .body(locationName: "awsAccountId"), required: false, type: .string), 
            AWSShapeMember(label: "AwsService", location: .body(locationName: "awsService"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePermissionId", location: .body(locationName: "networkInterfacePermissionId"), required: false, type: .string), 
            AWSShapeMember(label: "Permission", location: .body(locationName: "permission"), required: false, type: .enum), 
            AWSShapeMember(label: "PermissionState", location: .body(locationName: "permissionState"), required: false, type: .structure)
        ]

        /// The AWS account ID.
        public let awsAccountId: String?
        /// The AWS service.
        public let awsService: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String?
        /// The type of permission.
        public let permission: InterfacePermissionType?
        /// Information about the state of the permission.
        public let permissionState: NetworkInterfacePermissionState?

        public init(awsAccountId: String? = nil, awsService: String? = nil, networkInterfaceId: String? = nil, networkInterfacePermissionId: String? = nil, permission: InterfacePermissionType? = nil, permissionState: NetworkInterfacePermissionState? = nil) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePermissionId = networkInterfacePermissionId
            self.permission = permission
            self.permissionState = permissionState
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId = "awsAccountId"
            case awsService = "awsService"
            case networkInterfaceId = "networkInterfaceId"
            case networkInterfacePermissionId = "networkInterfacePermissionId"
            case permission = "permission"
            case permissionState = "permissionState"
        }
    }

    public struct NetworkInterfacePermissionState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The state of the permission.
        public let state: NetworkInterfacePermissionStateCode?
        /// A status message, if applicable.
        public let statusMessage: String?

        public init(state: NetworkInterfacePermissionStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct NetworkInterfacePrivateIpAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]

        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
        public let primary: Bool?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address.
        public let privateIpAddress: String?

        public init(association: NetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case primary = "primary"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct NewDhcpConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        public let key: String?
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "Value"
        }
    }

    public struct OnDemandOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationOptions", location: .body(locationName: "capacityReservationOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxTotalPrice", location: .body(locationName: "maxTotalPrice"), required: false, type: .string), 
            AWSShapeMember(label: "MinTargetCapacity", location: .body(locationName: "minTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SingleAvailabilityZone", location: .body(locationName: "singleAvailabilityZone"), required: false, type: .boolean), 
            AWSShapeMember(label: "SingleInstanceType", location: .body(locationName: "singleInstanceType"), required: false, type: .boolean)
        ]

        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptions?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptions? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case capacityReservationOptions = "capacityReservationOptions"
            case maxTotalPrice = "maxTotalPrice"
            case minTargetCapacity = "minTargetCapacity"
            case singleAvailabilityZone = "singleAvailabilityZone"
            case singleInstanceType = "singleInstanceType"
        }
    }

    public struct OnDemandOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationOptions", required: false, type: .structure), 
            AWSShapeMember(label: "MaxTotalPrice", required: false, type: .string), 
            AWSShapeMember(label: "MinTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SingleAvailabilityZone", required: false, type: .boolean), 
            AWSShapeMember(label: "SingleInstanceType", required: false, type: .boolean)
        ]

        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptionsRequest?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptionsRequest? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case capacityReservationOptions = "CapacityReservationOptions"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct PciId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemVendorId", required: false, type: .string), 
            AWSShapeMember(label: "VendorId", required: false, type: .string)
        ]

        /// The ID of the device.
        public let deviceId: String?
        /// The ID of the subsystem.
        public let subsystemId: String?
        /// The ID of the vendor for the subsystem.
        public let subsystemVendorId: String?
        /// The ID of the vendor.
        public let vendorId: String?

        public init(deviceId: String? = nil, subsystemId: String? = nil, subsystemVendorId: String? = nil, vendorId: String? = nil) {
            self.deviceId = deviceId
            self.subsystemId = subsystemId
            self.subsystemVendorId = subsystemVendorId
            self.vendorId = vendorId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case subsystemId = "SubsystemId"
            case subsystemVendorId = "SubsystemVendorId"
            case vendorId = "VendorId"
        }
    }

    public struct PeeringAttachmentStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The status code.
        public let code: String?
        /// The status message, if applicable.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct PeeringConnectionOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean)
        ]

        /// If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct PeeringConnectionOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", required: false, type: .boolean)
        ]

        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "AllowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "AllowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "AllowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct PeeringTgwInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string)
        ]

        /// The AWS account ID of the owner of the transit gateway.
        public let ownerId: String?
        /// The Region of the transit gateway.
        public let region: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(ownerId: String? = nil, region: String? = nil, transitGatewayId: String? = nil) {
            self.ownerId = ownerId
            self.region = region
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case region = "region"
            case transitGatewayId = "transitGatewayId"
        }
    }

    public struct Phase1DHGroupNumbersListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .integer)
        ]

        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1DHGroupNumbersRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .integer)
        ]

        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1EncryptionAlgorithmsListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1EncryptionAlgorithmsRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1IntegrityAlgorithmsListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1IntegrityAlgorithmsRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2DHGroupNumbersListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .integer)
        ]

        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2DHGroupNumbersRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .integer)
        ]

        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2EncryptionAlgorithmsListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2EncryptionAlgorithmsRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2IntegrityAlgorithmsListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2IntegrityAlgorithmsRequestListValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]

        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Placement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "HostResourceGroupArn", location: .body(locationName: "hostResourceGroupArn"), required: false, type: .string), 
            AWSShapeMember(label: "PartitionNumber", location: .body(locationName: "partitionNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "SpreadDomain", location: .body(locationName: "spreadDomain"), required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]

        /// The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let affinity: String?
        /// The Availability Zone of the instance. If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region. This parameter is not supported by CreateFleet.
        public let availabilityZone: String?
        /// The name of the placement group the instance is in.
        public let groupName: String?
        /// The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host. This parameter is not supported by CreateFleet.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance is in. Valid only if the placement group strategy is set to partition. This parameter is not supported by CreateFleet.
        public let partitionNumber: Int?
        /// Reserved for future use. This parameter is not supported by CreateFleet.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "hostResourceGroupArn"
            case partitionNumber = "partitionNumber"
            case spreadDomain = "spreadDomain"
            case tenancy = "tenancy"
        }
    }

    public struct PlacementGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "PartitionCount", location: .body(locationName: "partitionCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the placement group.
        public let groupId: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The number of partitions. Valid only if strategy is set to partition.
        public let partitionCount: Int?
        /// The state of the placement group.
        public let state: PlacementGroupState?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// Any tags applied to the placement group.
        public let tags: [Tag]?

        public init(groupId: String? = nil, groupName: String? = nil, partitionCount: Int? = nil, state: PlacementGroupState? = nil, strategy: PlacementStrategy? = nil, tags: [Tag]? = nil) {
            self.groupId = groupId
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.state = state
            self.strategy = strategy
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
            case partitionCount = "partitionCount"
            case state = "state"
            case strategy = "strategy"
            case tags = "tagSet"
        }
    }

    public struct PlacementGroupInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportedStrategies", location: .body(locationName: "supportedStrategies"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// A list of supported placement groups types.
        public let supportedStrategies: [PlacementGroupStrategy]?

        public init(supportedStrategies: [PlacementGroupStrategy]? = nil) {
            self.supportedStrategies = supportedStrategies
        }

        private enum CodingKeys: String, CodingKey {
            case supportedStrategies = "supportedStrategies"
        }
    }

    public struct PlacementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]

        /// The name of the placement group that the instance is in.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
        }
    }

    public struct PoolCidrBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", location: .body(locationName: "poolCidrBlock"), required: false, type: .string)
        ]

        /// The CIDR block.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "poolCidrBlock"
        }
    }

    public struct PortRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "From", location: .body(locationName: "from"), required: false, type: .integer), 
            AWSShapeMember(label: "To", location: .body(locationName: "to"), required: false, type: .integer)
        ]

        /// The first port in the range.
        public let from: Int?
        /// The last port in the range.
        public let to: Int?

        public init(from: Int? = nil, to: Int? = nil) {
            self.from = from
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from = "from"
            case to = "to"
        }
    }

    public struct PrefixList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidrs", location: .body(locationName: "cidrSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListName", location: .body(locationName: "prefixListName"), required: false, type: .string)
        ]

        /// The IP address range of the AWS service.
        public let cidrs: [String]?
        /// The ID of the prefix.
        public let prefixListId: String?
        /// The name of the prefix.
        public let prefixListName: String?

        public init(cidrs: [String]? = nil, prefixListId: String? = nil, prefixListName: String? = nil) {
            self.cidrs = cidrs
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrs = "cidrSet"
            case prefixListId = "prefixListId"
            case prefixListName = "prefixListName"
        }
    }

    public struct PrefixListAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceOwner", location: .body(locationName: "resourceOwner"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The owner of the resource.
        public let resourceOwner: String?

        public init(resourceId: String? = nil, resourceOwner: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceOwner = "resourceOwner"
        }
    }

    public struct PrefixListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", location: .body(locationName: "cidr"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]

        /// The CIDR block.
        public let cidr: String?
        /// The description.
        public let description: String?

        public init(cidr: String? = nil, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case description = "description"
        }
    }

    public struct PrefixListId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string)
        ]

        /// A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(description: String? = nil, prefixListId: String? = nil) {
            self.description = description
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case prefixListId = "prefixListId"
        }
    }

    public struct PriceSchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Active", location: .body(locationName: "active"), required: false, type: .boolean), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long)
        ]

        /// The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
        public let active: Bool?
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(active: Bool? = nil, currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.active = active
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case active = "active"
            case currencyCode = "currencyCode"
            case price = "price"
            case term = "term"
        }
    }

    public struct PriceScheduleSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long)
        ]

        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case price = "price"
            case term = "term"
        }
    }

    public struct PricingDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double)
        ]

        /// The number of reservations available for the price.
        public let count: Int?
        /// The price per instance.
        public let price: Double?

        public init(count: Int? = nil, price: Double? = nil) {
            self.count = count
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case price = "price"
        }
    }

    public struct PrincipalIdFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// PrincipalIdFormatARN description
        public let arn: String?
        /// PrincipalIdFormatStatuses description
        public let statuses: [IdFormat]?

        public init(arn: String? = nil, statuses: [IdFormat]? = nil) {
            self.arn = arn
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case statuses = "statusSet"
        }
    }

    public struct PrivateDnsNameConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The name of the record subdomain the service provider needs to create. The service provider adds the value text to the name.
        public let name: String?
        /// The verification state of the VPC endpoint service. &gt;Consumers of the endpoint service can use the private name only when the state is verified.
        public let state: DnsNameState?
        /// The endpoint service verification type, for example TXT.
        public let `type`: String?
        /// The value the service provider adds to the private DNS name domain record before verification.
        public let value: String?

        public init(name: String? = nil, state: DnsNameState? = nil, type: String? = nil, value: String? = nil) {
            self.name = name
            self.state = state
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case state = "state"
            case `type` = "type"
            case value = "value"
        }
    }

    public struct PrivateIpAddressSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]

        /// Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
        public let primary: Bool?
        /// The private IPv4 addresses.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct ProcessorInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportedArchitectures", location: .body(locationName: "supportedArchitectures"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SustainedClockSpeedInGhz", location: .body(locationName: "sustainedClockSpeedInGhz"), required: false, type: .double)
        ]

        /// A list of architectures supported by the instance type.
        public let supportedArchitectures: [ArchitectureType]?
        /// The speed of the processor, in GHz.
        public let sustainedClockSpeedInGhz: Double?

        public init(supportedArchitectures: [ArchitectureType]? = nil, sustainedClockSpeedInGhz: Double? = nil) {
            self.supportedArchitectures = supportedArchitectures
            self.sustainedClockSpeedInGhz = sustainedClockSpeedInGhz
        }

        private enum CodingKeys: String, CodingKey {
            case supportedArchitectures = "supportedArchitectures"
            case sustainedClockSpeedInGhz = "sustainedClockSpeedInGhz"
        }
    }

    public struct ProductCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodeId", location: .body(locationName: "productCode"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodeType", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// The product code.
        public let productCodeId: String?
        /// The type of product code.
        public let productCodeType: ProductCodeValues?

        public init(productCodeId: String? = nil, productCodeType: ProductCodeValues? = nil) {
            self.productCodeId = productCodeId
            self.productCodeType = productCodeType
        }

        private enum CodingKeys: String, CodingKey {
            case productCodeId = "productCode"
            case productCodeType = "type"
        }
    }

    public struct PropagatingVgw: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string)
        ]

        /// The ID of the virtual private gateway.
        public let gatewayId: String?

        public init(gatewayId: String? = nil) {
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
        }
    }

    public struct ProvisionByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "CidrAuthorizationContext", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PoolTagSpecifications", location: .body(locationName: "PoolTagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PubliclyAdvertisable", required: false, type: .boolean)
        ]

        /// The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region.
        public let cidr: String
        /// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
        public let cidrAuthorizationContext: CidrAuthorizationContext?
        /// A description for the address range and the address pool.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the address pool.
        public let poolTagSpecifications: [TagSpecification]?
        /// (IPv6 only) Indicate whether the address range will be publicly advertised to the internet. Default: true
        public let publiclyAdvertisable: Bool?

        public init(cidr: String, cidrAuthorizationContext: CidrAuthorizationContext? = nil, description: String? = nil, dryRun: Bool? = nil, poolTagSpecifications: [TagSpecification]? = nil, publiclyAdvertisable: Bool? = nil) {
            self.cidr = cidr
            self.cidrAuthorizationContext = cidrAuthorizationContext
            self.description = description
            self.dryRun = dryRun
            self.poolTagSpecifications = poolTagSpecifications
            self.publiclyAdvertisable = publiclyAdvertisable
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case cidrAuthorizationContext = "CidrAuthorizationContext"
            case description = "Description"
            case dryRun = "DryRun"
            case poolTagSpecifications = "PoolTagSpecification"
            case publiclyAdvertisable = "PubliclyAdvertisable"
        }
    }

    public struct ProvisionByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]

        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct ProvisionedBandwidth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Provisioned", location: .body(locationName: "provisioned"), required: false, type: .string), 
            AWSShapeMember(label: "ProvisionTime", location: .body(locationName: "provisionTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Requested", location: .body(locationName: "requested"), required: false, type: .string), 
            AWSShapeMember(label: "RequestTime", location: .body(locationName: "requestTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string)
        ]

        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisioned: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionTime: TimeStamp?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requested: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requestTime: TimeStamp?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let status: String?

        public init(provisioned: String? = nil, provisionTime: TimeStamp? = nil, requested: String? = nil, requestTime: TimeStamp? = nil, status: String? = nil) {
            self.provisioned = provisioned
            self.provisionTime = provisionTime
            self.requested = requested
            self.requestTime = requestTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case provisioned = "provisioned"
            case provisionTime = "provisionTime"
            case requested = "requested"
            case requestTime = "requestTime"
            case status = "status"
        }
    }

    public struct PublicIpv4Pool: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkBorderGroup", location: .body(locationName: "networkBorderGroup"), required: false, type: .string), 
            AWSShapeMember(label: "PoolAddressRanges", location: .body(locationName: "poolAddressRangeSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PoolId", location: .body(locationName: "poolId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalAddressCount", location: .body(locationName: "totalAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalAvailableAddressCount", location: .body(locationName: "totalAvailableAddressCount"), required: false, type: .integer)
        ]

        /// A description of the address pool.
        public let description: String?
        /// The name of the location from which the address pool is advertised. A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises public IP addresses.
        public let networkBorderGroup: String?
        /// The address ranges.
        public let poolAddressRanges: [PublicIpv4PoolRange]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        public let tags: [Tag]?
        /// The total number of addresses.
        public let totalAddressCount: Int?
        /// The total number of available addresses.
        public let totalAvailableAddressCount: Int?

        public init(description: String? = nil, networkBorderGroup: String? = nil, poolAddressRanges: [PublicIpv4PoolRange]? = nil, poolId: String? = nil, tags: [Tag]? = nil, totalAddressCount: Int? = nil, totalAvailableAddressCount: Int? = nil) {
            self.description = description
            self.networkBorderGroup = networkBorderGroup
            self.poolAddressRanges = poolAddressRanges
            self.poolId = poolId
            self.tags = tags
            self.totalAddressCount = totalAddressCount
            self.totalAvailableAddressCount = totalAvailableAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkBorderGroup = "networkBorderGroup"
            case poolAddressRanges = "poolAddressRangeSet"
            case poolId = "poolId"
            case tags = "tagSet"
            case totalAddressCount = "totalAddressCount"
            case totalAvailableAddressCount = "totalAvailableAddressCount"
        }
    }

    public struct PublicIpv4PoolRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressCount", location: .body(locationName: "addressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailableAddressCount", location: .body(locationName: "availableAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "FirstAddress", location: .body(locationName: "firstAddress"), required: false, type: .string), 
            AWSShapeMember(label: "LastAddress", location: .body(locationName: "lastAddress"), required: false, type: .string)
        ]

        /// The number of addresses in the range.
        public let addressCount: Int?
        /// The number of available addresses in the range.
        public let availableAddressCount: Int?
        /// The first IP address in the range.
        public let firstAddress: String?
        /// The last IP address in the range.
        public let lastAddress: String?

        public init(addressCount: Int? = nil, availableAddressCount: Int? = nil, firstAddress: String? = nil, lastAddress: String? = nil) {
            self.addressCount = addressCount
            self.availableAddressCount = availableAddressCount
            self.firstAddress = firstAddress
            self.lastAddress = lastAddress
        }

        private enum CodingKeys: String, CodingKey {
            case addressCount = "addressCount"
            case availableAddressCount = "availableAddressCount"
            case firstAddress = "firstAddress"
            case lastAddress = "lastAddress"
        }
    }

    public struct Purchase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string)
        ]

        /// The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the reservation's term in seconds.
        public let duration: Int?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: [String]?
        /// The ID of the reservation.
        public let hostReservationId: String?
        /// The hourly price of the reservation per hour.
        public let hourlyPrice: String?
        /// The instance family on the Dedicated Host that the reservation can be associated with.
        public let instanceFamily: String?
        /// The payment option for the reservation.
        public let paymentOption: PaymentOption?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case hostIdSet = "hostIdSet"
            case hostReservationId = "hostReservationId"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case paymentOption = "paymentOption"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct PurchaseHostReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .enum), 
            AWSShapeMember(label: "HostIdSet", required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LimitPrice", required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The IDs of the Dedicated Hosts with which the reservation will be associated.
        public let hostIdSet: [String]
        /// The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
        public let limitPrice: String?
        /// The ID of the offering.
        public let offeringId: String
        /// The tags to apply to the Dedicated Host Reservation during purchase.
        public let tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, hostIdSet: [String], limitPrice: String? = nil, offeringId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.hostIdSet = hostIdSet
            self.limitPrice = limitPrice
            self.offeringId = offeringId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case currencyCode = "CurrencyCode"
            case hostIdSet = "HostIdSet"
            case limitPrice = "LimitPrice"
            case offeringId = "OfferingId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct PurchaseHostReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string)
        ]

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Describes the details of the purchase.
        public let purchase: [Purchase]?
        /// The total hourly price of the reservation calculated per hour.
        public let totalHourlyPrice: String?
        /// The total amount charged to your account when you purchase the reservation.
        public let totalUpfrontPrice: String?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case currencyCode = "currencyCode"
            case purchase = "purchase"
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
        }
    }

    public struct PurchaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "PurchaseToken", required: true, type: .string)
        ]

        /// The number of instances.
        public let instanceCount: Int
        /// The purchase token.
        public let purchaseToken: String

        public init(instanceCount: Int, purchaseToken: String) {
            self.instanceCount = instanceCount
            self.purchaseToken = purchaseToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case purchaseToken = "PurchaseToken"
        }
    }

    public struct PurchaseReservedInstancesOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "LimitPrice", location: .body(locationName: "limitPrice"), required: false, type: .structure), 
            AWSShapeMember(label: "PurchaseTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReservedInstancesOfferingId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of Reserved Instances to purchase.
        public let instanceCount: Int
        /// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
        public let limitPrice: ReservedInstanceLimitPrice?
        /// The time at which to purchase the Reserved Instance, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let purchaseTime: TimeStamp?
        /// The ID of the Reserved Instance offering to purchase.
        public let reservedInstancesOfferingId: String

        public init(dryRun: Bool? = nil, instanceCount: Int, limitPrice: ReservedInstanceLimitPrice? = nil, purchaseTime: TimeStamp? = nil, reservedInstancesOfferingId: String) {
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.limitPrice = limitPrice
            self.purchaseTime = purchaseTime
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceCount = "InstanceCount"
            case limitPrice = "limitPrice"
            case purchaseTime = "PurchaseTime"
            case reservedInstancesOfferingId = "ReservedInstancesOfferingId"
        }
    }

    public struct PurchaseReservedInstancesOfferingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]

        /// The IDs of the purchased Reserved Instances.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct PurchaseScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PurchaseRequests", location: .body(locationName: "PurchaseRequest"), required: true, type: .list, encoding: .list(member:"PurchaseRequest"))
        ]

        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The purchase requests.
        public let purchaseRequests: [PurchaseRequest]

        public init(clientToken: String? = PurchaseScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, purchaseRequests: [PurchaseRequest]) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.purchaseRequests = purchaseRequests
        }

        public func validate(name: String) throws {
            try validate(self.purchaseRequests, name:"purchaseRequests", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case purchaseRequests = "PurchaseRequest"
        }
    }

    public struct PurchaseScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: [ScheduledInstance]?

        public init(scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct RebootInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance IDs.
        public let instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double), 
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .enum)
        ]

        /// The amount of the recurring charge.
        public let amount: Double?
        /// The frequency of the recurring charge.
        public let frequency: RecurringChargeFrequency?

        public init(amount: Double? = nil, frequency: RecurringChargeFrequency? = nil) {
            self.amount = amount
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case amount = "amount"
            case frequency = "frequency"
        }
    }

    public struct Region: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", location: .body(locationName: "regionEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "OptInStatus", location: .body(locationName: "optInStatus"), required: false, type: .string), 
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string)
        ]

        /// The Region service endpoint.
        public let endpoint: String?
        /// The Region opt-in status. The possible values are opt-in-not-required, opted-in, and not-opted-in.
        public let optInStatus: String?
        /// The name of the Region.
        public let regionName: String?

        public init(endpoint: String? = nil, optInStatus: String? = nil, regionName: String? = nil) {
            self.endpoint = endpoint
            self.optInStatus = optInStatus
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "regionEndpoint"
            case optInStatus = "optInStatus"
            case regionName = "regionName"
        }
    }

    public struct RegisterImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "BillingProducts", location: .body(locationName: "BillingProduct"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .list, encoding: .list(member:"BlockDeviceMapping")), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageLocation", required: false, type: .string), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .string)
        ]

        /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
        public let architecture: ArchitectureValues?
        /// The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
        public let billingProducts: [String]?
        /// The block device mapping entries.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// A description for your AMI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let enaSupport: Bool?
        /// The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the aws-exec-read canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see Canned ACLs in the Amazon S3 Service Developer Guide.
        public let imageLocation: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let sriovNetSupport: String?
        /// The type of virtualization (hvm | paravirtual). Default: paravirtual 
        public let virtualizationType: String?

        public init(architecture: ArchitectureValues? = nil, billingProducts: [String]? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, description: String? = nil, dryRun: Bool? = nil, enaSupport: Bool? = nil, imageLocation: String? = nil, kernelId: String? = nil, name: String, ramdiskId: String? = nil, rootDeviceName: String? = nil, sriovNetSupport: String? = nil, virtualizationType: String? = nil) {
            self.architecture = architecture
            self.billingProducts = billingProducts
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.enaSupport = enaSupport
            self.imageLocation = imageLocation
            self.kernelId = kernelId
            self.name = name
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sriovNetSupport = sriovNetSupport
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case billingProducts = "BillingProduct"
            case blockDeviceMappings = "BlockDeviceMapping"
            case description = "description"
            case dryRun = "dryRun"
            case enaSupport = "enaSupport"
            case imageLocation = "ImageLocation"
            case kernelId = "kernelId"
            case name = "name"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case sriovNetSupport = "sriovNetSupport"
            case virtualizationType = "virtualizationType"
        }
    }

    public struct RegisterImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]

        /// The ID of the newly registered AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct RegisterInstanceEventNotificationAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTagAttribute", required: false, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to register.
        public let instanceTagAttribute: RegisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: RegisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct RegisterInstanceEventNotificationAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTagAttribute", location: .body(locationName: "instanceTagAttribute"), required: false, type: .structure)
        ]

        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct RegisterInstanceTagAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeAllTagsOfInstance", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceTagKeys", location: .body(locationName: "InstanceTagKey"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether to register all tag keys in the current Region. Specify true to register all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// The tag keys to register.
        public let instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group members' network interface IDs to register with the transit gateway multicast group.
        public let networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegisteredMulticastGroupMembers", location: .body(locationName: "registeredMulticastGroupMembers"), required: false, type: .structure)
        ]

        /// Information about the registered transit gateway multicast group members.
        public let registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers?

        public init(registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers? = nil) {
            self.registeredMulticastGroupMembers = registeredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupMembers = "registeredMulticastGroupMembers"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group sources' network interface IDs to register with the transit gateway multicast group.
        public let networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegisteredMulticastGroupSources", location: .body(locationName: "registeredMulticastGroupSources"), required: false, type: .structure)
        ]

        /// Information about the transit gateway multicast group sources.
        public let registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources?

        public init(registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources? = nil) {
            self.registeredMulticastGroupSources = registeredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupSources = "registeredMulticastGroupSources"
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayPeeringAttachment", location: .body(locationName: "transitGatewayPeeringAttachment"), required: false, type: .structure)
        ]

        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]

        /// Information about the attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct RejectVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the service.
        public let serviceId: String
        /// The IDs of one or more VPC endpoints.
        public let vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, serviceId: String, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct RejectVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the endpoints that were not rejected, if applicable.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct RejectVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct RejectVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ReleaseAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkBorderGroup", required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string)
        ]

        /// [EC2-VPC] The allocation ID. Required for EC2-VPC.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. If you provide an incorrect network border group, you will receive an InvalidAddress.NotFound error. For more information, see Error Codes.  You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an InvalidParameterCombination error. For more information, see Error Codes. 
        public let networkBorderGroup: String?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?

        public init(allocationId: String? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case dryRun = "dryRun"
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIp = "PublicIp"
        }
    }

    public struct ReleaseHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// The IDs of the Dedicated Hosts to release.
        public let hostIds: [String]

        public init(hostIds: [String]) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
        }
    }

    public struct ReleaseHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The IDs of the Dedicated Hosts that were successfully released.
        public let successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be released, including an error message.
        public let unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct RemovePrefixListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string)
        ]

        /// The CIDR block.
        public let cidr: String

        public init(cidr: String) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure)
        ]

        /// The ID of the existing IAM instance profile association.
        public let associationId: String
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification

        public init(associationId: String, iamInstanceProfile: IamInstanceProfileSpecification) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case iamInstanceProfile = "IamInstanceProfile"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]

        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct ReplaceNetworkAclAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string)
        ]

        /// The ID of the current association between the original network ACL and the subnet.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new network ACL to associate with the subnet.
        public let networkAclId: String

        public init(associationId: String, dryRun: Bool? = nil, networkAclId: String) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct ReplaceNetworkAclAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]

        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct ReplaceNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer)
        ]

        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
        public let egress: Bool
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the ACL.
        public let networkAclId: String
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number of the entry to replace.
        public let ruleNumber: Int

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String, portRange: PortRange? = nil, protocol: String, ruleAction: RuleAction, ruleNumber: Int) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case dryRun = "dryRun"
            case egress = "egress"
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case networkAclId = "networkAclId"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct ReplaceRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "LocalTarget", required: false, type: .boolean), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// [IPv4 traffic only] The ID of a carrier gateway.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// Specifies whether to reset the local route to its default target (local).
        public let localTarget: Bool?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, localTarget: Bool? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.localTarget = localTarget
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case localGatewayId = "LocalGatewayId"
            case localTarget = "LocalTarget"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
            case transitGatewayId = "TransitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct ReplaceRouteTableAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]

        /// The association ID.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new route table to associate with the subnet.
        public let routeTableId: String

        public init(associationId: String, dryRun: Bool? = nil, routeTableId: String) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct ReplaceRouteTableAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationState", location: .body(locationName: "associationState"), required: false, type: .structure), 
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]

        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(associationState: RouteTableAssociationState? = nil, newAssociationId: String? = nil) {
            self.associationState = associationState
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState = "associationState"
            case newAssociationId = "newAssociationId"
        }
    }

    public struct ReplaceTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Indicates whether traffic matching this route is to be dropped.
        public let blackhole: Bool?
        /// The CIDR range used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ReplaceTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]

        /// Information about the modified route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct ReportInstanceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instanceId"), required: true, type: .list, encoding: .list(member:"InstanceId")), 
            AWSShapeMember(label: "ReasonCodes", location: .body(locationName: "reasonCode"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum)
        ]

        /// Descriptive text about the health state of your instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The time at which the reported instance health state ended.
        public let endTime: TimeStamp?
        /// The instances.
        public let instances: [String]
        /// The reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]  
        public let reasonCodes: [ReportInstanceReasonCodes]
        /// The time at which the reported instance health state began.
        public let startTime: TimeStamp?
        /// The status of all instances listed.
        public let status: ReportStatusType

        public init(description: String? = nil, dryRun: Bool? = nil, endTime: TimeStamp? = nil, instances: [String], reasonCodes: [ReportInstanceReasonCodes], startTime: TimeStamp? = nil, status: ReportStatusType) {
            self.description = description
            self.dryRun = dryRun
            self.endTime = endTime
            self.instances = instances
            self.reasonCodes = reasonCodes
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case dryRun = "dryRun"
            case endTime = "endTime"
            case instances = "instanceId"
            case reasonCodes = "reasonCode"
            case startTime = "startTime"
            case status = "status"
        }
    }

    public struct RequestLaunchTemplateData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .list, encoding: .list(member:"BlockDeviceMapping")), 
            AWSShapeMember(label: "CapacityReservationSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "CpuOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CreditSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecifications", location: .body(locationName: "ElasticGpuSpecification"), required: false, type: .list, encoding: .list(member:"ElasticGpuSpecification")), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "ElasticInferenceAccelerator"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HibernationOptions", required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceMarketOptions", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "LicenseSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MetadataOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .list, encoding: .list(member:"InstanceNetworkInterfaceSpecification")), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "RamDiskId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .list, encoding: .list(member:"SecurityGroup")), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"LaunchTemplateTagSpecificationRequest")), 
            AWSShapeMember(label: "UserData", required: false, type: .string)
        ]

        /// The block device mapping.
        public let blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]?
        /// The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptionsRequest?
        /// The credit option for CPU usage of the instance. Valid for T2, T3, or T3a instances only.
        public let creditSpecification: CreditSpecificationRequest?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance.
        public let elasticGpuSpecifications: [ElasticGpuSpecification]?
        ///  The elastic inference accelerator for the instance. 
        public let elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]?
        /// Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptionsRequest?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest?
        /// The ID of the AMI.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
        public let keyName: String?
        /// The license configurations.
        public let licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]?
        /// The metadata options for the instance. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoringRequest?
        /// One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        public let networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]?
        /// The placement for the instance.
        public let placement: LaunchTemplatePlacementRequest?
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
        public let ramDiskId: String?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup. You cannot specify both a security group ID and security name in the same request.
        public let securityGroupIds: [String]?
        /// [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
        public let securityGroups: [String]?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        public let tagSpecifications: [LaunchTemplateTagSpecificationRequest]?
        /// The Base64-encoded user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows).
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest? = nil, cpuOptions: LaunchTemplateCpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]? = nil, hibernationOptions: LaunchTemplateHibernationOptionsRequest? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest? = nil, monitoring: LaunchTemplatesMonitoringRequest? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]? = nil, placement: LaunchTemplatePlacementRequest? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecificationRequest]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiTermination = "DisableApiTermination"
            case ebsOptimized = "EbsOptimized"
            case elasticGpuSpecifications = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior = "InstanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case licenseSpecifications = "LicenseSpecification"
            case metadataOptions = "MetadataOptions"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramDiskId = "RamDiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RequestSpotFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: true, type: .structure)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The configuration for the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData

        public init(dryRun: Bool? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData) {
            self.dryRun = dryRun
            self.spotFleetRequestConfig = spotFleetRequestConfig
        }

        public func validate(name: String) throws {
            try self.spotFleetRequestConfig.validate(name: "\(name).spotFleetRequestConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
        }
    }

    public struct RequestSpotFleetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string)
        ]

        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(spotFleetRequestId: String? = nil) {
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct RequestSpotInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp)
        ]

        /// The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
        public let availabilityZoneGroup: String?
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration.
        public let blockDurationMinutes: Int?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of Spot Instances to launch. Default: 1
        public let instanceCount: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
        public let launchGroup: String?
        /// The launch specification.
        public let launchSpecification: RequestSpotLaunchSpecification?
        /// The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Instance request on creation. The value for ResourceType must be spot-instances-request, otherwise the Spot Instance request fails. To tag the Spot Instance request after it has been created, see CreateTags. 
        public let tagSpecifications: [TagSpecification]?
        /// The Spot Instance request type. Default: one-time 
        public let `type`: SpotInstanceType?
        /// The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.
        public let validFrom: TimeStamp?
        /// The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?

        public init(availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, clientToken: String? = nil, dryRun: Bool? = nil, instanceCount: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchGroup: String? = nil, launchSpecification: RequestSpotLaunchSpecification? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: SpotInstanceType? = nil, validFrom: TimeStamp? = nil, validUntil: TimeStamp? = nil) {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.`type` = `type`
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneGroup = "availabilityZoneGroup"
            case blockDurationMinutes = "blockDurationMinutes"
            case clientToken = "clientToken"
            case dryRun = "dryRun"
            case instanceCount = "instanceCount"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case launchGroup = "launchGroup"
            case launchSpecification = "LaunchSpecification"
            case spotPrice = "spotPrice"
            case tagSpecifications = "TagSpecification"
            case `type` = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct RequestSpotInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more Spot Instance requests.
        public let spotInstanceRequests: [SpotInstanceRequest]?

        public init(spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct RequestSpotLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string)
        ]

        /// Deprecated.
        public let addressingType: String?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public let monitoring: RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// One or more security group IDs.
        public let securityGroupIds: [String]?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: [String]?
        /// The IDs of the subnets in which to launch the instance. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
        public let subnetId: String?
        /// The Base64-encoded user data for the instance. User data is limited to 16 KB.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct Reservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string)
        ]

        /// [EC2-Classic only] The security groups.
        public let groups: [GroupIdentifier]?
        /// The instances.
        public let instances: [Instance]?
        /// The ID of the AWS account that owns the reservation.
        public let ownerId: String?
        /// The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?
        /// The ID of the reservation.
        public let reservationId: String?

        public init(groups: [GroupIdentifier]? = nil, instances: [Instance]? = nil, ownerId: String? = nil, requesterId: String? = nil, reservationId: String? = nil) {
            self.groups = groups
            self.instances = instances
            self.ownerId = ownerId
            self.requesterId = requesterId
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instances = "instancesSet"
            case ownerId = "ownerId"
            case requesterId = "requesterId"
            case reservationId = "reservationId"
        }
    }

    public struct ReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "RemainingTotalValue", location: .body(locationName: "remainingTotalValue"), required: false, type: .string), 
            AWSShapeMember(label: "RemainingUpfrontValue", location: .body(locationName: "remainingUpfrontValue"), required: false, type: .string)
        ]

        /// The hourly rate of the reservation.
        public let hourlyPrice: String?
        /// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
        public let remainingTotalValue: String?
        /// The remaining upfront cost of the reservation.
        public let remainingUpfrontValue: String?

        public init(hourlyPrice: String? = nil, remainingTotalValue: String? = nil, remainingUpfrontValue: String? = nil) {
            self.hourlyPrice = hourlyPrice
            self.remainingTotalValue = remainingTotalValue
            self.remainingUpfrontValue = remainingUpfrontValue
        }

        private enum CodingKeys: String, CodingKey {
            case hourlyPrice = "hourlyPrice"
            case remainingTotalValue = "remainingTotalValue"
            case remainingUpfrontValue = "remainingUpfrontValue"
        }
    }

    public struct ReservedInstanceLimitPrice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum)
        ]

        /// Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
        public let amount: Double?
        /// The currency in which the limitPrice amount is specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(amount: Double? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.amount = amount
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case amount = "amount"
            case currencyCode = "currencyCode"
        }
    }

    public struct ReservedInstanceReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstanceId", location: .body(locationName: "reservedInstanceId"), required: false, type: .string)
        ]

        /// The total value of the Convertible Reserved Instance that you are exchanging.
        public let reservationValue: ReservationValue?
        /// The ID of the Convertible Reserved Instance that you are exchanging.
        public let reservedInstanceId: String?

        public init(reservationValue: ReservationValue? = nil, reservedInstanceId: String? = nil) {
            self.reservationValue = reservationValue
            self.reservedInstanceId = reservedInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue = "reservationValue"
            case reservedInstanceId = "reservedInstanceId"
        }
    }

    public struct ReservedInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float)
        ]

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The time when the Reserved Instance expires.
        public let end: TimeStamp?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The number of reservations purchased.
        public let instanceCount: Int?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The offering class of the Reserved Instance.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The scope of the Reserved Instance.
        public let scope: Scope?
        /// The date and time the Reserved Instance started.
        public let start: TimeStamp?
        /// The state of the Reserved Instance purchase.
        public let state: ReservedInstanceState?
        /// Any tags assigned to the resource.
        public let tags: [Tag]?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, end: TimeStamp? = nil, fixedPrice: Float? = nil, instanceCount: Int? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesId: String? = nil, scope: Scope? = nil, start: TimeStamp? = nil, state: ReservedInstanceState? = nil, tags: [Tag]? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.fixedPrice = fixedPrice
            self.instanceCount = instanceCount
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesId = reservedInstancesId
            self.scope = scope
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case end = "end"
            case fixedPrice = "fixedPrice"
            case instanceCount = "instanceCount"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "instanceType"
            case offeringClass = "offeringClass"
            case offeringType = "offeringType"
            case productDescription = "productDescription"
            case recurringCharges = "recurringCharges"
            case reservedInstancesId = "reservedInstancesId"
            case scope = "scope"
            case start = "start"
            case state = "state"
            case tags = "tagSet"
            case usagePrice = "usagePrice"
        }
    }

    public struct ReservedInstancesConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum)
        ]

        /// The Availability Zone for the modified Reserved Instances.
        public let availabilityZone: String?
        /// The number of modified Reserved Instances.  This is a required field for a request. 
        public let instanceCount: Int?
        /// The instance type for the modified Reserved Instances.
        public let instanceType: InstanceType?
        /// The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
        public let platform: String?
        /// Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.
        public let scope: Scope?

        public init(availabilityZone: String? = nil, instanceCount: Int? = nil, instanceType: InstanceType? = nil, platform: String? = nil, scope: Scope? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.platform = platform
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case platform = "platform"
            case scope = "scope"
        }
    }

    public struct ReservedInstancesId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]

        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct ReservedInstancesListing: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceCounts", location: .body(locationName: "instanceCounts"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp)
        ]

        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The time the listing was created.
        public let createDate: TimeStamp?
        /// The number of instances in this state.
        public let instanceCounts: [InstanceCount]?
        /// The price of the Reserved Instance listing.
        public let priceSchedules: [PriceSchedule]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?
        /// The status of the Reserved Instance listing.
        public let status: ListingStatus?
        /// The reason for the current status of the Reserved Instance listing. The response can be blank.
        public let statusMessage: String?
        /// Any tags assigned to the resource.
        public let tags: [Tag]?
        /// The last modified timestamp of the listing.
        public let updateDate: TimeStamp?

        public init(clientToken: String? = nil, createDate: TimeStamp? = nil, instanceCounts: [InstanceCount]? = nil, priceSchedules: [PriceSchedule]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil, status: ListingStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, updateDate: TimeStamp? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.instanceCounts = instanceCounts
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case createDate = "createDate"
            case instanceCounts = "instanceCounts"
            case priceSchedules = "priceSchedules"
            case reservedInstancesId = "reservedInstancesId"
            case reservedInstancesListingId = "reservedInstancesListingId"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
            case updateDate = "updateDate"
        }
    }

    public struct ReservedInstancesModification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EffectiveDate", location: .body(locationName: "effectiveDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ModificationResults", location: .body(locationName: "modificationResultSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "reservedInstancesSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp)
        ]

        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The time when the modification request was created.
        public let createDate: TimeStamp?
        /// The time for the modification to become effective.
        public let effectiveDate: TimeStamp?
        /// Contains target configurations along with their corresponding new Reserved Instance IDs.
        public let modificationResults: [ReservedInstancesModificationResult]?
        /// The IDs of one or more Reserved Instances.
        public let reservedInstancesIds: [ReservedInstancesId]?
        /// A unique ID for the Reserved Instance modification.
        public let reservedInstancesModificationId: String?
        /// The status of the Reserved Instances modification request.
        public let status: String?
        /// The reason for the status.
        public let statusMessage: String?
        /// The time when the modification request was last updated.
        public let updateDate: TimeStamp?

        public init(clientToken: String? = nil, createDate: TimeStamp? = nil, effectiveDate: TimeStamp? = nil, modificationResults: [ReservedInstancesModificationResult]? = nil, reservedInstancesIds: [ReservedInstancesId]? = nil, reservedInstancesModificationId: String? = nil, status: String? = nil, statusMessage: String? = nil, updateDate: TimeStamp? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.effectiveDate = effectiveDate
            self.modificationResults = modificationResults
            self.reservedInstancesIds = reservedInstancesIds
            self.reservedInstancesModificationId = reservedInstancesModificationId
            self.status = status
            self.statusMessage = statusMessage
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case createDate = "createDate"
            case effectiveDate = "effectiveDate"
            case modificationResults = "modificationResultSet"
            case reservedInstancesIds = "reservedInstancesSet"
            case reservedInstancesModificationId = "reservedInstancesModificationId"
            case status = "status"
            case statusMessage = "statusMessage"
            case updateDate = "updateDate"
        }
    }

    public struct ReservedInstancesModificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure)
        ]

        /// The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
        public let reservedInstancesId: String?
        /// The target Reserved Instances configurations supplied as part of the modification request.
        public let targetConfiguration: ReservedInstancesConfiguration?

        public init(reservedInstancesId: String? = nil, targetConfiguration: ReservedInstancesConfiguration? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case targetConfiguration = "targetConfiguration"
        }
    }

    public struct ReservedInstancesOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Marketplace", location: .body(locationName: "marketplace"), required: false, type: .boolean), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "PricingDetails", location: .body(locationName: "pricingDetailsSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ReservedInstancesOfferingId", location: .body(locationName: "reservedInstancesOfferingId"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float)
        ]

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is true.
        public let marketplace: Bool?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The pricing details of the Reserved Instance offering.
        public let pricingDetails: [PricingDetail]?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
        public let reservedInstancesOfferingId: String?
        /// Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
        public let scope: Scope?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, fixedPrice: Float? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, marketplace: Bool? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, pricingDetails: [PricingDetail]? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesOfferingId: String? = nil, scope: Scope? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.marketplace = marketplace
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.pricingDetails = pricingDetails
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.scope = scope
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case fixedPrice = "fixedPrice"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "instanceType"
            case marketplace = "marketplace"
            case offeringClass = "offeringClass"
            case offeringType = "offeringType"
            case pricingDetails = "pricingDetailsSet"
            case productDescription = "productDescription"
            case recurringCharges = "recurringCharges"
            case reservedInstancesOfferingId = "reservedInstancesOfferingId"
            case scope = "scope"
            case usagePrice = "usagePrice"
        }
    }

    public struct ResetEbsDefaultKmsKeyIdRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct ResetEbsDefaultKmsKeyIdResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the default CMK for EBS encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct ResetFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string)
        ]

        /// The attribute.
        public let attribute: ResetFpgaImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(attribute: ResetFpgaImageAttributeName? = nil, dryRun: Bool? = nil, fpgaImageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct ResetFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ResetImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string)
        ]

        /// The attribute to reset (currently you can only reset the launch permission attribute).
        public let attribute: ResetImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(attribute: ResetImageAttributeName, dryRun: Bool? = nil, imageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct ResetInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string)
        ]

        /// The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck. To change an instance attribute, use ModifyInstanceAttribute. 
        public let attribute: InstanceAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(attribute: InstanceAttributeName, dryRun: Bool? = nil, instanceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
        }
    }

    public struct ResetNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The source/destination checking attribute. Resets the value to true.
        public let sourceDestCheck: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, sourceDestCheck: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ResetSnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]

        /// The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
        public let attribute: SnapshotAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String

        public init(attribute: SnapshotAttributeName, dryRun: Bool? = nil, snapshotId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct ResponseError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: LaunchTemplateErrorCode?
        /// The error message, if applicable.
        public let message: String?

        public init(code: LaunchTemplateErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ResponseLaunchTemplateData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMappingSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "CapacityReservationSpecification", location: .body(locationName: "capacityReservationSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "CpuOptions", location: .body(locationName: "cpuOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "CreditSpecification", location: .body(locationName: "creditSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecifications", location: .body(locationName: "elasticGpuSpecificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "elasticInferenceAcceleratorSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HibernationOptions", location: .body(locationName: "hibernationOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceMarketOptions", location: .body(locationName: "instanceMarketOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "licenseSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MetadataOptions", location: .body(locationName: "metadataOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamDiskId", location: .body(locationName: "ramDiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "tagSpecificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string)
        ]

        /// The block device mappings.
        public let blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptions?
        /// The credit option for CPU usage of the instance.
        public let creditSpecification: CreditSpecification?
        /// If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. 
        public let ebsOptimized: Bool?
        /// The elastic GPU specification.
        public let elasticGpuSpecifications: [ElasticGpuSpecificationResponse]?
        ///  The elastic inference accelerator for the instance. 
        public let elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]?
        /// Indicates whether an instance is configured for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptions?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification?
        /// The ID of the AMI that was used to launch the instance.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptions?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel, if applicable.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The license configurations.
        public let licenseSpecifications: [LaunchTemplateLicenseConfiguration]?
        /// The metadata options for the instance. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptions?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoring?
        /// The network interfaces.
        public let networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]?
        /// The placement of the instance.
        public let placement: LaunchTemplatePlacement?
        /// The ID of the RAM disk, if applicable.
        public let ramDiskId: String?
        /// The security group IDs.
        public let securityGroupIds: [String]?
        /// The security group names.
        public let securityGroups: [String]?
        /// The tags.
        public let tagSpecifications: [LaunchTemplateTagSpecification]?
        /// The user data for the instance. 
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse? = nil, cpuOptions: LaunchTemplateCpuOptions? = nil, creditSpecification: CreditSpecification? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecificationResponse]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]? = nil, hibernationOptions: LaunchTemplateHibernationOptions? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptions? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfiguration]? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptions? = nil, monitoring: LaunchTemplatesMonitoring? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]? = nil, placement: LaunchTemplatePlacement? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecification]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMappingSet"
            case capacityReservationSpecification = "capacityReservationSpecification"
            case cpuOptions = "cpuOptions"
            case creditSpecification = "creditSpecification"
            case disableApiTermination = "disableApiTermination"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecifications = "elasticGpuSpecificationSet"
            case elasticInferenceAccelerators = "elasticInferenceAcceleratorSet"
            case hibernationOptions = "hibernationOptions"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "instanceMarketOptions"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case licenseSpecifications = "licenseSet"
            case metadataOptions = "metadataOptions"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramDiskId = "ramDiskId"
            case securityGroupIds = "securityGroupIdSet"
            case securityGroups = "securityGroupSet"
            case tagSpecifications = "tagSpecificationSet"
            case userData = "userData"
        }
    }

    public struct RestoreAddressToClassicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct RestoreAddressToClassicResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The Elastic IP address.
        public let publicIp: String?
        /// The move status for the IP address.
        public let status: Status?

        public init(publicIp: String? = nil, status: Status? = nil) {
            self.publicIp = publicIp
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case status = "status"
        }
    }

    public struct RestoreManagedPrefixListVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentVersion", required: true, type: .long), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", required: true, type: .string), 
            AWSShapeMember(label: "PreviousVersion", required: true, type: .long)
        ]

        /// The current version number for the prefix list.
        public let currentVersion: Int64
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The version to restore.
        public let previousVersion: Int64

        public init(currentVersion: Int64, dryRun: Bool? = nil, prefixListId: String, previousVersion: Int64) {
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.previousVersion = previousVersion
        }

        private enum CodingKeys: String, CodingKey {
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case previousVersion = "PreviousVersion"
        }
    }

    public struct RestoreManagedPrefixListVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixList", location: .body(locationName: "prefixList"), required: false, type: .structure)
        ]

        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct RevokeClientVpnIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessGroupId", required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RevokeAllGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetNetworkCidr", required: true, type: .string)
        ]

        /// The ID of the Active Directory group for which to revoke access. 
        public let accessGroupId: String?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether access should be revoked for all clients.
        public let revokeAllGroups: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being removed.
        public let targetNetworkCidr: String

        public init(accessGroupId: String? = nil, clientVpnEndpointId: String, dryRun: Bool? = nil, revokeAllGroups: Bool? = nil, targetNetworkCidr: String) {
            self.accessGroupId = accessGroupId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.revokeAllGroups = revokeAllGroups
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case revokeAllGroups = "RevokeAllGroups"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct RevokeClientVpnIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure)
        ]

        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct RevokeSecurityGroupEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer)
        ]

        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String
        /// The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: [IpPermission]?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case groupId = "groupId"
            case ipPermissions = "ipPermissions"
            case ipProtocol = "ipProtocol"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case toPort = "toPort"
        }
    }

    public struct RevokeSecurityGroupIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer)
        ]

        /// The CIDR IP address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types.
        public let fromPort: Int?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all.
        public let ipProtocol: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
        }
    }

    public struct Route: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CarrierGatewayId", location: .body(locationName: "carrierGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", location: .body(locationName: "destinationPrefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "LocalGatewayId", location: .body(locationName: "localGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "Origin", location: .body(locationName: "origin"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR block used for the destination match.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match.
        public let destinationIpv6CidrBlock: String?
        /// The prefix of the AWS service.
        public let destinationPrefixListId: String?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of a gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.  
        public let origin: RouteOrigin?
        /// The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
        public let state: RouteState?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, origin: RouteOrigin? = nil, state: RouteState? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "carrierGatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "destinationPrefixListId"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case instanceOwnerId = "instanceOwnerId"
            case localGatewayId = "localGatewayId"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case origin = "origin"
            case state = "state"
            case transitGatewayId = "transitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct RouteTable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PropagatingVgws", location: .body(locationName: "propagatingVgwSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The associations between the route table and one or more subnets or a gateway.
        public let associations: [RouteTableAssociation]?
        /// The ID of the AWS account that owns the route table.
        public let ownerId: String?
        /// Any virtual private gateway (VGW) propagating routes.
        public let propagatingVgws: [PropagatingVgw]?
        /// The routes in the route table.
        public let routes: [Route]?
        /// The ID of the route table.
        public let routeTableId: String?
        /// Any tags assigned to the route table.
        public let tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(associations: [RouteTableAssociation]? = nil, ownerId: String? = nil, propagatingVgws: [PropagatingVgw]? = nil, routes: [Route]? = nil, routeTableId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.ownerId = ownerId
            self.propagatingVgws = propagatingVgws
            self.routes = routes
            self.routeTableId = routeTableId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case ownerId = "ownerId"
            case propagatingVgws = "propagatingVgwSet"
            case routes = "routeSet"
            case routeTableId = "routeTableId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct RouteTableAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationState", location: .body(locationName: "associationState"), required: false, type: .structure), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Main", location: .body(locationName: "main"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableAssociationId", location: .body(locationName: "routeTableAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// Indicates whether this is the main route table.
        public let main: Bool?
        /// The ID of the association.
        public let routeTableAssociationId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the subnet. A subnet ID is not returned for an implicit association.
        public let subnetId: String?

        public init(associationState: RouteTableAssociationState? = nil, gatewayId: String? = nil, main: Bool? = nil, routeTableAssociationId: String? = nil, routeTableId: String? = nil, subnetId: String? = nil) {
            self.associationState = associationState
            self.gatewayId = gatewayId
            self.main = main
            self.routeTableAssociationId = routeTableAssociationId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState = "associationState"
            case gatewayId = "gatewayId"
            case main = "main"
            case routeTableAssociationId = "routeTableAssociationId"
            case routeTableId = "routeTableId"
            case subnetId = "subnetId"
        }
    }

    public struct RouteTableAssociationState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The state of the association.
        public let state: RouteTableAssociationStateCode?
        /// The status message, if applicable.
        public let statusMessage: String?

        public init(state: RouteTableAssociationStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct RunInstancesMonitoringEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: true, type: .boolean)
        ]

        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool

        public init(enabled: Bool) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct RunInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .list, encoding: .list(member:"BlockDeviceMapping")), 
            AWSShapeMember(label: "CapacityReservationSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "CpuOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CreditSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecification", required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "ElasticInferenceAccelerator"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "HibernationOptions", required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceMarketOptions", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "LicenseSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MaxCount", required: true, type: .integer), 
            AWSShapeMember(label: "MetadataOptions", required: false, type: .structure), 
            AWSShapeMember(label: "MinCount", required: true, type: .integer), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterface"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .list, encoding: .list(member:"SecurityGroup")), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UserData", required: false, type: .string)
        ]

        /// Reserved.
        public let additionalInfo: String?
        /// The block device mapping entries.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: CapacityReservationSpecification?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The CPU options for the instance. For more information, see Optimizing CPU options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: CpuOptionsRequest?
        /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use  ModifyInstanceCreditSpecification. For more information, see Burstable performance instances in the Amazon Elastic Compute Cloud User Guide. Default: standard (T2 instances) or unlimited (T3/T3a instances)
        public let creditSpecification: CreditSpecificationRequest?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false 
        public let disableApiTermination: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see  Amazon EC2 Elastic GPUs in the Amazon Elastic Compute Cloud User Guide.
        public let elasticGpuSpecification: [ElasticGpuSpecification]?
        /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request.
        public let elasticInferenceAccelerators: [ElasticInferenceAccelerator]?
        /// Indicates whether an instance is enabled for hibernation. For more information, see Hibernate your instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: HibernationOptionsRequest?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let instanceMarketOptions: InstanceMarketOptionsRequest?
        /// The instance type. For more information, see Instance types in the Amazon Elastic Compute Cloud User Guide. Default: m1.small 
        public let instanceType: InstanceType?
        /// [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        public let ipv6AddressCount: Int?
        /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        public let ipv6Addresses: [InstanceIpv6Address]?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
        public let keyName: String?
        /// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The license configurations.
        public let licenseSpecifications: [LicenseConfigurationRequest]?
        /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
        public let maxCount: Int
        /// The metadata options for the instance. For more information, see Instance metadata and user data.
        public let metadataOptions: InstanceMetadataOptionsRequest?
        /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
        public let minCount: Int
        /// Specifies whether detailed monitoring is enabled for the instance.
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement for the instance.
        public let placement: Placement?
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request.
        public let privateIpAddress: String?
        /// The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let ramdiskId: String?
        /// The IDs of the security groups. You can create a security group using CreateSecurityGroup. If you specify a network interface, you must specify any security groups as part of the network interface.
        public let securityGroupIds: [String]?
        /// [EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead. If you specify a network interface, you must specify any security groups as part of the network interface. Default: Amazon EC2 uses the default security group.
        public let securityGroups: [String]?
        /// [EC2-VPC] The ID of the subnet to launch the instance into. If you specify a network interface, you must specify any subnets as part of the network interface.
        public let subnetId: String?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        public let tagSpecifications: [TagSpecification]?
        /// The user data to make available to the instance. For more information, see Running commands on your Linux instance at launch (Linux) and Adding User Data (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public let userData: String?

        public init(additionalInfo: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, capacityReservationSpecification: CapacityReservationSpecification? = nil, clientToken: String? = RunInstancesRequest.idempotencyToken(), cpuOptions: CpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiTermination: Bool? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecification: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [ElasticInferenceAccelerator]? = nil, hibernationOptions: HibernationOptionsRequest? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceType: InstanceType? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, kernelId: String? = nil, keyName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, licenseSpecifications: [LicenseConfigurationRequest]? = nil, maxCount: Int, metadataOptions: InstanceMetadataOptionsRequest? = nil, minCount: Int, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: Placement? = nil, privateIpAddress: String? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil, userData: String? = nil) {
            self.additionalInfo = additionalInfo
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecification = elasticGpuSpecification
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTemplate = launchTemplate
            self.licenseSpecifications = licenseSpecifications
            self.maxCount = maxCount
            self.metadataOptions = metadataOptions
            self.minCount = minCount
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.privateIpAddress = privateIpAddress
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case clientToken = "clientToken"
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiTermination = "disableApiTermination"
            case dryRun = "dryRun"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecification = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceType = "InstanceType"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case launchTemplate = "LaunchTemplate"
            case licenseSpecifications = "LicenseSpecification"
            case maxCount = "MaxCount"
            case metadataOptions = "MetadataOptions"
            case minCount = "MinCount"
            case monitoring = "Monitoring"
            case networkInterfaces = "networkInterface"
            case placement = "Placement"
            case privateIpAddress = "privateIpAddress"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RunScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "LaunchSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "ScheduledInstanceId", required: true, type: .string)
        ]

        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of instances. Default: 1
        public let instanceCount: Int?
        /// The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.
        public let launchSpecification: ScheduledInstancesLaunchSpecification
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String

        public init(clientToken: String? = RunScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, instanceCount: Int? = nil, launchSpecification: ScheduledInstancesLaunchSpecification, scheduledInstanceId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.launchSpecification = launchSpecification
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCount = "InstanceCount"
            case launchSpecification = "LaunchSpecification"
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct RunScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIdSet", location: .body(locationName: "instanceIdSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The IDs of the newly launched instances.
        public let instanceIdSet: [String]?

        public init(instanceIdSet: [String]? = nil) {
            self.instanceIdSet = instanceIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIdSet = "instanceIdSet"
        }
    }

    public struct S3Storage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AWSAccessKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "UploadPolicy", location: .body(locationName: "uploadPolicy"), required: false, type: .blob), 
            AWSShapeMember(label: "UploadPolicySignature", location: .body(locationName: "uploadPolicySignature"), required: false, type: .string)
        ]

        /// The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Managing AWS Access Keys.
        public let aWSAccessKeyId: String?
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let bucket: String?
        /// The beginning of the file name of the AMI.
        public let prefix: String?
        /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        public let uploadPolicy: Data?
        /// The signature of the JSON document.
        public let uploadPolicySignature: String?

        public init(aWSAccessKeyId: String? = nil, bucket: String? = nil, prefix: String? = nil, uploadPolicy: Data? = nil, uploadPolicySignature: String? = nil) {
            self.aWSAccessKeyId = aWSAccessKeyId
            self.bucket = bucket
            self.prefix = prefix
            self.uploadPolicy = uploadPolicy
            self.uploadPolicySignature = uploadPolicySignature
        }

        private enum CodingKeys: String, CodingKey {
            case aWSAccessKeyId = "AWSAccessKeyId"
            case bucket = "bucket"
            case prefix = "prefix"
            case uploadPolicy = "uploadPolicy"
            case uploadPolicySignature = "uploadPolicySignature"
        }
    }

    public struct ScheduledInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "NextSlotStartTime", location: .body(locationName: "nextSlotStartTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousSlotEndTime", location: .body(locationName: "previousSlotEndTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure), 
            AWSShapeMember(label: "ScheduledInstanceId", location: .body(locationName: "scheduledInstanceId"), required: false, type: .string), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "TermEndDate", location: .body(locationName: "termEndDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TermStartDate", location: .body(locationName: "termStartDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The date when the Scheduled Instance was purchased.
        public let createDate: TimeStamp?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The number of instances.
        public let instanceCount: Int?
        /// The instance type.
        public let instanceType: String?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The time for the next schedule to start.
        public let nextSlotStartTime: TimeStamp?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The time that the previous schedule ended or will end.
        public let previousSlotEndTime: TimeStamp?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The end date for the Scheduled Instance.
        public let termEndDate: TimeStamp?
        /// The start date for the Scheduled Instance.
        public let termStartDate: TimeStamp?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, createDate: TimeStamp? = nil, hourlyPrice: String? = nil, instanceCount: Int? = nil, instanceType: String? = nil, networkPlatform: String? = nil, nextSlotStartTime: TimeStamp? = nil, platform: String? = nil, previousSlotEndTime: TimeStamp? = nil, recurrence: ScheduledInstanceRecurrence? = nil, scheduledInstanceId: String? = nil, slotDurationInHours: Int? = nil, termEndDate: TimeStamp? = nil, termStartDate: TimeStamp? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.createDate = createDate
            self.hourlyPrice = hourlyPrice
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.networkPlatform = networkPlatform
            self.nextSlotStartTime = nextSlotStartTime
            self.platform = platform
            self.previousSlotEndTime = previousSlotEndTime
            self.recurrence = recurrence
            self.scheduledInstanceId = scheduledInstanceId
            self.slotDurationInHours = slotDurationInHours
            self.termEndDate = termEndDate
            self.termStartDate = termStartDate
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case createDate = "createDate"
            case hourlyPrice = "hourlyPrice"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case networkPlatform = "networkPlatform"
            case nextSlotStartTime = "nextSlotStartTime"
            case platform = "platform"
            case previousSlotEndTime = "previousSlotEndTime"
            case recurrence = "recurrence"
            case scheduledInstanceId = "scheduledInstanceId"
            case slotDurationInHours = "slotDurationInHours"
            case termEndDate = "termEndDate"
            case termStartDate = "termStartDate"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
        }
    }

    public struct ScheduledInstanceAvailability: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "FirstSlotStartTime", location: .body(locationName: "firstSlotStartTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "MaxTermDurationInDays", location: .body(locationName: "maxTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "MinTermDurationInDays", location: .body(locationName: "minTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "PurchaseToken", location: .body(locationName: "purchaseToken"), required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The number of available instances.
        public let availableInstanceCount: Int?
        /// The time period for the first schedule to start.
        public let firstSlotStartTime: TimeStamp?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
        public let instanceType: String?
        /// The maximum term. The only possible value is 365 days.
        public let maxTermDurationInDays: Int?
        /// The minimum term. The only possible value is 365 days.
        public let minTermDurationInDays: Int?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The purchase token. This token expires in two hours.
        public let purchaseToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, availableInstanceCount: Int? = nil, firstSlotStartTime: TimeStamp? = nil, hourlyPrice: String? = nil, instanceType: String? = nil, maxTermDurationInDays: Int? = nil, minTermDurationInDays: Int? = nil, networkPlatform: String? = nil, platform: String? = nil, purchaseToken: String? = nil, recurrence: ScheduledInstanceRecurrence? = nil, slotDurationInHours: Int? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availableInstanceCount = availableInstanceCount
            self.firstSlotStartTime = firstSlotStartTime
            self.hourlyPrice = hourlyPrice
            self.instanceType = instanceType
            self.maxTermDurationInDays = maxTermDurationInDays
            self.minTermDurationInDays = minTermDurationInDays
            self.networkPlatform = networkPlatform
            self.platform = platform
            self.purchaseToken = purchaseToken
            self.recurrence = recurrence
            self.slotDurationInHours = slotDurationInHours
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availableInstanceCount = "availableInstanceCount"
            case firstSlotStartTime = "firstSlotStartTime"
            case hourlyPrice = "hourlyPrice"
            case instanceType = "instanceType"
            case maxTermDurationInDays = "maxTermDurationInDays"
            case minTermDurationInDays = "minTermDurationInDays"
            case networkPlatform = "networkPlatform"
            case platform = "platform"
            case purchaseToken = "purchaseToken"
            case recurrence = "recurrence"
            case slotDurationInHours = "slotDurationInHours"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
        }
    }

    public struct ScheduledInstanceRecurrence: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .string), 
            AWSShapeMember(label: "Interval", location: .body(locationName: "interval"), required: false, type: .integer), 
            AWSShapeMember(label: "OccurrenceDaySet", location: .body(locationName: "occurrenceDaySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", location: .body(locationName: "occurrenceRelativeToEnd"), required: false, type: .boolean), 
            AWSShapeMember(label: "OccurrenceUnit", location: .body(locationName: "occurrenceUnit"), required: false, type: .string)
        ]

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
        public let occurrenceDaySet: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDaySet: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDaySet = occurrenceDaySet
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "frequency"
            case interval = "interval"
            case occurrenceDaySet = "occurrenceDaySet"
            case occurrenceRelativeToEnd = "occurrenceRelativeToEnd"
            case occurrenceUnit = "occurrenceUnit"
        }
    }

    public struct ScheduledInstanceRecurrenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: false, type: .string), 
            AWSShapeMember(label: "Interval", required: false, type: .integer), 
            AWSShapeMember(label: "OccurrenceDays", location: .body(locationName: "OccurrenceDay"), required: false, type: .list, encoding: .list(member:"OccurenceDay")), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", required: false, type: .boolean), 
            AWSShapeMember(label: "OccurrenceUnit", required: false, type: .string)
        ]

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of Frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
        public let occurrenceDays: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDays: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDays = occurrenceDays
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
            case interval = "Interval"
            case occurrenceDays = "OccurrenceDay"
            case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
            case occurrenceUnit = "OccurrenceUnit"
        }
    }

    public struct ScheduledInstancesBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Ebs", required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", required: false, type: .string)
        ]

        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to set up EBS volumes automatically when the instance is launched.
        public let ebs: ScheduledInstancesEbs?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: ScheduledInstancesEbs? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct ScheduledInstancesEbs: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string)
        ]

        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for an io1 or io2 volume, with a maximum ratio of 50 IOPS/GiB for io1, and 500 IOPS/GiB for io2. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. This parameter is valid only for Provisioned IOPS SSD (io1 and io2) volumes.
        public let iops: Int?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int?
        /// The volume type. gp2 for General Purpose SSD, io1 or  io2 for Provisioned IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic. Default: gp2 
        public let volumeType: String?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case snapshotId = "SnapshotId"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct ScheduledInstancesIamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN).
        public let arn: String?
        /// The name.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct ScheduledInstancesIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]

        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct ScheduledInstancesLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .list, encoding: .list(member:"BlockDeviceMapping")), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .list, encoding: .list(member:"NetworkInterface")), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "UserData", required: false, type: .string)
        ]

        /// The block device mapping entries.
        public let blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// The instance type.
        public let instanceType: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: ScheduledInstancesMonitoring?
        /// The network interfaces.
        public let networkInterfaces: [ScheduledInstancesNetworkInterface]?
        /// The placement information.
        public let placement: ScheduledInstancesPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of the security groups.
        public let securityGroupIds: [String]?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The base64-encoded MIME user data.
        public let userData: String?

        public init(blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: ScheduledInstancesIamInstanceProfile? = nil, imageId: String, instanceType: String? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: ScheduledInstancesMonitoring? = nil, networkInterfaces: [ScheduledInstancesNetworkInterface]? = nil, placement: ScheduledInstancesPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case ebsOptimized = "EbsOptimized"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "SubnetId"
            case userData = "UserData"
        }
    }

    public struct ScheduledInstancesMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]

        /// Indicates whether monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ScheduledInstancesNetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DeviceIndex", required: false, type: .integer), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "Group"), required: false, type: .list, encoding: .list(member:"SecurityGroupId")), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .list, encoding: .list(member:"Ipv6Address")), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddressConfigs", location: .body(locationName: "PrivateIpAddressConfig"), required: false, type: .list, encoding: .list(member:"PrivateIpAddressConfigSet")), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]

        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether to delete the interface when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The description.
        public let description: String?
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of the security groups.
        public let groups: [String]?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public let ipv6AddressCount: Int?
        /// The specific IPv6 addresses from the subnet range.
        public let ipv6Addresses: [ScheduledInstancesIpv6Address]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses.
        public let privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]?
        /// The number of secondary private IPv4 addresses.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [ScheduledInstancesIpv6Address]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case groups = "Group"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddressConfigs = "PrivateIpAddressConfig"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct ScheduledInstancesPlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
        }
    }

    public struct ScheduledInstancesPrivateIpAddressConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string)
        ]

        /// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
        public let primary: Bool?
        /// The IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "Primary"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct SearchLocalGatewayRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: true, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "LocalGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        public let filters: [Filter]
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter], localGatewayRouteTableId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct SearchLocalGatewayRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the routes.
        public let routes: [LocalGatewayRoute]?

        public init(nextToken: String? = nil, routes: [LocalGatewayRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routes = "routeSet"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", required: false, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    group-ip-address - The IP address of the transit gateway multicast group.    is-group-member - The resource is a group member. Valid values are true | false.    is-group-source - The resource is a group source. Valid values are true | false.    member-type - The member type. Valid values are igmp | static.    resource-id - The ID of the resource.    resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.    source-type - The source type. Valid values are igmp | static.    state - The state of the subnet association. Valid values are associated | associated | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.  
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MulticastGroups", location: .body(locationName: "multicastGroups"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]

        /// Information about the transit gateway multicast group.
        public let multicastGroups: [TransitGatewayMulticastGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastGroups: [TransitGatewayMulticastGroup]? = nil, nextToken: String? = nil) {
            self.multicastGroups = multicastGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastGroups = "multicastGroups"
            case nextToken = "nextToken"
        }
    }

    public struct SearchTransitGatewayRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: true, type: .list, encoding: .list(member:"Filter")), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    attachment.resource-type - The attachment resource type. Valid values are vpc | vpn | direct-connect-gateway | peering.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    type - The type of route (propagated | static).  
        public let filters: [Filter]
        /// The maximum number of routes to return.
        public let maxResults: Int?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter], maxResults: Int? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try validate(self.maxResults, name:"maxResults", parent: name, max: 1000)
            try validate(self.maxResults, name:"maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct SearchTransitGatewayRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalRoutesAvailable", location: .body(locationName: "additionalRoutesAvailable"), required: false, type: .boolean), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether there are additional routes available.
        public let additionalRoutesAvailable: Bool?
        /// Information about the routes.
        public let routes: [TransitGatewayRoute]?

        public init(additionalRoutesAvailable: Bool? = nil, routes: [TransitGatewayRoute]? = nil) {
            self.additionalRoutesAvailable = additionalRoutesAvailable
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case additionalRoutesAvailable = "additionalRoutesAvailable"
            case routes = "routeSet"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "groupDescription"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IpPermissionsEgress", location: .body(locationName: "ipPermissionsEgress"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// A description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// The inbound rules associated with the security group.
        public let ipPermissions: [IpPermission]?
        /// [VPC only] The outbound rules associated with the security group.
        public let ipPermissionsEgress: [IpPermission]?
        /// The AWS account ID of the owner of the security group.
        public let ownerId: String?
        /// Any tags assigned to the security group.
        public let tags: [Tag]?
        /// [VPC only] The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipPermissionsEgress: [IpPermission]? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipPermissionsEgress = ipPermissionsEgress
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "groupDescription"
            case groupId = "groupId"
            case groupName = "groupName"
            case ipPermissions = "ipPermissions"
            case ipPermissionsEgress = "ipPermissionsEgress"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct SecurityGroupIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]

        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct SecurityGroupReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "ReferencingVpcId", location: .body(locationName: "referencingVpcId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// The ID of your security group.
        public let groupId: String?
        /// The ID of the VPC with the referencing security group.
        public let referencingVpcId: String?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(groupId: String? = nil, referencingVpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.groupId = groupId
            self.referencingVpcId = referencingVpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case referencingVpcId = "referencingVpcId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct SendDiagnosticInterruptRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ServiceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", location: .body(locationName: "acceptanceRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "BaseEndpointDnsNames", location: .body(locationName: "baseEndpointDnsNameSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ManagesVpcEndpoints", location: .body(locationName: "managesVpcEndpoints"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkLoadBalancerArns", location: .body(locationName: "networkLoadBalancerArnSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsNameConfiguration", location: .body(locationName: "privateDnsNameConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceState", location: .body(locationName: "serviceState"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        public let availabilityZones: [String]?
        /// The DNS names for the service.
        public let baseEndpointDnsNames: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
        public let networkLoadBalancerArns: [String]?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// Information about the endpoint service private DNS name configuration.
        public let privateDnsNameConfiguration: PrivateDnsNameConfiguration?
        /// The ID of the service.
        public let serviceId: String?
        /// The name of the service.
        public let serviceName: String?
        /// The service state.
        public let serviceState: ServiceState?
        /// The type of service.
        public let serviceType: [ServiceTypeDetail]?
        /// Any tags assigned to the service.
        public let tags: [Tag]?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, managesVpcEndpoints: Bool? = nil, networkLoadBalancerArns: [String]? = nil, privateDnsName: String? = nil, privateDnsNameConfiguration: PrivateDnsNameConfiguration? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceState: ServiceState? = nil, serviceType: [ServiceTypeDetail]? = nil, tags: [Tag]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.managesVpcEndpoints = managesVpcEndpoints
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.privateDnsNameConfiguration = privateDnsNameConfiguration
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceState = serviceState
            self.serviceType = serviceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "acceptanceRequired"
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case managesVpcEndpoints = "managesVpcEndpoints"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case privateDnsName = "privateDnsName"
            case privateDnsNameConfiguration = "privateDnsNameConfiguration"
            case serviceId = "serviceId"
            case serviceName = "serviceName"
            case serviceState = "serviceState"
            case serviceType = "serviceType"
            case tags = "tagSet"
        }
    }

    public struct ServiceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptanceRequired", location: .body(locationName: "acceptanceRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "BaseEndpointDnsNames", location: .body(locationName: "baseEndpointDnsNameSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ManagesVpcEndpoints", location: .body(locationName: "managesVpcEndpoints"), required: false, type: .boolean), 
            AWSShapeMember(label: "Owner", location: .body(locationName: "owner"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsNameVerificationState", location: .body(locationName: "privateDnsNameVerificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcEndpointPolicySupported", location: .body(locationName: "vpcEndpointPolicySupported"), required: false, type: .boolean)
        ]

        /// Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        public let availabilityZones: [String]?
        /// The DNS names for the service.
        public let baseEndpointDnsNames: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The AWS account ID of the service owner.
        public let owner: String?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not verified.
        public let privateDnsNameVerificationState: DnsNameState?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The Amazon Resource Name (ARN) of the service.
        public let serviceName: String?
        /// The type of service.
        public let serviceType: [ServiceTypeDetail]?
        /// Any tags assigned to the service.
        public let tags: [Tag]?
        /// Indicates whether the service supports endpoint policies.
        public let vpcEndpointPolicySupported: Bool?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, managesVpcEndpoints: Bool? = nil, owner: String? = nil, privateDnsName: String? = nil, privateDnsNameVerificationState: DnsNameState? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceType: [ServiceTypeDetail]? = nil, tags: [Tag]? = nil, vpcEndpointPolicySupported: Bool? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.managesVpcEndpoints = managesVpcEndpoints
            self.owner = owner
            self.privateDnsName = privateDnsName
            self.privateDnsNameVerificationState = privateDnsNameVerificationState
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceType = serviceType
            self.tags = tags
            self.vpcEndpointPolicySupported = vpcEndpointPolicySupported
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "acceptanceRequired"
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case managesVpcEndpoints = "managesVpcEndpoints"
            case owner = "owner"
            case privateDnsName = "privateDnsName"
            case privateDnsNameVerificationState = "privateDnsNameVerificationState"
            case serviceId = "serviceId"
            case serviceName = "serviceName"
            case serviceType = "serviceType"
            case tags = "tagSet"
            case vpcEndpointPolicySupported = "vpcEndpointPolicySupported"
        }
    }

    public struct ServiceTypeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .enum)
        ]

        /// The type of service.
        public let serviceType: ServiceType?

        public init(serviceType: ServiceType? = nil) {
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceType = "serviceType"
        }
    }

    public struct SlotDateTimeRangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EarliestTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "LatestTime", required: true, type: .timestamp)
        ]

        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp
        /// The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
        public let latestTime: TimeStamp

        public init(earliestTime: TimeStamp, latestTime: TimeStamp) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct SlotStartTimeRangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EarliestTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestTime", required: false, type: .timestamp)
        ]

        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp?
        /// The latest date and time, in UTC, for the Scheduled Instance to start.
        public let latestTime: TimeStamp?

        public init(earliestTime: TimeStamp? = nil, latestTime: TimeStamp? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct Snapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataEncryptionKeyId", location: .body(locationName: "dataEncryptionKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "StateMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer)
        ]

        /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by DescribeSnapshots.
        public let dataEncryptionKeyId: String?
        /// The description for the snapshot.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
        public let kmsKeyId: String?
        /// The AWS owner alias, as maintained by Amazon. The possible values are: amazon | self | all | aws-marketplace | microsoft. This AWS owner alias is not to be confused with the user-configured AWS account alias, which is set from the IAM console.
        public let ownerAlias: String?
        /// The AWS account ID of the EBS snapshot owner.
        public let ownerId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        public let snapshotId: String?
        /// The time stamp when the snapshot was initiated.
        public let startTime: TimeStamp?
        /// The snapshot state.
        public let state: SnapshotState?
        /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by DescribeSnapshots.
        public let stateMessage: String?
        /// Any tags assigned to the snapshot.
        public let tags: [Tag]?
        /// The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
        public let volumeId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?

        public init(dataEncryptionKeyId: String? = nil, description: String? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, startTime: TimeStamp? = nil, state: SnapshotState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.dataEncryptionKeyId = dataEncryptionKeyId
            self.description = description
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case dataEncryptionKeyId = "dataEncryptionKeyId"
            case description = "description"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case startTime = "startTime"
            case state = "status"
            case stateMessage = "statusMessage"
            case tags = "tagSet"
            case volumeId = "volumeId"
            case volumeSize = "volumeSize"
        }
    }

    public struct SnapshotDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure)
        ]

        /// A description for the snapshot.
        public let description: String?
        /// The block device mapping for the snapshot.
        public let deviceName: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The percentage of progress for the task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status of the snapshot creation.
        public let status: String?
        /// A detailed status message for the snapshot creation.
        public let statusMessage: String?
        /// The URL used to access the disk image.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, deviceName: String? = nil, diskImageSize: Double? = nil, format: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.diskImageSize = diskImageSize
            self.format = format
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case deviceName = "deviceName"
            case diskImageSize = "diskImageSize"
            case format = "format"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case status = "status"
            case statusMessage = "statusMessage"
            case url = "url"
            case userBucket = "userBucket"
        }
    }

    public struct SnapshotDiskContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", required: false, type: .structure)
        ]

        /// The description of the disk image being imported.
        public let description: String?
        /// The format of the disk image being imported. Valid values: VHD | VMDK 
        public let format: String?
        /// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, format: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.format = format
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case format = "Format"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct SnapshotInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer)
        ]

        /// Description specified by the CreateSnapshotRequest that has been applied to all snapshots.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// Account id used when creating this snapshot.
        public let ownerId: String?
        /// Progress this snapshot has made towards completing.
        public let progress: String?
        /// Snapshot id that can be used to describe this snapshot.
        public let snapshotId: String?
        /// Time this snapshot was started. This is the same for all snapshots initiated by the same request.
        public let startTime: TimeStamp?
        /// Current state of the snapshot.
        public let state: SnapshotState?
        /// Tags associated with this snapshot.
        public let tags: [Tag]?
        /// Source volume from which this snapshot was created.
        public let volumeId: String?
        /// Size of the volume from which this snapshot was created.
        public let volumeSize: Int?

        public init(description: String? = nil, encrypted: Bool? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, startTime: TimeStamp? = nil, state: SnapshotState? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.description = description
            self.encrypted = encrypted
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.state = state
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case encrypted = "encrypted"
            case ownerId = "ownerId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case startTime = "startTime"
            case state = "state"
            case tags = "tagSet"
            case volumeId = "volumeId"
            case volumeSize = "volumeSize"
        }
    }

    public struct SnapshotTaskDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure)
        ]

        /// The description of the snapshot.
        public let description: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
        public let kmsKeyId: String?
        /// The percentage of completion for the import snapshot task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status for the import snapshot task.
        public let status: String?
        /// A detailed status message for the import snapshot task.
        public let statusMessage: String?
        /// The URL of the disk image from which the snapshot is created.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, diskImageSize: Double? = nil, encrypted: Bool? = nil, format: String? = nil, kmsKeyId: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.diskImageSize = diskImageSize
            self.encrypted = encrypted
            self.format = format
            self.kmsKeyId = kmsKeyId
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImageSize = "diskImageSize"
            case encrypted = "encrypted"
            case format = "format"
            case kmsKeyId = "kmsKeyId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case status = "status"
            case statusMessage = "statusMessage"
            case url = "url"
            case userBucket = "userBucket"
        }
    }

    public struct SpotDatafeedSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// The Amazon S3 bucket where the Spot Instance data feed is located.
        public let bucket: String?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The AWS account ID of the account.
        public let ownerId: String?
        /// The prefix that is prepended to data feed files.
        public let prefix: String?
        /// The state of the Spot Instance data feed subscription.
        public let state: DatafeedSubscriptionState?

        public init(bucket: String? = nil, fault: SpotInstanceStateFault? = nil, ownerId: String? = nil, prefix: String? = nil, state: DatafeedSubscriptionState? = nil) {
            self.bucket = bucket
            self.fault = fault
            self.ownerId = ownerId
            self.prefix = prefix
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case fault = "fault"
            case ownerId = "ownerId"
            case prefix = "prefix"
            case state = "state"
        }
    }

    public struct SpotFleetLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "tagSpecificationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double)
        ]

        /// Deprecated.
        public let addressingType: String?
        /// One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: SpotFleetMonitoring?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.
        public let ramdiskId: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: [GroupIdentifier]?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of WeightedCapacity.
        public let spotPrice: String?
        /// The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
        public let subnetId: String?
        /// The tags to apply during creation.
        public let tagSpecifications: [SpotFleetTagSpecification]?
        /// The Base64-encoded user data that instances use when starting up.
        public let userData: String?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
        public let weightedCapacity: Double?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: SpotFleetMonitoring? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, spotPrice: String? = nil, subnetId: String? = nil, tagSpecifications: [SpotFleetTagSpecification]? = nil, userData: String? = nil, weightedCapacity: Double? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroups = "groupSet"
            case spotPrice = "spotPrice"
            case subnetId = "subnetId"
            case tagSpecifications = "tagSpecificationSet"
            case userData = "userData"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct SpotFleetMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: false, type: .boolean)
        ]

        /// Enables monitoring for the instance. Default: false 
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct SpotFleetRequestConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityStatus", location: .body(locationName: "activityStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestState", location: .body(locationName: "spotFleetRequestState"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The progress of the Spot Fleet request. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot Instances are terminating.
        public let activityStatus: ActivityStatus?
        /// The creation date and time of the request.
        public let createTime: TimeStamp?
        /// The configuration of the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The state of the Spot Fleet request.
        public let spotFleetRequestState: BatchState?
        /// The tags for a Spot Fleet resource.
        public let tags: [Tag]?

        public init(activityStatus: ActivityStatus? = nil, createTime: TimeStamp? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData? = nil, spotFleetRequestId: String? = nil, spotFleetRequestState: BatchState? = nil, tags: [Tag]? = nil) {
            self.activityStatus = activityStatus
            self.createTime = createTime
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.spotFleetRequestId = spotFleetRequestId
            self.spotFleetRequestState = spotFleetRequestState
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case createTime = "createTime"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
            case spotFleetRequestId = "spotFleetRequestId"
            case spotFleetRequestState = "spotFleetRequestState"
            case tags = "tagSet"
        }
    }

    public struct SpotFleetRequestConfigData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "FulfilledCapacity", location: .body(locationName: "fulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "IamFleetRole", location: .body(locationName: "iamFleetRole"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstancePoolsToUseCount", location: .body(locationName: "instancePoolsToUseCount"), required: false, type: .integer), 
            AWSShapeMember(label: "LaunchSpecifications", location: .body(locationName: "launchSpecifications"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "launchTemplateConfigs"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LoadBalancersConfig", location: .body(locationName: "loadBalancersConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "OnDemandAllocationStrategy", location: .body(locationName: "onDemandAllocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "OnDemandFulfilledCapacity", location: .body(locationName: "onDemandFulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "OnDemandMaxTotalPrice", location: .body(locationName: "onDemandMaxTotalPrice"), required: false, type: .string), 
            AWSShapeMember(label: "OnDemandTargetCapacity", location: .body(locationName: "onDemandTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", location: .body(locationName: "replaceUnhealthyInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotMaxTotalPrice", location: .body(locationName: "spotMaxTotalPrice"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: true, type: .integer), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", location: .body(locationName: "terminateInstancesWithExpiration"), required: false, type: .boolean), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp)
        ]

        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request. If the allocation strategy is lowestPrice, Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, Spot Fleet launches instances from all the Spot Instance pools that you specify. If the allocation strategy is capacityOptimized, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
        public let allocationStrategy: AllocationStrategy?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
        public let fulfilledCapacity: Double?
        /// The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see Spot Fleet prerequisites in the Amazon EC2 User Guide for Linux Instances. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using CancelSpotFleetRequests or when the Spot Fleet request expires, if you set TerminateInstancesWithExpiration.
        public let iamFleetRole: String
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int?
        /// The launch specifications for the Spot Fleet request. If you specify LaunchSpecifications, you can't specify LaunchTemplateConfigs. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        public let launchSpecifications: [SpotFleetLaunchSpecification]?
        /// The launch template and overrides. If you specify LaunchTemplateConfigs, you can't specify LaunchSpecifications. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        public let launchTemplateConfigs: [LaunchTemplateConfig]?
        /// One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
        public let loadBalancersConfig: LoadBalancersConfig?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
        public let onDemandAllocationStrategy: OnDemandAllocationStrategy?
        /// The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
        public let onDemandFulfilledCapacity: Double?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the onDemandMaxTotalPrice parameter, the spotMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public let onDemandMaxTotalPrice: String?
        /// The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let onDemandTargetCapacity: Int?
        /// Indicates whether Spot Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. You can use the spotdMaxTotalPrice parameter, the onDemandMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public let spotMaxTotalPrice: String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Fleet request on creation. The value for ResourceType must be spot-fleet-request, otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the launch template (valid only if you use LaunchTemplateConfigs) or in the  SpotFleetTagSpecification  (valid only if you use LaunchSpecifications). For information about tagging after launch, see Tagging Your Resources.
        public let tagSpecifications: [TagSpecification]?
        /// The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacity: Int
        /// Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is maintain, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain. instant is listed but is not used by Spot Fleet.
        public let `type`: FleetType?
        /// The start date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). By default, Amazon EC2 starts fulfilling the request immediately.
        public let validFrom: TimeStamp?
        /// The end date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
        public let validUntil: TimeStamp?

        public init(allocationStrategy: AllocationStrategy? = nil, clientToken: String? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, fulfilledCapacity: Double? = nil, iamFleetRole: String, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, launchSpecifications: [SpotFleetLaunchSpecification]? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, loadBalancersConfig: LoadBalancersConfig? = nil, onDemandAllocationStrategy: OnDemandAllocationStrategy? = nil, onDemandFulfilledCapacity: Double? = nil, onDemandMaxTotalPrice: String? = nil, onDemandTargetCapacity: Int? = nil, replaceUnhealthyInstances: Bool? = nil, spotMaxTotalPrice: String? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacity: Int, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: TimeStamp? = nil, validUntil: TimeStamp? = nil) {
            self.allocationStrategy = allocationStrategy
            self.clientToken = clientToken
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fulfilledCapacity = fulfilledCapacity
            self.iamFleetRole = iamFleetRole
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.launchSpecifications = launchSpecifications
            self.launchTemplateConfigs = launchTemplateConfigs
            self.loadBalancersConfig = loadBalancersConfig
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
            self.onDemandMaxTotalPrice = onDemandMaxTotalPrice
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotMaxTotalPrice = spotMaxTotalPrice
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.targetCapacity = targetCapacity
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.`type` = `type`
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.loadBalancersConfig?.validate(name: "\(name).loadBalancersConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case clientToken = "clientToken"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case fulfilledCapacity = "fulfilledCapacity"
            case iamFleetRole = "iamFleetRole"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
            case launchSpecifications = "launchSpecifications"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case loadBalancersConfig = "loadBalancersConfig"
            case onDemandAllocationStrategy = "onDemandAllocationStrategy"
            case onDemandFulfilledCapacity = "onDemandFulfilledCapacity"
            case onDemandMaxTotalPrice = "onDemandMaxTotalPrice"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case spotMaxTotalPrice = "spotMaxTotalPrice"
            case spotPrice = "spotPrice"
            case tagSpecifications = "TagSpecification"
            case targetCapacity = "targetCapacity"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case `type` = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct SpotFleetTagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tag"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The type of resource. Currently, the only resource type that is supported is instance. To tag the Spot Fleet request on creation, use the TagSpecifications parameter in  SpotFleetRequestConfigData .
        public let resourceType: ResourceType?
        /// The tags.
        public let tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "tag"
        }
    }

    public struct SpotInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActualBlockHourlyPrice", location: .body(locationName: "actualBlockHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchedAvailabilityZone", location: .body(locationName: "launchedAvailabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp)
        ]

        /// If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.
        public let actualBlockHourlyPrice: String?
        /// The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
        public let availabilityZoneGroup: String?
        /// The duration for the Spot Instance, in minutes.
        public let blockDurationMinutes: Int?
        /// The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let createTime: TimeStamp?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The instance ID, if an instance has been launched to fulfill the Spot Instance request.
        public let instanceId: String?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The Availability Zone in which the request is launched.
        public let launchedAvailabilityZone: String?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
        public let launchGroup: String?
        /// Additional information for launching instances.
        public let launchSpecification: LaunchSpecification?
        /// The product description associated with the Spot Instance.
        public let productDescription: RIProductDescription?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see Spot status in the Amazon EC2 User Guide for Linux Instances.
        public let state: SpotInstanceState?
        /// The status code and status message describing the Spot Instance request.
        public let status: SpotInstanceStatus?
        /// Any tags assigned to the resource.
        public let tags: [Tag]?
        /// The Spot Instance request type.
        public let `type`: SpotInstanceType?
        /// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
        public let validFrom: TimeStamp?
        /// The end date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?

        public init(actualBlockHourlyPrice: String? = nil, availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, createTime: TimeStamp? = nil, fault: SpotInstanceStateFault? = nil, instanceId: String? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchedAvailabilityZone: String? = nil, launchGroup: String? = nil, launchSpecification: LaunchSpecification? = nil, productDescription: RIProductDescription? = nil, spotInstanceRequestId: String? = nil, spotPrice: String? = nil, state: SpotInstanceState? = nil, status: SpotInstanceStatus? = nil, tags: [Tag]? = nil, type: SpotInstanceType? = nil, validFrom: TimeStamp? = nil, validUntil: TimeStamp? = nil) {
            self.actualBlockHourlyPrice = actualBlockHourlyPrice
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.createTime = createTime
            self.fault = fault
            self.instanceId = instanceId
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchedAvailabilityZone = launchedAvailabilityZone
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.productDescription = productDescription
            self.spotInstanceRequestId = spotInstanceRequestId
            self.spotPrice = spotPrice
            self.state = state
            self.status = status
            self.tags = tags
            self.`type` = `type`
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case actualBlockHourlyPrice = "actualBlockHourlyPrice"
            case availabilityZoneGroup = "availabilityZoneGroup"
            case blockDurationMinutes = "blockDurationMinutes"
            case createTime = "createTime"
            case fault = "fault"
            case instanceId = "instanceId"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case launchedAvailabilityZone = "launchedAvailabilityZone"
            case launchGroup = "launchGroup"
            case launchSpecification = "launchSpecification"
            case productDescription = "productDescription"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case spotPrice = "spotPrice"
            case state = "state"
            case status = "status"
            case tags = "tagSet"
            case `type` = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct SpotInstanceStateFault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The reason code for the Spot Instance state change.
        public let code: String?
        /// The message for the Spot Instance state change.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct SpotInstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp)
        ]

        /// The status code. For a list of status codes, see Spot status codes in the Amazon EC2 User Guide for Linux Instances.
        public let code: String?
        /// The description for the status code.
        public let message: String?
        /// The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let updateTime: TimeStamp?

        public init(code: String? = nil, message: String? = nil, updateTime: TimeStamp? = nil) {
            self.code = code
            self.message = message
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case updateTime = "updateTime"
        }
    }

    public struct SpotMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp)
        ]

        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
        public let maxPrice: String?
        /// The Spot Instance request type. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: TimeStamp? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct SpotOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstancePoolsToUseCount", location: .body(locationName: "instancePoolsToUseCount"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxTotalPrice", location: .body(locationName: "maxTotalPrice"), required: false, type: .string), 
            AWSShapeMember(label: "MinTargetCapacity", location: .body(locationName: "minTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SingleAvailabilityZone", location: .body(locationName: "singleAvailabilityZone"), required: false, type: .boolean), 
            AWSShapeMember(label: "SingleInstanceType", location: .body(locationName: "singleInstanceType"), required: false, type: .boolean)
        ]

        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is lowest-price, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is capacity-optimized, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int?
        /// The maximum amount per hour for Spot Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
            case maxTotalPrice = "maxTotalPrice"
            case minTargetCapacity = "minTargetCapacity"
            case singleAvailabilityZone = "singleAvailabilityZone"
            case singleInstanceType = "singleInstanceType"
        }
    }

    public struct SpotOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "InstancePoolsToUseCount", required: false, type: .integer), 
            AWSShapeMember(label: "MaxTotalPrice", required: false, type: .string), 
            AWSShapeMember(label: "MinTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SingleAvailabilityZone", required: false, type: .boolean), 
            AWSShapeMember(label: "SingleInstanceType", required: false, type: .boolean)
        ]

        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is lowest-price, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is capacity-optimized, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int?
        /// The maximum amount per hour for Spot Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case instancePoolsToUseCount = "InstancePoolsToUseCount"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct SpotPlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]

        /// The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot Instances.
        public let tenancy: Tenancy?

        public init(availabilityZone: String? = nil, groupName: String? = nil, tenancy: Tenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
            case tenancy = "tenancy"
        }
    }

    public struct SpotPrice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]

        /// The Availability Zone.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// A general description of the AMI.
        public let productDescription: RIProductDescription?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, productDescription: RIProductDescription? = nil, spotPrice: String? = nil, timestamp: TimeStamp? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.productDescription = productDescription
            self.spotPrice = spotPrice
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case productDescription = "productDescription"
            case spotPrice = "spotPrice"
            case timestamp = "timestamp"
        }
    }

    public struct StaleIpPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let fromPort: Int?
        /// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers).
        public let ipProtocol: String?
        /// The IP ranges. Not applicable for stale security group rules.
        public let ipRanges: [String]?
        /// The prefix list IDs. Not applicable for stale security group rules.
        public let prefixListIds: [String]?
        /// The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let toPort: Int?
        /// The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        public let userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [String]? = nil, prefixListIds: [String]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case ipRanges = "ipRanges"
            case prefixListIds = "prefixListIds"
            case toPort = "toPort"
            case userIdGroupPairs = "groups"
        }
    }

    public struct StaleSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "StaleIpPermissions", location: .body(locationName: "staleIpPermissions"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "StaleIpPermissionsEgress", location: .body(locationName: "staleIpPermissionsEgress"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// Information about the stale inbound rules in the security group.
        public let staleIpPermissions: [StaleIpPermission]?
        /// Information about the stale outbound rules in the security group.
        public let staleIpPermissionsEgress: [StaleIpPermission]?
        /// The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, staleIpPermissions: [StaleIpPermission]? = nil, staleIpPermissionsEgress: [StaleIpPermission]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.staleIpPermissions = staleIpPermissions
            self.staleIpPermissionsEgress = staleIpPermissionsEgress
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case groupId = "groupId"
            case groupName = "groupName"
            case staleIpPermissions = "staleIpPermissions"
            case staleIpPermissionsEgress = "staleIpPermissionsEgress"
            case vpcId = "vpcId"
        }
    }

    public struct StartInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Reserved.
        public let additionalInfo: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        public let instanceIds: [String]

        public init(additionalInfo: String? = nil, dryRun: Bool? = nil, instanceIds: [String]) {
            self.additionalInfo = additionalInfo
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct StartInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartingInstances", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the started instances.
        public let startingInstances: [InstanceStateChange]?

        public init(startingInstances: [InstanceStateChange]? = nil) {
            self.startingInstances = startingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case startingInstances = "instancesSet"
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, serviceId: String) {
            self.dryRun = dryRun
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct StateReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The reason code for the state change.
        public let code: String?
        /// The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient capacity available to satisfy the launch request.    Server.InternalError: An internal error caused the instance to terminate during launch.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceShutdown: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Server.SpotInstanceTermination: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Client.InstanceInitiatedShutdown: The instance was shut down using the shutdown -h command from the instance.    Client.InstanceTerminated: The instance was terminated or rebooted during AMI creation.    Client.InternalError: A client error caused the instance to terminate during launch.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.    Client.UserInitiatedHibernate: Hibernation was initiated on the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.  
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct StopInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "Hibernate", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false 
        public let force: Bool?
        /// Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate your instance in the Amazon Elastic Compute Cloud User Guide.  Default: false 
        public let hibernate: Bool?
        /// The IDs of the instances.
        public let instanceIds: [String]

        public init(dryRun: Bool? = nil, force: Bool? = nil, hibernate: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.force = force
            self.hibernate = hibernate
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case force = "force"
            case hibernate = "Hibernate"
            case instanceIds = "InstanceId"
        }
    }

    public struct StopInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StoppingInstances", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the stopped instances.
        public let stoppingInstances: [InstanceStateChange]?

        public init(stoppingInstances: [InstanceStateChange]? = nil) {
            self.stoppingInstances = stoppingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case stoppingInstances = "instancesSet"
        }
    }

    public struct Storage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]

        /// An Amazon S3 storage location.
        public let s3: S3Storage?

        public init(s3: S3Storage? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct StorageLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]

        /// The name of the S3 bucket.
        public let bucket: String?
        /// The key.
        public let key: String?

        public init(bucket: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", location: .body(locationName: "assignIpv6AddressOnCreation"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", location: .body(locationName: "availabilityZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableIpAddressCount", location: .body(locationName: "availableIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerOwnedIpv4Pool", location: .body(locationName: "customerOwnedIpv4Pool"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultForAz", location: .body(locationName: "defaultForAz"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "MapCustomerOwnedIpOnLaunch", location: .body(locationName: "mapCustomerOwnedIpOnLaunch"), required: false, type: .boolean), 
            AWSShapeMember(label: "MapPublicIpOnLaunch", location: .body(locationName: "mapPublicIpOnLaunch"), required: false, type: .boolean), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetArn", location: .body(locationName: "subnetArn"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
        public let assignIpv6AddressOnCreation: Bool?
        /// The Availability Zone of the subnet.
        public let availabilityZone: String?
        /// The AZ ID of the subnet.
        public let availabilityZoneId: String?
        /// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
        public let availableIpAddressCount: Int?
        /// The IPv4 CIDR block assigned to the subnet.
        public let cidrBlock: String?
        /// The customer-owned IPv4 address pool associated with the subnet.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public let defaultForAz: Bool?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        public let ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]?
        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.
        public let mapCustomerOwnedIpOnLaunch: Bool?
        /// Indicates whether instances launched in this subnet receive a public IPv4 address.
        public let mapPublicIpOnLaunch: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the AWS account that owns the subnet.
        public let ownerId: String?
        /// The current state of the subnet.
        public let state: SubnetState?
        /// The Amazon Resource Name (ARN) of the subnet.
        public let subnetArn: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the subnet.
        public let tags: [Tag]?
        /// The ID of the VPC the subnet is in.
        public let vpcId: String?

        public init(assignIpv6AddressOnCreation: Bool? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableIpAddressCount: Int? = nil, cidrBlock: String? = nil, customerOwnedIpv4Pool: String? = nil, defaultForAz: Bool? = nil, ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]? = nil, mapCustomerOwnedIpOnLaunch: Bool? = nil, mapPublicIpOnLaunch: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: SubnetState? = nil, subnetArn: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableIpAddressCount = availableIpAddressCount
            self.cidrBlock = cidrBlock
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.defaultForAz = defaultForAz
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "assignIpv6AddressOnCreation"
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableIpAddressCount = "availableIpAddressCount"
            case cidrBlock = "cidrBlock"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case defaultForAz = "defaultForAz"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case mapCustomerOwnedIpOnLaunch = "mapCustomerOwnedIpOnLaunch"
            case mapPublicIpOnLaunch = "mapPublicIpOnLaunch"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case state = "state"
            case subnetArn = "subnetArn"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct SubnetAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]

        /// The state of the subnet association.
        public let state: TransitGatewayMulitcastDomainAssociationState?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(state: TransitGatewayMulitcastDomainAssociationState? = nil, subnetId: String? = nil) {
            self.state = state
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case subnetId = "subnetId"
        }
    }

    public struct SubnetCidrBlockState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The state of a CIDR block.
        public let state: SubnetCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: SubnetCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct SubnetIpv6CidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure)
        ]

        /// The association ID for the CIDR block.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: SubnetCidrBlockState?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: SubnetCidrBlockState? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
        }
    }

    public struct SuccessfulInstanceCreditSpecificationItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]

        /// The ID of the instance.
        public let instanceId: String?

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
        }
    }

    public struct SuccessfulQueuedPurchaseDeletion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]

        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]

        /// The tag key.
        public let key: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type.
        public let resourceType: ResourceType?
        /// The tag value.
        public let value: String?

        public init(key: String? = nil, resourceId: String? = nil, resourceType: ResourceType? = nil, value: String? = nil) {
            self.key = key
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case value = "value"
        }
    }

    public struct TagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The type of resource to tag. Currently, the resource types that support tagging on creation are: capacity-reservation | client-vpn-endpoint | customer-gateway | dedicated-host | dhcp-options | export-image-task | export-instance-task | fleet | fpga-image | host-reservation | import-image-task | import-snapshot-task | instance | internet-gateway | ipv4pool-ec2 | ipv6pool-ec2 | key-pair | launch-template | placement-group | prefix-list | natgateway | network-acl | route-table | security-group | spot-fleet-request | spot-instances-request | snapshot | subnet | traffic-mirror-filter | traffic-mirror-session | traffic-mirror-target | transit-gateway | transit-gateway-attachment | transit-gateway-route-table | volume |vpc |  vpc-peering-connection | vpc-endpoint (for interface and gateway endpoints) | vpc-endpoint-service (for AWS PrivateLink) | vpc-flow-log | vpn-connection | vpn-gateway. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        public let tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "Tag"
        }
    }

    public struct TargetCapacitySpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultTargetCapacityType", location: .body(locationName: "defaultTargetCapacityType"), required: false, type: .enum), 
            AWSShapeMember(label: "OnDemandTargetCapacity", location: .body(locationName: "onDemandTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SpotTargetCapacity", location: .body(locationName: "spotTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalTargetCapacity", location: .body(locationName: "totalTargetCapacity"), required: false, type: .integer)
        ]

        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.
        public let onDemandTargetCapacity: Int?
        /// The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.
        public let spotTargetCapacity: Int?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, totalTargetCapacity: Int? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "defaultTargetCapacityType"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case spotTargetCapacity = "spotTargetCapacity"
            case totalTargetCapacity = "totalTargetCapacity"
        }
    }

    public struct TargetCapacitySpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultTargetCapacityType", required: false, type: .enum), 
            AWSShapeMember(label: "OnDemandTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SpotTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "TotalTargetCapacity", required: true, type: .integer)
        ]

        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request.
        public let onDemandTargetCapacity: Int?
        /// The number of Spot units to request.
        public let spotTargetCapacity: Int?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, totalTargetCapacity: Int) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "DefaultTargetCapacityType"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotTargetCapacity = "SpotTargetCapacity"
            case totalTargetCapacity = "TotalTargetCapacity"
        }
    }

    public struct TargetConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string)
        ]

        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int?
        /// The ID of the Convertible Reserved Instance offering.
        public let offeringId: String?

        public init(instanceCount: Int? = nil, offeringId: String? = nil) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "instanceCount"
            case offeringId = "offeringId"
        }
    }

    public struct TargetConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string)
        ]

        /// The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int?
        /// The Convertible Reserved Instance offering ID.
        public let offeringId: String

        public init(instanceCount: Int? = nil, offeringId: String) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case offeringId = "OfferingId"
        }
    }

    public struct TargetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]

        /// The Amazon Resource Name (ARN) of the target group.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct TargetGroupsConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", location: .body(locationName: "targetGroups"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// One or more target groups.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        public func validate(name: String) throws {
            try validate(self.targetGroups, name:"targetGroups", parent: name, max: 5)
            try validate(self.targetGroups, name:"targetGroups", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "targetGroups"
        }
    }

    public struct TargetNetwork: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetNetworkId", location: .body(locationName: "targetNetworkId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The ID of the association.
        public let associationId: String?
        /// The ID of the Client VPN endpoint with which the target network is associated.
        public let clientVpnEndpointId: String?
        /// The IDs of the security groups applied to the target network association.
        public let securityGroups: [String]?
        /// The current state of the target network association.
        public let status: AssociationStatus?
        /// The ID of the subnet specified as the target network.
        public let targetNetworkId: String?
        /// The ID of the VPC in which the target network (subnet) is located.
        public let vpcId: String?

        public init(associationId: String? = nil, clientVpnEndpointId: String? = nil, securityGroups: [String]? = nil, status: AssociationStatus? = nil, targetNetworkId: String? = nil, vpcId: String? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.securityGroups = securityGroups
            self.status = status
            self.targetNetworkId = targetNetworkId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case securityGroups = "securityGroups"
            case status = "status"
            case targetNetworkId = "targetNetworkId"
            case vpcId = "vpcId"
        }
    }

    public struct TargetReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure)
        ]

        /// The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
        public let reservationValue: ReservationValue?
        /// The configuration of the Convertible Reserved Instances that make up the exchange.
        public let targetConfiguration: TargetConfiguration?

        public init(reservationValue: ReservationValue? = nil, targetConfiguration: TargetConfiguration? = nil) {
            self.reservationValue = reservationValue
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue = "reservationValue"
            case targetConfiguration = "targetConfiguration"
        }
    }

    public struct TerminateClientVpnConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "ConnectionId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Username", required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String
        /// The ID of the client connection to be terminated.
        public let connectionId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
        public let username: String?

        public init(clientVpnEndpointId: String, connectionId: String? = nil, dryRun: Bool? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionId = connectionId
            self.dryRun = dryRun
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionId = "ConnectionId"
            case dryRun = "DryRun"
            case username = "Username"
        }
    }

    public struct TerminateClientVpnConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientVpnEndpointId", location: .body(locationName: "clientVpnEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionStatuses", location: .body(locationName: "connectionStatuses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Username", location: .body(locationName: "username"), required: false, type: .string)
        ]

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The current state of the client connections.
        public let connectionStatuses: [TerminateConnectionStatus]?
        /// The user who established the terminated client connections.
        public let username: String?

        public init(clientVpnEndpointId: String? = nil, connectionStatuses: [TerminateConnectionStatus]? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionStatuses = connectionStatuses
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case connectionStatuses = "connectionStatuses"
            case username = "username"
        }
    }

    public struct TerminateConnectionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionId", location: .body(locationName: "connectionId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrentStatus", location: .body(locationName: "currentStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "PreviousStatus", location: .body(locationName: "previousStatus"), required: false, type: .structure)
        ]

        /// The ID of the client connection.
        public let connectionId: String?
        /// A message about the status of the client connection, if applicable.
        public let currentStatus: ClientVpnConnectionStatus?
        /// The state of the client connection.
        public let previousStatus: ClientVpnConnectionStatus?

        public init(connectionId: String? = nil, currentStatus: ClientVpnConnectionStatus? = nil, previousStatus: ClientVpnConnectionStatus? = nil) {
            self.connectionId = connectionId
            self.currentStatus = currentStatus
            self.previousStatus = previousStatus
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case currentStatus = "currentStatus"
            case previousStatus = "previousStatus"
        }
    }

    public struct TerminateInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
        public let instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct TerminateInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminatingInstances", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Information about the terminated instances.
        public let terminatingInstances: [InstanceStateChange]?

        public init(terminatingInstances: [InstanceStateChange]? = nil) {
            self.terminatingInstances = terminatingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case terminatingInstances = "instancesSet"
        }
    }

    public struct TrafficMirrorFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EgressFilterRules", location: .body(locationName: "egressFilterRuleSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IngressFilterRules", location: .body(locationName: "ingressFilterRuleSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkServices", location: .body(locationName: "networkServiceSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficMirrorFilterId", location: .body(locationName: "trafficMirrorFilterId"), required: false, type: .string)
        ]

        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Information about the egress rules that are associated with the Traffic Mirror filter.
        public let egressFilterRules: [TrafficMirrorFilterRule]?
        /// Information about the ingress rules that are associated with the Traffic Mirror filter.
        public let ingressFilterRules: [TrafficMirrorFilterRule]?
        /// The network service traffic that is associated with the Traffic Mirror filter.
        public let networkServices: [TrafficMirrorNetworkService]?
        /// The tags assigned to the Traffic Mirror filter.
        public let tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(description: String? = nil, egressFilterRules: [TrafficMirrorFilterRule]? = nil, ingressFilterRules: [TrafficMirrorFilterRule]? = nil, networkServices: [TrafficMirrorNetworkService]? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil) {
            self.description = description
            self.egressFilterRules = egressFilterRules
            self.ingressFilterRules = ingressFilterRules
            self.networkServices = networkServices
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case egressFilterRules = "egressFilterRuleSet"
            case ingressFilterRules = "ingressFilterRuleSet"
            case networkServices = "networkServiceSet"
            case tags = "tagSet"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
        }
    }

    public struct TrafficMirrorFilterRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPortRange", location: .body(locationName: "destinationPortRange"), required: false, type: .structure), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .integer), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: false, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "SourceCidrBlock", location: .body(locationName: "sourceCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "SourcePortRange", location: .body(locationName: "sourcePortRange"), required: false, type: .structure), 
            AWSShapeMember(label: "TrafficDirection", location: .body(locationName: "trafficDirection"), required: false, type: .enum), 
            AWSShapeMember(label: "TrafficMirrorFilterId", location: .body(locationName: "trafficMirrorFilterId"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorFilterRuleId", location: .body(locationName: "trafficMirrorFilterRuleId"), required: false, type: .string)
        ]

        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block assigned to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination port range assigned to the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRange?
        /// The protocol assigned to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The action assigned to the Traffic Mirror rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The rule number of the Traffic Mirror rule.
        public let ruleNumber: Int?
        /// The source CIDR block assigned to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The source port range assigned to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRange?
        /// The traffic direction assigned to the Traffic Mirror rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror filter that the rule is associated with.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRange? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRange? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorFilterRuleId: String? = nil) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationPortRange = "destinationPortRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
            case sourceCidrBlock = "sourceCidrBlock"
            case sourcePortRange = "sourcePortRange"
            case trafficDirection = "trafficDirection"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
            case trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId"
        }
    }

    public struct TrafficMirrorPortRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer)
        ]

        /// The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case toPort = "toPort"
        }
    }

    public struct TrafficMirrorPortRangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer)
        ]

        /// The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case toPort = "ToPort"
        }
    }

    public struct TrafficMirrorSession: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PacketLength", location: .body(locationName: "packetLength"), required: false, type: .integer), 
            AWSShapeMember(label: "SessionNumber", location: .body(locationName: "sessionNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficMirrorFilterId", location: .body(locationName: "trafficMirrorFilterId"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorSessionId", location: .body(locationName: "trafficMirrorSessionId"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficMirrorTargetId", location: .body(locationName: "trafficMirrorTargetId"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualNetworkId", location: .body(locationName: "virtualNetworkId"), required: false, type: .integer)
        ]

        /// The description of the Traffic Mirror session.
        public let description: String?
        /// The ID of the Traffic Mirror session's network interface.
        public let networkInterfaceId: String?
        /// The ID of the account that owns the Traffic Mirror session.
        public let ownerId: String?
        /// The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The tags assigned to the Traffic Mirror session.
        public let tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID for the Traffic Mirror session.
        public let trafficMirrorSessionId: String?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID associated with the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, packetLength: Int? = nil, sessionNumber: Int? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String? = nil, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case packetLength = "packetLength"
            case sessionNumber = "sessionNumber"
            case tags = "tagSet"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
            case trafficMirrorSessionId = "trafficMirrorSessionId"
            case trafficMirrorTargetId = "trafficMirrorTargetId"
            case virtualNetworkId = "virtualNetworkId"
        }
    }

    public struct TrafficMirrorTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkLoadBalancerArn", location: .body(locationName: "networkLoadBalancerArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TrafficMirrorTargetId", location: .body(locationName: "trafficMirrorTargetId"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// Information about the Traffic Mirror target.
        public let description: String?
        /// The network interface ID that is attached to the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer.
        public let networkLoadBalancerArn: String?
        /// The ID of the account that owns the Traffic Mirror target.
        public let ownerId: String?
        /// The tags assigned to the Traffic Mirror target.
        public let tags: [Tag]?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The type of Traffic Mirror target.
        public let `type`: TrafficMirrorTargetType?

        public init(description: String? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, trafficMirrorTargetId: String? = nil, type: TrafficMirrorTargetType? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.ownerId = ownerId
            self.tags = tags
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case networkLoadBalancerArn = "networkLoadBalancerArn"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case trafficMirrorTargetId = "trafficMirrorTargetId"
            case `type` = "type"
        }
    }

    public struct TransitGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayArn", location: .body(locationName: "transitGatewayArn"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string)
        ]

        /// The creation time.
        public let creationTime: TimeStamp?
        /// The description of the transit gateway.
        public let description: String?
        /// The transit gateway options.
        public let options: TransitGatewayOptions?
        /// The ID of the AWS account ID that owns the transit gateway.
        public let ownerId: String?
        /// The state of the transit gateway.
        public let state: TransitGatewayState?
        /// The tags for the transit gateway.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the transit gateway.
        public let transitGatewayArn: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(creationTime: TimeStamp? = nil, description: String? = nil, options: TransitGatewayOptions? = nil, ownerId: String? = nil, state: TransitGatewayState? = nil, tags: [Tag]? = nil, transitGatewayArn: String? = nil, transitGatewayId: String? = nil) {
            self.creationTime = creationTime
            self.description = description
            self.options = options
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.transitGatewayArn = transitGatewayArn
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case description = "description"
            case options = "options"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayArn = "transitGatewayArn"
            case transitGatewayId = "transitGatewayId"
        }
    }

    public struct TransitGatewayAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceOwnerId", location: .body(locationName: "resourceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayOwnerId", location: .body(locationName: "transitGatewayOwnerId"), required: false, type: .string)
        ]

        /// The association.
        public let association: TransitGatewayAttachmentAssociation?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the AWS account that owns the resource.
        public let resourceOwnerId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The attachment state. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The tags for the attachment.
        public let tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the AWS account that owns the transit gateway.
        public let transitGatewayOwnerId: String?

        public init(association: TransitGatewayAttachmentAssociation? = nil, creationTime: TimeStamp? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAttachmentState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, transitGatewayOwnerId: String? = nil) {
            self.association = association
            self.creationTime = creationTime
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.transitGatewayOwnerId = transitGatewayOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case creationTime = "creationTime"
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceType = "resourceType"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayOwnerId = "transitGatewayOwnerId"
        }
    }

    public struct TransitGatewayAttachmentAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the route table for the transit gateway.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayAssociationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayAttachmentPropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// The state of the propagation route table.
        public let state: TransitGatewayPropagationState?
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayPropagationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupMembers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeregisteredNetworkInterfaceIds", location: .body(locationName: "deregisteredNetworkInterfaceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "GroupIpAddress", location: .body(locationName: "groupIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The network interface IDs of the deregistered members.
        public let deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds = "deregisteredNetworkInterfaceIds"
            case groupIpAddress = "groupIpAddress"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupSources: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeregisteredNetworkInterfaceIds", location: .body(locationName: "deregisteredNetworkInterfaceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "GroupIpAddress", location: .body(locationName: "groupIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The network interface IDs of the non-registered members.
        public let deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds = "deregisteredNetworkInterfaceIds"
            case groupIpAddress = "groupIpAddress"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDomain: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The time the transit gateway multicast domain was created.
        public let creationTime: TimeStamp?
        /// The state of the transit gateway multicast domain.
        public let state: TransitGatewayMulticastDomainState?
        /// The tags for the transit gateway multicast domain.
        public let tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(creationTime: TimeStamp? = nil, state: TransitGatewayMulticastDomainState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.creationTime = creationTime
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDomainAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnet associated with the transit gateway multicast domain.
        public let subnet: SubnetAssociation?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnet: SubnetAssociation? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.subnet = subnet
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case subnet = "subnet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayMulticastDomainAssociations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Subnets", location: .body(locationName: "subnets"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnets associated with the multicast domain.
        public let subnets: [SubnetAssociation]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnets: [SubnetAssociation]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.subnets = subnets
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case subnets = "subnets"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIpAddress", location: .body(locationName: "groupIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "GroupMember", location: .body(locationName: "groupMember"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupSource", location: .body(locationName: "groupSource"), required: false, type: .boolean), 
            AWSShapeMember(label: "MemberType", location: .body(locationName: "memberType"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SourceType", location: .body(locationName: "sourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// Indicates that the resource is a transit gateway multicast group member.
        public let groupMember: Bool?
        /// Indicates that the resource is a transit gateway multicast group member.
        public let groupSource: Bool?
        /// The member type (for example, static).
        public let memberType: MembershipType?
        /// The ID of the transit gateway attachment.
        public let networkInterfaceId: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The source type.
        public let sourceType: MembershipType?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(groupIpAddress: String? = nil, groupMember: Bool? = nil, groupSource: Bool? = nil, memberType: MembershipType? = nil, networkInterfaceId: String? = nil, resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, sourceType: MembershipType? = nil, subnetId: String? = nil, transitGatewayAttachmentId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.groupMember = groupMember
            self.groupSource = groupSource
            self.memberType = memberType
            self.networkInterfaceId = networkInterfaceId
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.sourceType = sourceType
            self.subnetId = subnetId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case groupMember = "groupMember"
            case groupSource = "groupSource"
            case memberType = "memberType"
            case networkInterfaceId = "networkInterfaceId"
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case sourceType = "sourceType"
            case subnetId = "subnetId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupMembers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIpAddress", location: .body(locationName: "groupIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "RegisteredNetworkInterfaceIds", location: .body(locationName: "registeredNetworkInterfaceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the registered network interfaces.
        public let registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case registeredNetworkInterfaceIds = "registeredNetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupSources: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIpAddress", location: .body(locationName: "groupIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "RegisteredNetworkInterfaceIds", location: .body(locationName: "registeredNetworkInterfaceIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayMulticastDomainId", location: .body(locationName: "transitGatewayMulticastDomainId"), required: false, type: .string)
        ]

        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the network interfaces members registered with the transit gateway multicast group.
        public let registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case registeredNetworkInterfaceIds = "registeredNetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonSideAsn", location: .body(locationName: "amazonSideAsn"), required: false, type: .long), 
            AWSShapeMember(label: "AssociationDefaultRouteTableId", location: .body(locationName: "associationDefaultRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "AutoAcceptSharedAttachments", location: .body(locationName: "autoAcceptSharedAttachments"), required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTableAssociation", location: .body(locationName: "defaultRouteTableAssociation"), required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTablePropagation", location: .body(locationName: "defaultRouteTablePropagation"), required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", location: .body(locationName: "dnsSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "MulticastSupport", location: .body(locationName: "multicastSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "PropagationDefaultRouteTableId", location: .body(locationName: "propagationDefaultRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "VpnEcmpSupport", location: .body(locationName: "vpnEcmpSupport"), required: false, type: .enum)
        ]

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
        public let amazonSideAsn: Int64?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Indicates whether attachment requests are automatically accepted.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Indicates whether resource attachments are automatically associated with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Indicates whether resource attachments automatically propagate routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// Indicates whether Equal Cost Multipath Protocol support is enabled.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "amazonSideAsn"
            case associationDefaultRouteTableId = "associationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "autoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "defaultRouteTableAssociation"
            case defaultRouteTablePropagation = "defaultRouteTablePropagation"
            case dnsSupport = "dnsSupport"
            case multicastSupport = "multicastSupport"
            case propagationDefaultRouteTableId = "propagationDefaultRouteTableId"
            case vpnEcmpSupport = "vpnEcmpSupport"
        }
    }

    public struct TransitGatewayPeeringAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterTgwInfo", location: .body(locationName: "accepterTgwInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequesterTgwInfo", location: .body(locationName: "requesterTgwInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// Information about the accepter transit gateway.
        public let accepterTgwInfo: PeeringTgwInfo?
        /// The time the transit gateway peering attachment was created.
        public let creationTime: TimeStamp?
        /// Information about the requester transit gateway.
        public let requesterTgwInfo: PeeringTgwInfo?
        /// The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The status of the transit gateway peering attachment.
        public let status: PeeringAttachmentStatus?
        /// The tags for the transit gateway peering attachment.
        public let tags: [Tag]?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String?

        public init(accepterTgwInfo: PeeringTgwInfo? = nil, creationTime: TimeStamp? = nil, requesterTgwInfo: PeeringTgwInfo? = nil, state: TransitGatewayAttachmentState? = nil, status: PeeringAttachmentStatus? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil) {
            self.accepterTgwInfo = accepterTgwInfo
            self.creationTime = creationTime
            self.requesterTgwInfo = requesterTgwInfo
            self.state = state
            self.status = status
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterTgwInfo = "accepterTgwInfo"
            case creationTime = "creationTime"
            case requesterTgwInfo = "requesterTgwInfo"
            case state = "state"
            case status = "status"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayPrefixListAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayPrefixListReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blackhole", location: .body(locationName: "blackhole"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListOwnerId", location: .body(locationName: "prefixListOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachment", location: .body(locationName: "transitGatewayAttachment"), required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// Indicates whether traffic that matches this route is dropped.
        public let blackhole: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the prefix list owner.
        public let prefixListOwnerId: String?
        /// The state of the prefix list reference.
        public let state: TransitGatewayPrefixListReferenceState?
        /// Information about the transit gateway attachment.
        public let transitGatewayAttachment: TransitGatewayPrefixListAttachment?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, prefixListId: String? = nil, prefixListOwnerId: String? = nil, state: TransitGatewayPrefixListReferenceState? = nil, transitGatewayAttachment: TransitGatewayPrefixListAttachment? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.prefixListId = prefixListId
            self.prefixListOwnerId = prefixListOwnerId
            self.state = state
            self.transitGatewayAttachment = transitGatewayAttachment
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "blackhole"
            case prefixListId = "prefixListId"
            case prefixListOwnerId = "prefixListOwnerId"
            case state = "state"
            case transitGatewayAttachment = "transitGatewayAttachment"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayPropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "AutoAcceptSharedAttachments", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTableAssociation", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTablePropagation", required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum), 
            AWSShapeMember(label: "MulticastSupport", required: false, type: .enum), 
            AWSShapeMember(label: "VpnEcmpSupport", required: false, type: .enum)
        ]

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is 64512.
        public let amazonSideAsn: Int64?
        /// Enable or disable automatic acceptance of attachment requests. Disabled by default.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table. Enabled by default.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support. Enabled by default.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        /// Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case multicastSupport = "MulticastSupport"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct TransitGatewayRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachments", location: .body(locationName: "transitGatewayAttachments"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]

        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        /// The ID of the prefix list used for destination matches.
        public let prefixListId: String?
        /// The state of the route.
        public let state: TransitGatewayRouteState?
        /// The attachments.
        public let transitGatewayAttachments: [TransitGatewayRouteAttachment]?
        /// The route type.
        public let `type`: TransitGatewayRouteType?

        public init(destinationCidrBlock: String? = nil, prefixListId: String? = nil, state: TransitGatewayRouteState? = nil, transitGatewayAttachments: [TransitGatewayRouteAttachment]? = nil, type: TransitGatewayRouteType? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.prefixListId = prefixListId
            self.state = state
            self.transitGatewayAttachments = transitGatewayAttachments
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case prefixListId = "prefixListId"
            case state = "state"
            case transitGatewayAttachments = "transitGatewayAttachments"
            case `type` = "type"
        }
    }

    public struct TransitGatewayRouteAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated. 
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayRouteTable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DefaultAssociationRouteTable", location: .body(locationName: "defaultAssociationRouteTable"), required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultPropagationRouteTable", location: .body(locationName: "defaultPropagationRouteTable"), required: false, type: .boolean), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string)
        ]

        /// The creation time.
        public let creationTime: TimeStamp?
        /// Indicates whether this is the default association route table for the transit gateway.
        public let defaultAssociationRouteTable: Bool?
        /// Indicates whether this is the default propagation route table for the transit gateway.
        public let defaultPropagationRouteTable: Bool?
        /// The state of the transit gateway route table.
        public let state: TransitGatewayRouteTableState?
        /// Any tags assigned to the route table.
        public let tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(creationTime: TimeStamp? = nil, defaultAssociationRouteTable: Bool? = nil, defaultPropagationRouteTable: Bool? = nil, state: TransitGatewayRouteTableState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.creationTime = creationTime
            self.defaultAssociationRouteTable = defaultAssociationRouteTable
            self.defaultPropagationRouteTable = defaultPropagationRouteTable
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case defaultAssociationRouteTable = "defaultAssociationRouteTable"
            case defaultPropagationRouteTable = "defaultPropagationRouteTable"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayRouteTableAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayRouteTablePropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string)
        ]

        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the resource.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayVpcAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcOwnerId", location: .body(locationName: "vpcOwnerId"), required: false, type: .string)
        ]

        /// The creation time.
        public let creationTime: TimeStamp?
        /// The VPC attachment options.
        public let options: TransitGatewayVpcAttachmentOptions?
        /// The state of the VPC attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The IDs of the subnets.
        public let subnetIds: [String]?
        /// The tags for the VPC attachment.
        public let tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the AWS account that owns the VPC.
        public let vpcOwnerId: String?

        public init(creationTime: TimeStamp? = nil, options: TransitGatewayVpcAttachmentOptions? = nil, state: TransitGatewayAttachmentState? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, vpcId: String? = nil, vpcOwnerId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
            self.vpcOwnerId = vpcOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case options = "options"
            case state = "state"
            case subnetIds = "subnetIds"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case vpcId = "vpcId"
            case vpcOwnerId = "vpcOwnerId"
        }
    }

    public struct TransitGatewayVpcAttachmentOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsSupport", location: .body(locationName: "dnsSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6Support", location: .body(locationName: "ipv6Support"), required: false, type: .enum)
        ]

        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether IPv6 support is disabled.
        public let ipv6Support: Ipv6SupportValue?

        public init(dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case dnsSupport = "dnsSupport"
            case ipv6Support = "ipv6Support"
        }
    }

    public struct TunnelOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DpdTimeoutAction", location: .body(locationName: "dpdTimeoutAction"), required: false, type: .string), 
            AWSShapeMember(label: "DpdTimeoutSeconds", location: .body(locationName: "dpdTimeoutSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "IkeVersions", location: .body(locationName: "ikeVersionSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OutsideIpAddress", location: .body(locationName: "outsideIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Phase1DHGroupNumbers", location: .body(locationName: "phase1DHGroupNumberSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1EncryptionAlgorithms", location: .body(locationName: "phase1EncryptionAlgorithmSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1IntegrityAlgorithms", location: .body(locationName: "phase1IntegrityAlgorithmSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1LifetimeSeconds", location: .body(locationName: "phase1LifetimeSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "Phase2DHGroupNumbers", location: .body(locationName: "phase2DHGroupNumberSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2EncryptionAlgorithms", location: .body(locationName: "phase2EncryptionAlgorithmSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2IntegrityAlgorithms", location: .body(locationName: "phase2IntegrityAlgorithmSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2LifetimeSeconds", location: .body(locationName: "phase2LifetimeSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "PreSharedKey", location: .body(locationName: "preSharedKey"), required: false, type: .string), 
            AWSShapeMember(label: "RekeyFuzzPercentage", location: .body(locationName: "rekeyFuzzPercentage"), required: false, type: .integer), 
            AWSShapeMember(label: "RekeyMarginTimeSeconds", location: .body(locationName: "rekeyMarginTimeSeconds"), required: false, type: .integer), 
            AWSShapeMember(label: "ReplayWindowSize", location: .body(locationName: "replayWindowSize"), required: false, type: .integer), 
            AWSShapeMember(label: "StartupAction", location: .body(locationName: "startupAction"), required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideCidr", location: .body(locationName: "tunnelInsideCidr"), required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideIpv6Cidr", location: .body(locationName: "tunnelInsideIpv6Cidr"), required: false, type: .string)
        ]

        /// The action to take after a DPD timeout occurs.
        public let dpdTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs.
        public let dpdTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel.
        public let ikeVersions: [IKEVersionsListValue]?
        /// The external IP address of the VPN tunnel.
        public let outsideIpAddress: String?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.
        public let phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
        public let phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
        public let phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds.
        public let phase1LifetimeSeconds: Int?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.
        public let phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
        public let phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
        public let phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds.
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.
        public let preSharedKey: String?
        /// The percentage of the rekey window determined by RekeyMarginTimeSeconds during which the rekey time is randomly selected.
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey.
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window.
        public let replayWindowSize: Int?
        /// The action to take when the establishing the VPN tunnels for a VPN connection.
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel.
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel.
        public let tunnelInsideIpv6Cidr: String?

        public init(dpdTimeoutAction: String? = nil, dpdTimeoutSeconds: Int? = nil, ikeVersions: [IKEVersionsListValue]? = nil, outsideIpAddress: String? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dpdTimeoutAction = dpdTimeoutAction
            self.dpdTimeoutSeconds = dpdTimeoutSeconds
            self.ikeVersions = ikeVersions
            self.outsideIpAddress = outsideIpAddress
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dpdTimeoutAction = "dpdTimeoutAction"
            case dpdTimeoutSeconds = "dpdTimeoutSeconds"
            case ikeVersions = "ikeVersionSet"
            case outsideIpAddress = "outsideIpAddress"
            case phase1DHGroupNumbers = "phase1DHGroupNumberSet"
            case phase1EncryptionAlgorithms = "phase1EncryptionAlgorithmSet"
            case phase1IntegrityAlgorithms = "phase1IntegrityAlgorithmSet"
            case phase1LifetimeSeconds = "phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "phase2DHGroupNumberSet"
            case phase2EncryptionAlgorithms = "phase2EncryptionAlgorithmSet"
            case phase2IntegrityAlgorithms = "phase2IntegrityAlgorithmSet"
            case phase2LifetimeSeconds = "phase2LifetimeSeconds"
            case preSharedKey = "preSharedKey"
            case rekeyFuzzPercentage = "rekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "rekeyMarginTimeSeconds"
            case replayWindowSize = "replayWindowSize"
            case startupAction = "startupAction"
            case tunnelInsideCidr = "tunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "tunnelInsideIpv6Cidr"
        }
    }

    public struct UnassignIpv6AddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: true, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]

        /// The IPv6 addresses to unassign from the network interface.
        public let ipv6Addresses: [String]
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6Addresses: [String], networkInterfaceId: String) {
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct UnassignIpv6AddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "UnassignedIpv6Addresses", location: .body(locationName: "unassignedIpv6Addresses"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses that have been unassigned from the network interface.
        public let unassignedIpv6Addresses: [String]?

        public init(networkInterfaceId: String? = nil, unassignedIpv6Addresses: [String]? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.unassignedIpv6Addresses = unassignedIpv6Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case unassignedIpv6Addresses = "unassignedIpv6Addresses"
        }
    }

    public struct UnassignPrivateIpAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: true, type: .list, encoding: .list(member:"PrivateIpAddress"))
        ]

        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
        public let privateIpAddresses: [String]

        public init(networkInterfaceId: String, privateIpAddresses: [String]) {
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public struct UnmonitorInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .list, encoding: .list(member:"InstanceId"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        public let instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct UnmonitorInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The monitoring information.
        public let instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]

        /// The applicable error for the burstable performance instance whose credit option for CPU usage was not modified.
        public let error: UnsuccessfulInstanceCreditSpecificationItemError?
        /// The ID of the instance.
        public let instanceId: String?

        public init(error: UnsuccessfulInstanceCreditSpecificationItemError? = nil, instanceId: String? = nil) {
            self.error = error
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case instanceId = "instanceId"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: UnsuccessfulInstanceCreditSpecificationErrorCode?
        /// The applicable error message.
        public let message: String?

        public init(code: UnsuccessfulInstanceCreditSpecificationErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct UnsuccessfulItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string)
        ]

        /// Information about the error.
        public let error: UnsuccessfulItemError?
        /// The ID of the resource.
        public let resourceId: String?

        public init(error: UnsuccessfulItemError? = nil, resourceId: String? = nil) {
            self.error = error
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case resourceId = "resourceId"
        }
    }

    public struct UnsuccessfulItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code.
        public let code: String?
        /// The error message accompanying the error code.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP permissions for the security group rule.
        public let ipPermissions: [IpPermission]

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: true, type: .list, encoding: .list(member:"item"))
        ]

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP permissions for the security group rule. 
        public let ipPermissions: [IpPermission]

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct UserBucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string)
        ]

        /// The name of the Amazon S3 bucket where the disk image is located.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct UserBucketDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string)
        ]

        /// The Amazon S3 bucket from which the disk image was created.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct UserData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", location: .body(locationName: "data"), required: false, type: .string)
        ]

        /// The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "data"
        }
    }

    public struct UserIdGroupPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "PeeringStatus", location: .body(locationName: "peeringStatus"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
        public let groupName: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
        public let userId: String?
        /// The ID of the VPC for the referenced security group, if applicable.
        public let vpcId: String?
        /// The ID of the VPC peering connection, if applicable.
        public let vpcPeeringConnectionId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case groupId = "groupId"
            case groupName = "groupName"
            case peeringStatus = "peeringStatus"
            case userId = "userId"
            case vpcId = "vpcId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct VCpuInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultCores", location: .body(locationName: "defaultCores"), required: false, type: .integer), 
            AWSShapeMember(label: "DefaultThreadsPerCore", location: .body(locationName: "defaultThreadsPerCore"), required: false, type: .integer), 
            AWSShapeMember(label: "DefaultVCpus", location: .body(locationName: "defaultVCpus"), required: false, type: .integer), 
            AWSShapeMember(label: "ValidCores", location: .body(locationName: "validCores"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ValidThreadsPerCore", location: .body(locationName: "validThreadsPerCore"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The default number of cores for the instance type.
        public let defaultCores: Int?
        /// The default number of threads per core for the instance type.
        public let defaultThreadsPerCore: Int?
        /// The default number of vCPUs for the instance type.
        public let defaultVCpus: Int?
        /// List of the valid number of cores that can be configured for the instance type.
        public let validCores: [Int]?
        /// List of the valid number of threads per core that can be configured for the instance type. 
        public let validThreadsPerCore: [Int]?

        public init(defaultCores: Int? = nil, defaultThreadsPerCore: Int? = nil, defaultVCpus: Int? = nil, validCores: [Int]? = nil, validThreadsPerCore: [Int]? = nil) {
            self.defaultCores = defaultCores
            self.defaultThreadsPerCore = defaultThreadsPerCore
            self.defaultVCpus = defaultVCpus
            self.validCores = validCores
            self.validThreadsPerCore = validThreadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case defaultCores = "defaultCores"
            case defaultThreadsPerCore = "defaultThreadsPerCore"
            case defaultVCpus = "defaultVCpus"
            case validCores = "validCores"
            case validThreadsPerCore = "validThreadsPerCore"
        }
    }

    public struct ValidationError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The error code that indicates why the parameter or parameter combination is not valid. For more information about error codes, see Error Codes.
        public let code: String?
        /// The error message that describes why the parameter or parameter combination is not valid. For more information about error messages, see Error Codes.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ValidationWarning: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", location: .body(locationName: "errorSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// The error codes and error messages.
        public let errors: [ValidationError]?

        public init(errors: [ValidationError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
        }
    }

    public struct VgwTelemetry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptedRouteCount", location: .body(locationName: "acceptedRouteCount"), required: false, type: .integer), 
            AWSShapeMember(label: "CertificateArn", location: .body(locationName: "certificateArn"), required: false, type: .string), 
            AWSShapeMember(label: "LastStatusChange", location: .body(locationName: "lastStatusChange"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OutsideIpAddress", location: .body(locationName: "outsideIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The number of accepted routes.
        public let acceptedRouteCount: Int?
        /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
        public let certificateArn: String?
        /// The date and time of the last change in status.
        public let lastStatusChange: TimeStamp?
        /// The Internet-routable IP address of the virtual private gateway's outside interface.
        public let outsideIpAddress: String?
        /// The status of the VPN tunnel.
        public let status: TelemetryStatus?
        /// If an error occurs, a description of the error.
        public let statusMessage: String?

        public init(acceptedRouteCount: Int? = nil, certificateArn: String? = nil, lastStatusChange: TimeStamp? = nil, outsideIpAddress: String? = nil, status: TelemetryStatus? = nil, statusMessage: String? = nil) {
            self.acceptedRouteCount = acceptedRouteCount
            self.certificateArn = certificateArn
            self.lastStatusChange = lastStatusChange
            self.outsideIpAddress = outsideIpAddress
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case acceptedRouteCount = "acceptedRouteCount"
            case certificateArn = "certificateArn"
            case lastStatusChange = "lastStatusChange"
            case outsideIpAddress = "outsideIpAddress"
            case status = "status"
            case statusMessage = "statusMessage"
        }
    }

    public struct Volume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "FastRestored", location: .body(locationName: "fastRestored"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "MultiAttachEnabled", location: .body(locationName: "multiAttachEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum)
        ]

        /// Information about the volume attachments.
        public let attachments: [VolumeAttachment]?
        /// The Availability Zone for the volume.
        public let availabilityZone: String?
        /// The time stamp when volume creation was initiated.
        public let createTime: TimeStamp?
        /// Indicates whether the volume is encrypted.
        public let encrypted: Bool?
        /// Indicates whether the volume was created using fast snapshot restore.
        public let fastRestored: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-16,000 IOPS for gp2 volumes and 100 to 64,000 IOPS for io1 and io2 volumes, in most Regions. The maximum IOPS for io1 and io2 of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. Condition: This parameter is required for requests to create io1 and io2 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
        public let kmsKeyId: String?
        /// Indicates whether Amazon EBS Multi-Attach is enabled.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs.
        public let size: Int?
        /// The snapshot from which the volume was created, if applicable.
        public let snapshotId: String?
        /// The volume state.
        public let state: VolumeState?
        /// Any tags assigned to the volume.
        public let tags: [Tag]?
        /// The ID of the volume.
        public let volumeId: String?
        /// The volume type. This can be gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public let volumeType: VolumeType?

        public init(attachments: [VolumeAttachment]? = nil, availabilityZone: String? = nil, createTime: TimeStamp? = nil, encrypted: Bool? = nil, fastRestored: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, state: VolumeState? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeType: VolumeType? = nil) {
            self.attachments = attachments
            self.availabilityZone = availabilityZone
            self.createTime = createTime
            self.encrypted = encrypted
            self.fastRestored = fastRestored
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.state = state
            self.tags = tags
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case availabilityZone = "availabilityZone"
            case createTime = "createTime"
            case encrypted = "encrypted"
            case fastRestored = "fastRestored"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case multiAttachEnabled = "multiAttachEnabled"
            case outpostArn = "outpostArn"
            case size = "size"
            case snapshotId = "snapshotId"
            case state = "status"
            case tags = "tagSet"
            case volumeId = "volumeId"
            case volumeType = "volumeType"
        }
    }

    public struct VolumeAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Device", location: .body(locationName: "device"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]

        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The device name.
        public let device: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The attachment state of the volume.
        public let state: VolumeAttachmentState?
        /// The ID of the volume.
        public let volumeId: String?

        public init(attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, device: String? = nil, instanceId: String? = nil, state: VolumeAttachmentState? = nil, volumeId: String? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.device = device
            self.instanceId = instanceId
            self.state = state
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case device = "device"
            case instanceId = "instanceId"
            case state = "status"
            case volumeId = "volumeId"
        }
    }

    public struct VolumeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: true, type: .long)
        ]

        /// The size of the volume, in GiB.
        public let size: Int64

        public init(size: Int64) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct VolumeModification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ModificationState", location: .body(locationName: "modificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "OriginalIops", location: .body(locationName: "originalIops"), required: false, type: .integer), 
            AWSShapeMember(label: "OriginalSize", location: .body(locationName: "originalSize"), required: false, type: .integer), 
            AWSShapeMember(label: "OriginalVolumeType", location: .body(locationName: "originalVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .long), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "TargetIops", location: .body(locationName: "targetIops"), required: false, type: .integer), 
            AWSShapeMember(label: "TargetSize", location: .body(locationName: "targetSize"), required: false, type: .integer), 
            AWSShapeMember(label: "TargetVolumeType", location: .body(locationName: "targetVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]

        /// The modification completion or failure time.
        public let endTime: TimeStamp?
        /// The current modification state. The modification state is null for unmodified volumes.
        public let modificationState: VolumeModificationState?
        /// The original IOPS rate of the volume.
        public let originalIops: Int?
        /// The original size of the volume, in GiB.
        public let originalSize: Int?
        /// The original EBS volume type of the volume.
        public let originalVolumeType: VolumeType?
        /// The modification progress, from 0 to 100 percent complete.
        public let progress: Int64?
        /// The modification start time.
        public let startTime: TimeStamp?
        /// A status message about the modification progress or failure.
        public let statusMessage: String?
        /// The target IOPS rate of the volume.
        public let targetIops: Int?
        /// The target size of the volume, in GiB.
        public let targetSize: Int?
        /// The target EBS volume type of the volume.
        public let targetVolumeType: VolumeType?
        /// The ID of the volume.
        public let volumeId: String?

        public init(endTime: TimeStamp? = nil, modificationState: VolumeModificationState? = nil, originalIops: Int? = nil, originalSize: Int? = nil, originalVolumeType: VolumeType? = nil, progress: Int64? = nil, startTime: TimeStamp? = nil, statusMessage: String? = nil, targetIops: Int? = nil, targetSize: Int? = nil, targetVolumeType: VolumeType? = nil, volumeId: String? = nil) {
            self.endTime = endTime
            self.modificationState = modificationState
            self.originalIops = originalIops
            self.originalSize = originalSize
            self.originalVolumeType = originalVolumeType
            self.progress = progress
            self.startTime = startTime
            self.statusMessage = statusMessage
            self.targetIops = targetIops
            self.targetSize = targetSize
            self.targetVolumeType = targetVolumeType
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case modificationState = "modificationState"
            case originalIops = "originalIops"
            case originalSize = "originalSize"
            case originalVolumeType = "originalVolumeType"
            case progress = "progress"
            case startTime = "startTime"
            case statusMessage = "statusMessage"
            case targetIops = "targetIops"
            case targetSize = "targetSize"
            case targetVolumeType = "targetVolumeType"
            case volumeId = "volumeId"
        }
    }

    public struct VolumeStatusAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string)
        ]

        /// The code identifying the operation, for example, enable-volume-io.
        public let code: String?
        /// A description of the operation.
        public let description: String?
        /// The ID of the event associated with this operation.
        public let eventId: String?
        /// The event type associated with this operation.
        public let eventType: String?

        public init(code: String? = nil, description: String? = nil, eventId: String? = nil, eventType: String? = nil) {
            self.code = code
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case description = "description"
            case eventId = "eventId"
            case eventType = "eventType"
        }
    }

    public struct VolumeStatusAttachmentStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "IoPerformance", location: .body(locationName: "ioPerformance"), required: false, type: .string)
        ]

        /// The ID of the attached instance.
        public let instanceId: String?
        /// The maximum IOPS supported by the attached instance.
        public let ioPerformance: String?

        public init(instanceId: String? = nil, ioPerformance: String? = nil) {
            self.instanceId = instanceId
            self.ioPerformance = ioPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case ioPerformance = "ioPerformance"
        }
    }

    public struct VolumeStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string)
        ]

        /// The name of the volume status.
        public let name: VolumeStatusName?
        /// The intended status of the volume status.
        public let status: String?

        public init(name: VolumeStatusName? = nil, status: String? = nil) {
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case status = "status"
        }
    }

    public struct VolumeStatusEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp)
        ]

        /// A description of the event.
        public let description: String?
        /// The ID of this event.
        public let eventId: String?
        /// The type of this event.
        public let eventType: String?
        /// The ID of the instance associated with the event.
        public let instanceId: String?
        /// The latest end time of the event.
        public let notAfter: TimeStamp?
        /// The earliest start time of the event.
        public let notBefore: TimeStamp?

        public init(description: String? = nil, eventId: String? = nil, eventType: String? = nil, instanceId: String? = nil, notAfter: TimeStamp? = nil, notBefore: TimeStamp? = nil) {
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
            self.instanceId = instanceId
            self.notAfter = notAfter
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case eventId = "eventId"
            case eventType = "eventType"
            case instanceId = "instanceId"
            case notAfter = "notAfter"
            case notBefore = "notBefore"
        }
    }

    public struct VolumeStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]

        /// The details of the volume status.
        public let details: [VolumeStatusDetails]?
        /// The status of the volume.
        public let status: VolumeStatusInfoStatus?

        public init(details: [VolumeStatusDetails]? = nil, status: VolumeStatusInfoStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct VolumeStatusItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", location: .body(locationName: "actionsSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AttachmentStatuses", location: .body(locationName: "attachmentStatuses"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OutpostArn", location: .body(locationName: "outpostArn"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatus", location: .body(locationName: "volumeStatus"), required: false, type: .structure)
        ]

        /// The details of the operation.
        public let actions: [VolumeStatusAction]?
        /// Information about the instances to which the volume is attached.
        public let attachmentStatuses: [VolumeStatusAttachmentStatus]?
        /// The Availability Zone of the volume.
        public let availabilityZone: String?
        /// A list of events associated with the volume.
        public let events: [VolumeStatusEvent]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The volume ID.
        public let volumeId: String?
        /// The volume status.
        public let volumeStatus: VolumeStatusInfo?

        public init(actions: [VolumeStatusAction]? = nil, attachmentStatuses: [VolumeStatusAttachmentStatus]? = nil, availabilityZone: String? = nil, events: [VolumeStatusEvent]? = nil, outpostArn: String? = nil, volumeId: String? = nil, volumeStatus: VolumeStatusInfo? = nil) {
            self.actions = actions
            self.attachmentStatuses = attachmentStatuses
            self.availabilityZone = availabilityZone
            self.events = events
            self.outpostArn = outpostArn
            self.volumeId = volumeId
            self.volumeStatus = volumeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actionsSet"
            case attachmentStatuses = "attachmentStatuses"
            case availabilityZone = "availabilityZone"
            case events = "eventsSet"
            case outpostArn = "outpostArn"
            case volumeId = "volumeId"
            case volumeStatus = "volumeStatus"
        }
    }

    public struct Vpc: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockAssociationSet", location: .body(locationName: "cidrBlockAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "isDefault"), required: false, type: .boolean), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The primary IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks associated with the VPC.
        public let cidrBlockAssociationSet: [VpcCidrBlockAssociation]?
        /// The ID of the set of DHCP options you've associated with the VPC.
        public let dhcpOptionsId: String?
        /// The allowed tenancy of instances launched into the VPC.
        public let instanceTenancy: Tenancy?
        /// Information about the IPv6 CIDR blocks associated with the VPC.
        public let ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]?
        /// Indicates whether the VPC is the default VPC.
        public let isDefault: Bool?
        /// The ID of the AWS account that owns the VPC.
        public let ownerId: String?
        /// The current state of the VPC.
        public let state: VpcState?
        /// Any tags assigned to the VPC.
        public let tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockAssociationSet: [VpcCidrBlockAssociation]? = nil, dhcpOptionsId: String? = nil, instanceTenancy: Tenancy? = nil, ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]? = nil, isDefault: Bool? = nil, ownerId: String? = nil, state: VpcState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockAssociationSet = cidrBlockAssociationSet
            self.dhcpOptionsId = dhcpOptionsId
            self.instanceTenancy = instanceTenancy
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case cidrBlockAssociationSet = "cidrBlockAssociationSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case instanceTenancy = "instanceTenancy"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case isDefault = "isDefault"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct VpcAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The current state of the attachment.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct VpcCidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockState", location: .body(locationName: "cidrBlockState"), required: false, type: .structure)
        ]

        /// The association ID for the IPv4 CIDR block.
        public let associationId: String?
        /// The IPv4 CIDR block.
        public let cidrBlock: String?
        /// Information about the state of the CIDR block.
        public let cidrBlockState: VpcCidrBlockState?

        public init(associationId: String? = nil, cidrBlock: String? = nil, cidrBlockState: VpcCidrBlockState? = nil) {
            self.associationId = associationId
            self.cidrBlock = cidrBlock
            self.cidrBlockState = cidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case cidrBlock = "cidrBlock"
            case cidrBlockState = "cidrBlockState"
        }
    }

    public struct VpcCidrBlockState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]

        /// The state of the CIDR block.
        public let state: VpcCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: VpcCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct VpcClassicLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLinkEnabled", location: .body(locationName: "classicLinkEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// Indicates whether the VPC is enabled for ClassicLink.
        public let classicLinkEnabled: Bool?
        /// Any tags assigned to the VPC.
        public let tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkEnabled: Bool? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.classicLinkEnabled = classicLinkEnabled
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkEnabled = "classicLinkEnabled"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct VpcEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", location: .body(locationName: "creationTimestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DnsEntries", location: .body(locationName: "dnsEntrySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "LastError", location: .body(locationName: "lastError"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "networkInterfaceIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PolicyDocument", location: .body(locationName: "policyDocument"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsEnabled", location: .body(locationName: "privateDnsEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "RequesterManaged", location: .body(locationName: "requesterManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "routeTableIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIdSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointType", location: .body(locationName: "vpcEndpointType"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The date and time that the VPC endpoint was created.
        public let creationTimestamp: TimeStamp?
        /// (Interface endpoint) The DNS entries for the endpoint.
        public let dnsEntries: [DnsEntry]?
        /// (Interface endpoint) Information about the security groups that are associated with the network interface.
        public let groups: [SecurityGroupIdentifier]?
        /// The last error that occurred for VPC endpoint.
        public let lastError: LastError?
        /// (Interface endpoint) One or more network interfaces for the endpoint.
        public let networkInterfaceIds: [String]?
        /// The ID of the AWS account that owns the VPC endpoint.
        public let ownerId: String?
        /// The policy document associated with the endpoint, if applicable.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
        public let privateDnsEnabled: Bool?
        /// Indicates whether the VPC endpoint is being managed by its service.
        public let requesterManaged: Bool?
        /// (Gateway endpoint) One or more route tables associated with the endpoint.
        public let routeTableIds: [String]?
        /// The name of the service to which the endpoint is associated.
        public let serviceName: String?
        /// The state of the VPC endpoint.
        public let state: State?
        /// (Interface endpoint) One or more subnets in which the endpoint is located.
        public let subnetIds: [String]?
        /// Any tags assigned to the VPC endpoint.
        public let tags: [Tag]?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The type of endpoint.
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC to which the endpoint is associated.
        public let vpcId: String?

        public init(creationTimestamp: TimeStamp? = nil, dnsEntries: [DnsEntry]? = nil, groups: [SecurityGroupIdentifier]? = nil, lastError: LastError? = nil, networkInterfaceIds: [String]? = nil, ownerId: String? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, requesterManaged: Bool? = nil, routeTableIds: [String]? = nil, serviceName: String? = nil, state: State? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, vpcEndpointId: String? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.groups = groups
            self.lastError = lastError
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.requesterManaged = requesterManaged
            self.routeTableIds = routeTableIds
            self.serviceName = serviceName
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "creationTimestamp"
            case dnsEntries = "dnsEntrySet"
            case groups = "groupSet"
            case lastError = "lastError"
            case networkInterfaceIds = "networkInterfaceIdSet"
            case ownerId = "ownerId"
            case policyDocument = "policyDocument"
            case privateDnsEnabled = "privateDnsEnabled"
            case requesterManaged = "requesterManaged"
            case routeTableIds = "routeTableIdSet"
            case serviceName = "serviceName"
            case state = "state"
            case subnetIds = "subnetIdSet"
            case tags = "tagSet"
            case vpcEndpointId = "vpcEndpointId"
            case vpcEndpointType = "vpcEndpointType"
            case vpcId = "vpcId"
        }
    }

    public struct VpcEndpointConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", location: .body(locationName: "creationTimestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DnsEntries", location: .body(locationName: "dnsEntrySet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "NetworkLoadBalancerArns", location: .body(locationName: "networkLoadBalancerArnSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointOwner", location: .body(locationName: "vpcEndpointOwner"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointState", location: .body(locationName: "vpcEndpointState"), required: false, type: .enum)
        ]

        /// The date and time that the VPC endpoint was created.
        public let creationTimestamp: TimeStamp?
        /// The DNS entries for the VPC endpoint.
        public let dnsEntries: [DnsEntry]?
        /// The Amazon Resource Names (ARNs) of the network load balancers for the service.
        public let networkLoadBalancerArns: [String]?
        /// The ID of the service to which the endpoint is connected.
        public let serviceId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The AWS account ID of the owner of the VPC endpoint.
        public let vpcEndpointOwner: String?
        /// The state of the VPC endpoint.
        public let vpcEndpointState: State?

        public init(creationTimestamp: TimeStamp? = nil, dnsEntries: [DnsEntry]? = nil, networkLoadBalancerArns: [String]? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil, vpcEndpointOwner: String? = nil, vpcEndpointState: State? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcEndpointState = vpcEndpointState
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "creationTimestamp"
            case dnsEntries = "dnsEntrySet"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case serviceId = "serviceId"
            case vpcEndpointId = "vpcEndpointId"
            case vpcEndpointOwner = "vpcEndpointOwner"
            case vpcEndpointState = "vpcEndpointState"
        }
    }

    public struct VpcIpv6CidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6Pool", location: .body(locationName: "ipv6Pool"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkBorderGroup", location: .body(locationName: "networkBorderGroup"), required: false, type: .string)
        ]

        /// The association ID for the IPv6 CIDR block.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: VpcCidrBlockState?
        /// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
        public let ipv6Pool: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses, for example, us-east-1-wl1-bos-wlz-1.
        public let networkBorderGroup: String?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: VpcCidrBlockState? = nil, ipv6Pool: String? = nil, networkBorderGroup: String? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.ipv6Pool = ipv6Pool
            self.networkBorderGroup = networkBorderGroup
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case ipv6Pool = "ipv6Pool"
            case networkBorderGroup = "networkBorderGroup"
        }
    }

    public struct VpcPeeringConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterVpcInfo", location: .body(locationName: "accepterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequesterVpcInfo", location: .body(locationName: "requesterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]

        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The time that an unaccepted VPC peering connection will expire.
        public let expirationTime: TimeStamp?
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The status of the VPC peering connection.
        public let status: VpcPeeringConnectionStateReason?
        /// Any tags assigned to the resource.
        public let tags: [Tag]?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(accepterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, expirationTime: TimeStamp? = nil, requesterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, status: VpcPeeringConnectionStateReason? = nil, tags: [Tag]? = nil, vpcPeeringConnectionId: String? = nil) {
            self.accepterVpcInfo = accepterVpcInfo
            self.expirationTime = expirationTime
            self.requesterVpcInfo = requesterVpcInfo
            self.status = status
            self.tags = tags
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterVpcInfo = "accepterVpcInfo"
            case expirationTime = "expirationTime"
            case requesterVpcInfo = "requesterVpcInfo"
            case status = "status"
            case tags = "tagSet"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct VpcPeeringConnectionOptionsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean)
        ]

        /// Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct VpcPeeringConnectionStateReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]

        /// The status of the VPC peering connection.
        public let code: VpcPeeringConnectionStateReasonCode?
        /// A message that provides more information about the status, if applicable.
        public let message: String?

        public init(code: VpcPeeringConnectionStateReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct VpcPeeringConnectionVpcInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockSet", location: .body(locationName: "cidrBlockSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Ipv6CidrBlockSet", location: .body(locationName: "ipv6CidrBlockSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PeeringOptions", location: .body(locationName: "peeringOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]

        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks for the VPC.
        public let cidrBlockSet: [CidrBlock]?
        /// The IPv6 CIDR block for the VPC.
        public let ipv6CidrBlockSet: [Ipv6CidrBlock]?
        /// The AWS account ID of the VPC owner.
        public let ownerId: String?
        /// Information about the VPC peering connection options for the accepter or requester VPC.
        public let peeringOptions: VpcPeeringConnectionOptionsDescription?
        /// The Region in which the VPC is located.
        public let region: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockSet: [CidrBlock]? = nil, ipv6CidrBlockSet: [Ipv6CidrBlock]? = nil, ownerId: String? = nil, peeringOptions: VpcPeeringConnectionOptionsDescription? = nil, region: String? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockSet = cidrBlockSet
            self.ipv6CidrBlockSet = ipv6CidrBlockSet
            self.ownerId = ownerId
            self.peeringOptions = peeringOptions
            self.region = region
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case cidrBlockSet = "cidrBlockSet"
            case ipv6CidrBlockSet = "ipv6CidrBlockSet"
            case ownerId = "ownerId"
            case peeringOptions = "peeringOptions"
            case region = "region"
            case vpcId = "vpcId"
        }
    }

    public struct VpnConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Category", location: .body(locationName: "category"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerGatewayConfiguration", location: .body(locationName: "customerGatewayConfiguration"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routes"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "VgwTelemetry", location: .body(locationName: "vgwTelemetry"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpnConnectionId", location: .body(locationName: "vpnConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string)
        ]

        /// The category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
        public let category: String?
        /// The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
        public let customerGatewayConfiguration: String?
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// The VPN connection options.
        public let options: VpnConnectionOptions?
        /// The static routes associated with the VPN connection.
        public let routes: [VpnStaticRoute]?
        /// The current state of the VPN connection.
        public let state: VpnState?
        /// Any tags assigned to the VPN connection.
        public let tags: [Tag]?
        /// The ID of the transit gateway associated with the VPN connection.
        public let transitGatewayId: String?
        /// The type of VPN connection.
        public let `type`: GatewayType?
        /// Information about the VPN tunnel.
        public let vgwTelemetry: [VgwTelemetry]?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?

        public init(category: String? = nil, customerGatewayConfiguration: String? = nil, customerGatewayId: String? = nil, options: VpnConnectionOptions? = nil, routes: [VpnStaticRoute]? = nil, state: VpnState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, type: GatewayType? = nil, vgwTelemetry: [VgwTelemetry]? = nil, vpnConnectionId: String? = nil, vpnGatewayId: String? = nil) {
            self.category = category
            self.customerGatewayConfiguration = customerGatewayConfiguration
            self.customerGatewayId = customerGatewayId
            self.options = options
            self.routes = routes
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.`type` = `type`
            self.vgwTelemetry = vgwTelemetry
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case category = "category"
            case customerGatewayConfiguration = "customerGatewayConfiguration"
            case customerGatewayId = "customerGatewayId"
            case options = "options"
            case routes = "routes"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case `type` = "type"
            case vgwTelemetry = "vgwTelemetry"
            case vpnConnectionId = "vpnConnectionId"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public struct VpnConnectionOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableAcceleration", location: .body(locationName: "enableAcceleration"), required: false, type: .boolean), 
            AWSShapeMember(label: "LocalIpv4NetworkCidr", location: .body(locationName: "localIpv4NetworkCidr"), required: false, type: .string), 
            AWSShapeMember(label: "LocalIpv6NetworkCidr", location: .body(locationName: "localIpv6NetworkCidr"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv4NetworkCidr", location: .body(locationName: "remoteIpv4NetworkCidr"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv6NetworkCidr", location: .body(locationName: "remoteIpv6NetworkCidr"), required: false, type: .string), 
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean), 
            AWSShapeMember(label: "TunnelInsideIpVersion", location: .body(locationName: "tunnelInsideIpVersion"), required: false, type: .enum), 
            AWSShapeMember(label: "TunnelOptions", location: .body(locationName: "tunnelOptionSet"), required: false, type: .list, encoding: .list(member:"item"))
        ]

        /// Indicates whether acceleration is enabled for the VPN connection.
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection.
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection.
        public let remoteIpv6NetworkCidr: String?
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?
        /// Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// Indicates the VPN tunnel options.
        public let tunnelOptions: [TunnelOption]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [TunnelOption]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration = "enableAcceleration"
            case localIpv4NetworkCidr = "localIpv4NetworkCidr"
            case localIpv6NetworkCidr = "localIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "remoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "remoteIpv6NetworkCidr"
            case staticRoutesOnly = "staticRoutesOnly"
            case tunnelInsideIpVersion = "tunnelInsideIpVersion"
            case tunnelOptions = "tunnelOptionSet"
        }
    }

    public struct VpnConnectionOptionsSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableAcceleration", required: false, type: .boolean), 
            AWSShapeMember(label: "LocalIpv4NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "LocalIpv6NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv4NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpv6NetworkCidr", required: false, type: .string), 
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean), 
            AWSShapeMember(label: "TunnelInsideIpVersion", required: false, type: .enum), 
            AWSShapeMember(label: "TunnelOptions", required: false, type: .list, encoding: .list(member:"member"))
        ]

        /// Indicate whether to enable acceleration for the VPN connection. Default: false 
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0 
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0 
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection. Default: 0.0.0.0/0 
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection. Default: ::/0 
        public let remoteIpv6NetworkCidr: String?
        /// Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use CreateVpnConnectionRoute to create a static route. Default: false 
        public let staticRoutesOnly: Bool?
        /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: ipv4 
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// The tunnel options for the VPN connection.
        public let tunnelOptions: [VpnTunnelOptionsSpecification]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [VpnTunnelOptionsSpecification]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration = "EnableAcceleration"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case staticRoutesOnly = "staticRoutesOnly"
            case tunnelInsideIpVersion = "TunnelInsideIpVersion"
            case tunnelOptions = "TunnelOptions"
        }
    }

    public struct VpnGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmazonSideAsn", location: .body(locationName: "amazonSideAsn"), required: false, type: .long), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcAttachments", location: .body(locationName: "attachments"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string)
        ]

        /// The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
        public let amazonSideAsn: Int64?
        /// The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
        public let availabilityZone: String?
        /// The current state of the virtual private gateway.
        public let state: VpnState?
        /// Any tags assigned to the virtual private gateway.
        public let tags: [Tag]?
        /// The type of VPN connection the virtual private gateway supports.
        public let `type`: GatewayType?
        /// Any VPCs attached to the virtual private gateway.
        public let vpcAttachments: [VpcAttachment]?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, state: VpnState? = nil, tags: [Tag]? = nil, type: GatewayType? = nil, vpcAttachments: [VpcAttachment]? = nil, vpnGatewayId: String? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.state = state
            self.tags = tags
            self.`type` = `type`
            self.vpcAttachments = vpcAttachments
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "amazonSideAsn"
            case availabilityZone = "availabilityZone"
            case state = "state"
            case tags = "tagSet"
            case `type` = "type"
            case vpcAttachments = "attachments"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public struct VpnStaticRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]

        /// The CIDR block associated with the local subnet of the customer data center.
        public let destinationCidrBlock: String?
        /// Indicates how the routes were provided.
        public let source: VpnStaticRouteSource?
        /// The current state of the static route.
        public let state: VpnState?

        public init(destinationCidrBlock: String? = nil, source: VpnStaticRouteSource? = nil, state: VpnState? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.source = source
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case source = "source"
            case state = "state"
        }
    }

    public struct VpnTunnelOptionsSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DPDTimeoutAction", required: false, type: .string), 
            AWSShapeMember(label: "DPDTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "IKEVersions", location: .body(locationName: "IKEVersion"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1DHGroupNumbers", location: .body(locationName: "Phase1DHGroupNumber"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1EncryptionAlgorithms", location: .body(locationName: "Phase1EncryptionAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1IntegrityAlgorithms", location: .body(locationName: "Phase1IntegrityAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase1LifetimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Phase2DHGroupNumbers", location: .body(locationName: "Phase2DHGroupNumber"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2EncryptionAlgorithms", location: .body(locationName: "Phase2EncryptionAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2IntegrityAlgorithms", location: .body(locationName: "Phase2IntegrityAlgorithm"), required: false, type: .list, encoding: .list(member:"item")), 
            AWSShapeMember(label: "Phase2LifetimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "PreSharedKey", required: false, type: .string), 
            AWSShapeMember(label: "RekeyFuzzPercentage", required: false, type: .integer), 
            AWSShapeMember(label: "RekeyMarginTimeSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "ReplayWindowSize", required: false, type: .integer), 
            AWSShapeMember(label: "StartupAction", required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideCidr", required: false, type: .string), 
            AWSShapeMember(label: "TunnelInsideIpv6Cidr", required: false, type: .string)
        ]

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear 
        public let dPDTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: 30 
        public let dPDTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2 
        public let iKEVersions: [IKEVersionsRequestListValue]?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 
        public let phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16 
        public let phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512 
        public let phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800 
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 
        public let phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16 
        public let phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512 
        public let phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600 
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100 
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 540 
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024 
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid Values: add | start  Default: add 
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30   
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dPDTimeoutAction: String? = nil, dPDTimeoutSeconds: Int? = nil, iKEVersions: [IKEVersionsRequestListValue]? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dPDTimeoutAction = dPDTimeoutAction
            self.dPDTimeoutSeconds = dPDTimeoutSeconds
            self.iKEVersions = iKEVersions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dPDTimeoutAction = "DPDTimeoutAction"
            case dPDTimeoutSeconds = "DPDTimeoutSeconds"
            case iKEVersions = "IKEVersion"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct WithdrawByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]

        /// The address range, in CIDR notation.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct WithdrawByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]

        /// Information about the address pool.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }
}
